
PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800aec0  0800aec0  0001aec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b24c  0800b24c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b254  0800b254  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ce4  200001e0  0800b438  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005ec4  0800b438  00025ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015824  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cf5  00000000  00000000  00035a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  00038728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f66  00000000  00000000  0003a800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2e3  00000000  00000000  0005e766  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d24c1  00000000  00000000  0006ca49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ef0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005930  00000000  00000000  0013ef88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aea8 	.word	0x0800aea8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800aea8 	.word	0x0800aea8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b972 	b.w	8000fe4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4688      	mov	r8, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14b      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4615      	mov	r5, r2
 8000d2a:	d967      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0720 	rsb	r7, r2, #32
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d3e:	4095      	lsls	r5, r2
 8000d40:	ea47 0803 	orr.w	r8, r7, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d50:	fa1f fc85 	uxth.w	ip, r5
 8000d54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d6a:	f080 811b 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8118 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000d74:	3f02      	subs	r7, #2
 8000d76:	442b      	add	r3, r5
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	192c      	adds	r4, r5, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000da0:	3802      	subs	r0, #2
 8000da2:	442c      	add	r4, r5
 8000da4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000da8:	eba4 040c 	sub.w	r4, r4, ip
 8000dac:	2700      	movs	r7, #0
 8000dae:	b11e      	cbz	r6, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c6 4300 	strd	r4, r3, [r6]
 8000db8:	4639      	mov	r1, r7
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xbe>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80eb 	beq.w	8000f9e <__udivmoddi4+0x286>
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e9c6 0100 	strd	r0, r1, [r6]
 8000dce:	4638      	mov	r0, r7
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f783 	clz	r7, r3
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d147      	bne.n	8000e6e <__udivmoddi4+0x156>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd0>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80fa 	bhi.w	8000fdc <__udivmoddi4+0x2c4>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	4698      	mov	r8, r3
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000df6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xe8>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 808f 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e0a:	1b49      	subs	r1, r1, r5
 8000e0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e10:	fa1f f885 	uxth.w	r8, r5
 8000e14:	2701      	movs	r7, #1
 8000e16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e1a:	0c23      	lsrs	r3, r4, #16
 8000e1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb08 f10c 	mul.w	r1, r8, ip
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2c:	18eb      	adds	r3, r5, r3
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	f200 80cd 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x14c>
 8000e54:	192c      	adds	r4, r5, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x14a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80b6 	bhi.w	8000fce <__udivmoddi4+0x2b6>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e79f      	b.n	8000dae <__udivmoddi4+0x96>
 8000e6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e72:	40bb      	lsls	r3, r7
 8000e74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e8c:	4325      	orrs	r5, r4
 8000e8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e92:	0c2c      	lsrs	r4, r5, #16
 8000e94:	fb08 3319 	mls	r3, r8, r9, r3
 8000e98:	fa1f fa8e 	uxth.w	sl, lr
 8000e9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eaa:	fa00 f107 	lsl.w	r1, r0, r7
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	f080 8087 	bcs.w	8000fca <__udivmoddi4+0x2b2>
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	f240 8084 	bls.w	8000fca <__udivmoddi4+0x2b2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4473      	add	r3, lr
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	b2ad      	uxth	r5, r5
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ed8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000edc:	45a2      	cmp	sl, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	d26b      	bcs.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eea:	45a2      	cmp	sl, r4
 8000eec:	d969      	bls.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4474      	add	r4, lr
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	eba4 040a 	sub.w	r4, r4, sl
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c2      	mov	sl, r8
 8000f02:	464b      	mov	r3, r9
 8000f04:	d354      	bcc.n	8000fb0 <__udivmoddi4+0x298>
 8000f06:	d051      	beq.n	8000fac <__udivmoddi4+0x294>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d069      	beq.n	8000fe0 <__udivmoddi4+0x2c8>
 8000f0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f10:	eb64 0403 	sbc.w	r4, r4, r3
 8000f14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	40fc      	lsrs	r4, r7
 8000f1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f20:	e9c6 5400 	strd	r5, r4, [r6]
 8000f24:	2700      	movs	r7, #0
 8000f26:	e747      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f30:	4095      	lsls	r5, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3e:	4338      	orrs	r0, r7
 8000f40:	0c01      	lsrs	r1, r0, #16
 8000f42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f46:	fa1f f885 	uxth.w	r8, r5
 8000f4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb07 f308 	mul.w	r3, r7, r8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x256>
 8000f5e:	1869      	adds	r1, r5, r1
 8000f60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f64:	d22f      	bcs.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d92d      	bls.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f6a:	3f02      	subs	r7, #2
 8000f6c:	4429      	add	r1, r5
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	b281      	uxth	r1, r0
 8000f72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb00 f308 	mul.w	r3, r0, r8
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x27e>
 8000f86:	1869      	adds	r1, r5, r1
 8000f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8c:	d217      	bcs.n	8000fbe <__udivmoddi4+0x2a6>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d915      	bls.n	8000fbe <__udivmoddi4+0x2a6>
 8000f92:	3802      	subs	r0, #2
 8000f94:	4429      	add	r1, r5
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f9c:	e73b      	b.n	8000e16 <__udivmoddi4+0xfe>
 8000f9e:	4637      	mov	r7, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e709      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	e6e7      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fac:	4541      	cmp	r1, r8
 8000fae:	d2ab      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fb8:	3801      	subs	r0, #1
 8000fba:	4613      	mov	r3, r2
 8000fbc:	e7a4      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fbe:	4660      	mov	r0, ip
 8000fc0:	e7e9      	b.n	8000f96 <__udivmoddi4+0x27e>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	e795      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc6:	4667      	mov	r7, ip
 8000fc8:	e7d1      	b.n	8000f6e <__udivmoddi4+0x256>
 8000fca:	4681      	mov	r9, r0
 8000fcc:	e77c      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	442c      	add	r4, r5
 8000fd2:	e747      	b.n	8000e64 <__udivmoddi4+0x14c>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	442b      	add	r3, r5
 8000fda:	e72f      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fdc:	4638      	mov	r0, r7
 8000fde:	e708      	b.n	8000df2 <__udivmoddi4+0xda>
 8000fe0:	4637      	mov	r7, r6
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0xa0>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f94d 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f005 f8a8 	bl	8006170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f965 	bl	800131a <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f92d 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004
 8001088:	20000000 	.word	0x20000000

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000004 	.word	0x20000004
 80010b0:	20000208 	.word	0x20000208

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000208 	.word	0x20000208

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_Delay+0x40>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000004 	.word	0x20000004

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff feb8 	bl	80010b4 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e099      	b.n	8001484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001370:	e00f      	b.n	8001392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001372:	f7ff fe9f 	bl	80010b4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b05      	cmp	r3, #5
 800137e:	d908      	bls.n	8001392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2220      	movs	r2, #32
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e078      	b.n	8001484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e8      	bne.n	8001372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <HAL_DMA_Init+0x158>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d107      	bne.n	80013fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4313      	orrs	r3, r2
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f023 0307 	bic.w	r3, r3, #7
 8001412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	4313      	orrs	r3, r2
 800141c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	2b04      	cmp	r3, #4
 8001424:	d117      	bne.n	8001456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00e      	beq.n	8001456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fa91 	bl	8001960 <DMA_CheckFifoParam>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001452:	2301      	movs	r3, #1
 8001454:	e016      	b.n	8001484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fa48 	bl	80018f4 <DMA_CalcBaseAndBitshift>
 8001464:	4603      	mov	r3, r0
 8001466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	223f      	movs	r2, #63	; 0x3f
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	f010803f 	.word	0xf010803f

08001490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_DMA_Start_IT+0x26>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e040      	b.n	8001538 <HAL_DMA_Start_IT+0xa8>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d12f      	bne.n	800152a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2202      	movs	r2, #2
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f9da 	bl	8001898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	223f      	movs	r2, #63	; 0x3f
 80014ea:	409a      	lsls	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0216 	orr.w	r2, r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0208 	orr.w	r2, r2, #8
 8001516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e005      	b.n	8001536 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001532:	2302      	movs	r3, #2
 8001534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d004      	beq.n	800155e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00c      	b.n	8001578 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2205      	movs	r2, #5
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001590:	4b92      	ldr	r3, [pc, #584]	; (80017dc <HAL_DMA_IRQHandler+0x258>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a92      	ldr	r2, [pc, #584]	; (80017e0 <HAL_DMA_IRQHandler+0x25c>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0a9b      	lsrs	r3, r3, #10
 800159c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	2208      	movs	r2, #8
 80015b0:	409a      	lsls	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01a      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0204 	bic.w	r2, r2, #4
 80015d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2208      	movs	r2, #8
 80015de:	409a      	lsls	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	2201      	movs	r2, #1
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d012      	beq.n	8001626 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	2201      	movs	r2, #1
 8001614:	409a      	lsls	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	f043 0202 	orr.w	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	2204      	movs	r2, #4
 800162c:	409a      	lsls	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d012      	beq.n	800165c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00b      	beq.n	800165c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	2204      	movs	r2, #4
 800164a:	409a      	lsls	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	f043 0204 	orr.w	r2, r3, #4
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	2210      	movs	r2, #16
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d043      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d03c      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2210      	movs	r2, #16
 8001680:	409a      	lsls	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d018      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d108      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d024      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
 80016b2:	e01f      	b.n	80016f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01b      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
 80016c4:	e016      	b.n	80016f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0208 	bic.w	r2, r2, #8
 80016e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	2220      	movs	r2, #32
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 808e 	beq.w	8001822 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8086 	beq.w	8001822 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171a:	2220      	movs	r2, #32
 800171c:	409a      	lsls	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b05      	cmp	r3, #5
 800172c:	d136      	bne.n	800179c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0216 	bic.w	r2, r2, #22
 800173c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800174c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <HAL_DMA_IRQHandler+0x1da>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0208 	bic.w	r2, r2, #8
 800176c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	223f      	movs	r2, #63	; 0x3f
 8001774:	409a      	lsls	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178e:	2b00      	cmp	r3, #0
 8001790:	d07d      	beq.n	800188e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
        }
        return;
 800179a:	e078      	b.n	800188e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01c      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d108      	bne.n	80017ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d030      	beq.n	8001822 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4798      	blx	r3
 80017c8:	e02b      	b.n	8001822 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d027      	beq.n	8001822 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
 80017da:	e022      	b.n	8001822 <HAL_DMA_IRQHandler+0x29e>
 80017dc:	20000008 	.word	0x20000008
 80017e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10f      	bne.n	8001812 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0210 	bic.w	r2, r2, #16
 8001800:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	2b00      	cmp	r3, #0
 8001828:	d032      	beq.n	8001890 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d022      	beq.n	800187c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3301      	adds	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	429a      	cmp	r2, r3
 8001858:	d307      	bcc.n	800186a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f2      	bne.n	800184e <HAL_DMA_IRQHandler+0x2ca>
 8001868:	e000      	b.n	800186c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800186a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e000      	b.n	8001890 <HAL_DMA_IRQHandler+0x30c>
        return;
 800188e:	bf00      	nop
    }
  }
}
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop

08001898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d108      	bne.n	80018d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018d6:	e007      	b.n	80018e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	3b10      	subs	r3, #16
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <DMA_CalcBaseAndBitshift+0x64>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <DMA_CalcBaseAndBitshift+0x68>)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d909      	bls.n	8001936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	1d1a      	adds	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	659a      	str	r2, [r3, #88]	; 0x58
 8001934:	e007      	b.n	8001946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800193e:	f023 0303 	bic.w	r3, r3, #3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	aaaaaaab 	.word	0xaaaaaaab
 800195c:	0800aefc 	.word	0x0800aefc

08001960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d11f      	bne.n	80019ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d855      	bhi.n	8001a2c <DMA_CheckFifoParam+0xcc>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <DMA_CheckFifoParam+0x28>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001999 	.word	0x08001999
 800198c:	080019ab 	.word	0x080019ab
 8001990:	08001999 	.word	0x08001999
 8001994:	08001a2d 	.word	0x08001a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d045      	beq.n	8001a30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a8:	e042      	b.n	8001a30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019b2:	d13f      	bne.n	8001a34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b8:	e03c      	b.n	8001a34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c2:	d121      	bne.n	8001a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d836      	bhi.n	8001a38 <DMA_CheckFifoParam+0xd8>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <DMA_CheckFifoParam+0x70>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019e7 	.word	0x080019e7
 80019d8:	080019e1 	.word	0x080019e1
 80019dc:	080019f9 	.word	0x080019f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      break;
 80019e4:	e02f      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d024      	beq.n	8001a3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f6:	e021      	b.n	8001a3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a00:	d11e      	bne.n	8001a40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a06:	e01b      	b.n	8001a40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d902      	bls.n	8001a14 <DMA_CheckFifoParam+0xb4>
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d003      	beq.n	8001a1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a12:	e018      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e015      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00e      	beq.n	8001a44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2a:	e00b      	b.n	8001a44 <DMA_CheckFifoParam+0xe4>
      break;
 8001a2c:	bf00      	nop
 8001a2e:	e00a      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      break;
 8001a30:	bf00      	nop
 8001a32:	e008      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      break;
 8001a34:	bf00      	nop
 8001a36:	e006      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      break;
 8001a38:	bf00      	nop
 8001a3a:	e004      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      break;
 8001a3c:	bf00      	nop
 8001a3e:	e002      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a40:	bf00      	nop
 8001a42:	e000      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      break;
 8001a44:	bf00      	nop
    }
  } 
  
  return status; 
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e165      	b.n	8001d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8154 	bne.w	8001d36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d00b      	beq.n	8001aae <HAL_GPIO_Init+0x5a>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa2:	2b11      	cmp	r3, #17
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0xfc>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	d123      	bne.n	8001b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	69b9      	ldr	r1, [r7, #24]
 8001b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80ae 	beq.w	8001d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_GPIO_Init+0x2fc>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <HAL_GPIO_Init+0x2fc>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_GPIO_Init+0x2fc>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf6:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_GPIO_Init+0x300>)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d025      	beq.n	8001c6e <HAL_GPIO_Init+0x21a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <HAL_GPIO_Init+0x308>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <HAL_GPIO_Init+0x216>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4c      	ldr	r2, [pc, #304]	; (8001d60 <HAL_GPIO_Init+0x30c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x212>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4b      	ldr	r2, [pc, #300]	; (8001d64 <HAL_GPIO_Init+0x310>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <HAL_GPIO_Init+0x314>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x20a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a49      	ldr	r2, [pc, #292]	; (8001d6c <HAL_GPIO_Init+0x318>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a48      	ldr	r2, [pc, #288]	; (8001d70 <HAL_GPIO_Init+0x31c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x202>
 8001c52:	2306      	movs	r3, #6
 8001c54:	e00c      	b.n	8001c70 <HAL_GPIO_Init+0x21c>
 8001c56:	2307      	movs	r3, #7
 8001c58:	e00a      	b.n	8001c70 <HAL_GPIO_Init+0x21c>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x21c>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x21c>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x21c>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x21c>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x21c>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c80:	4934      	ldr	r1, [pc, #208]	; (8001d54 <HAL_GPIO_Init+0x300>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb2:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cdc:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f67f ae96 	bls.w	8001a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dac:	b08f      	sub	sp, #60	; 0x3c
 8001dae:	af0a      	add	r7, sp, #40	; 0x28
 8001db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e116      	b.n	8001fea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f004 fbb2 	bl	8006540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2203      	movs	r2, #3
 8001de0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fd8b 	bl	8004916 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	687e      	ldr	r6, [r7, #4]
 8001e08:	466d      	mov	r5, sp
 8001e0a:	f106 0410 	add.w	r4, r6, #16
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1e:	1d33      	adds	r3, r6, #4
 8001e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	f002 fd16 	bl	8004854 <USB_CoreInit>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0d7      	b.n	8001fea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fd79 	bl	8004938 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e04a      	b.n	8001ee2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	333d      	adds	r3, #61	; 0x3d
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	333c      	adds	r3, #60	; 0x3c
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	b298      	uxth	r0, r3
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3342      	adds	r3, #66	; 0x42
 8001e88:	4602      	mov	r2, r0
 8001e8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	333f      	adds	r3, #63	; 0x3f
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3344      	adds	r3, #68	; 0x44
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3348      	adds	r3, #72	; 0x48
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3350      	adds	r3, #80	; 0x50
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d3af      	bcc.n	8001e4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e044      	b.n	8001f7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3b5      	bcc.n	8001ef2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	687e      	ldr	r6, [r7, #4]
 8001f8e:	466d      	mov	r5, sp
 8001f90:	f106 0410 	add.w	r4, r6, #16
 8001f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa4:	1d33      	adds	r3, r6, #4
 8001fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f002 fcef 	bl	800498c <USB_DevInit>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e014      	b.n	8001fea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d102      	bne.n	8001fde <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f80a 	bl	8001ff2 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fe91 	bl	8004d0a <USB_DevDisconnect>

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	f043 0303 	orr.w	r3, r3, #3
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0cc      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d90c      	bls.n	8002078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d044      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d119      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e067      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4934      	ldr	r1, [pc, #208]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7fe ffc2 	bl	80010b4 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7fe ffbe 	bl	80010b4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e04f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d20c      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 fb7f 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 80021c6:	4601      	mov	r1, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	fa21 f303 	lsr.w	r3, r1, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe ff22 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00
 80021f8:	40023800 	.word	0x40023800
 80021fc:	0800af04 	.word	0x0800af04
 8002200:	20000008 	.word	0x20000008
 8002204:	20000000 	.word	0x20000000

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4601      	mov	r1, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4a03      	ldr	r2, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	0800af14 	.word	0x0800af14

08002248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800224c:	f7ff ffdc 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002250:	4601      	mov	r1, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0b5b      	lsrs	r3, r3, #13
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <HAL_RCC_GetPCLK2Freq+0x24>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	0800af14 	.word	0x0800af14

08002270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80022a8:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	496c      	ldr	r1, [pc, #432]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80022c6:	2301      	movs	r3, #1
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80022d6:	4b64      	ldr	r3, [pc, #400]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022dc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	4960      	ldr	r1, [pc, #384]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d017      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002304:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4955      	ldr	r1, [pc, #340]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002322:	d101      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002324:	2301      	movs	r3, #1
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002330:	2301      	movs	r3, #1
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002340:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	4946      	ldr	r1, [pc, #280]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235e:	d101      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002360:	2301      	movs	r3, #1
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800236c:	2301      	movs	r3, #1
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 808a 	beq.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a38      	ldr	r2, [pc, #224]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a33      	ldr	r2, [pc, #204]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fe85 	bl	80010b4 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe fe81 	bl	80010b4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e278      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d02f      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d028      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d114      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fe4f 	bl	80010b4 <HAL_GetTick>
 8002416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fe4b 	bl	80010b4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e240      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ee      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002448:	d114      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	4902      	ldr	r1, [pc, #8]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
 8002464:	e00c      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000
 8002470:	42470e40 	.word	0x42470e40
 8002474:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a49      	ldr	r2, [pc, #292]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800247a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	4944      	ldr	r1, [pc, #272]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800248e:	4313      	orrs	r3, r2
 8002490:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80024a6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024dc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e4:	492e      	ldr	r1, [pc, #184]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d011      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	4926      	ldr	r1, [pc, #152]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002516:	d101      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002518:	2301      	movs	r3, #1
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	491a      	ldr	r1, [pc, #104]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d011      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800254c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002550:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	4911      	ldr	r1, [pc, #68]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002568:	d101      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800256a:	2301      	movs	r3, #1
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d005      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800257c:	f040 80ff 	bne.w	800277e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002586:	f7fe fd95 	bl	80010b4 <HAL_GetTick>
 800258a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800258c:	e00e      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800258e:	f7fe fd91 	bl	80010b4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d907      	bls.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e188      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80025a0:	40023800 	.word	0x40023800
 80025a4:	424711e0 	.word	0x424711e0
 80025a8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ac:	4b7e      	ldr	r3, [pc, #504]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ea      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d009      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d028      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d124      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025e0:	4b71      	ldr	r3, [pc, #452]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e6:	0c1b      	lsrs	r3, r3, #16
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	3301      	adds	r3, #1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025f2:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f8:	0e1b      	lsrs	r3, r3, #24
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	3b01      	subs	r3, #1
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	071b      	lsls	r3, r3, #28
 8002622:	4961      	ldr	r1, [pc, #388]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002648:	2b00      	cmp	r3, #0
 800264a:	d035      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002654:	d130      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002668:	4b4f      	ldr	r3, [pc, #316]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800266a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266e:	0f1b      	lsrs	r3, r3, #28
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	019b      	lsls	r3, r3, #6
 8002680:	431a      	orrs	r2, r3
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	071b      	lsls	r3, r3, #28
 8002698:	4943      	ldr	r1, [pc, #268]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026a0:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a6:	f023 021f 	bic.w	r2, r3, #31
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	493d      	ldr	r1, [pc, #244]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d029      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026cc:	d124      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	3301      	adds	r3, #1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e6:	0f1b      	lsrs	r3, r3, #28
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	019b      	lsls	r3, r3, #6
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	3b01      	subs	r3, #1
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	431a      	orrs	r2, r3
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	071b      	lsls	r3, r3, #28
 8002710:	4925      	ldr	r1, [pc, #148]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	3b01      	subs	r3, #1
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	071b      	lsls	r3, r3, #28
 800274a:	4917      	ldr	r1, [pc, #92]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002758:	f7fe fcac 	bl	80010b4 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002760:	f7fe fca8 	bl	80010b4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e09f      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	2b01      	cmp	r3, #1
 8002782:	f040 8095 	bne.w	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800278c:	f7fe fc92 	bl	80010b4 <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002792:	e00f      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002794:	f7fe fc8e 	bl	80010b4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d908      	bls.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e085      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470068 	.word	0x42470068
 80027b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c0:	d0e8      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02b      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d127      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80027ea:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	431a      	orrs	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	3b01      	subs	r3, #1
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	4928      	ldr	r1, [pc, #160]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002826:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	3b01      	subs	r3, #1
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01d      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284e:	d118      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	0e1b      	lsrs	r3, r3, #24
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	019b      	lsls	r3, r3, #6
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	3b01      	subs	r3, #1
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	4910      	ldr	r1, [pc, #64]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002888:	f7fe fc14 	bl	80010b4 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002890:	f7fe fc10 	bl	80010b4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e007      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ae:	d1ef      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3730      	adds	r7, #48	; 0x30
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470070 	.word	0x42470070

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028de:	4bc6      	ldr	r3, [pc, #792]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	f200 817e 	bhi.w	8002be8 <HAL_RCC_GetSysClockFreq+0x324>
 80028ec:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	08002929 	.word	0x08002929
 80028f8:	08002be9 	.word	0x08002be9
 80028fc:	08002be9 	.word	0x08002be9
 8002900:	08002be9 	.word	0x08002be9
 8002904:	0800292f 	.word	0x0800292f
 8002908:	08002be9 	.word	0x08002be9
 800290c:	08002be9 	.word	0x08002be9
 8002910:	08002be9 	.word	0x08002be9
 8002914:	08002935 	.word	0x08002935
 8002918:	08002be9 	.word	0x08002be9
 800291c:	08002be9 	.word	0x08002be9
 8002920:	08002be9 	.word	0x08002be9
 8002924:	08002a91 	.word	0x08002a91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4bb4      	ldr	r3, [pc, #720]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x338>)
 800292a:	613b      	str	r3, [r7, #16]
       break;
 800292c:	e15f      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292e:	4bb4      	ldr	r3, [pc, #720]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002930:	613b      	str	r3, [r7, #16]
      break;
 8002932:	e15c      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002934:	4bb0      	ldr	r3, [pc, #704]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293e:	4bae      	ldr	r3, [pc, #696]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04a      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	4bab      	ldr	r3, [pc, #684]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	f04f 0400 	mov.w	r4, #0
 8002954:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	ea03 0501 	and.w	r5, r3, r1
 8002960:	ea04 0602 	and.w	r6, r4, r2
 8002964:	4629      	mov	r1, r5
 8002966:	4632      	mov	r2, r6
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f04f 0400 	mov.w	r4, #0
 8002970:	0154      	lsls	r4, r2, #5
 8002972:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002976:	014b      	lsls	r3, r1, #5
 8002978:	4619      	mov	r1, r3
 800297a:	4622      	mov	r2, r4
 800297c:	1b49      	subs	r1, r1, r5
 800297e:	eb62 0206 	sbc.w	r2, r2, r6
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	0194      	lsls	r4, r2, #6
 800298c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002990:	018b      	lsls	r3, r1, #6
 8002992:	1a5b      	subs	r3, r3, r1
 8002994:	eb64 0402 	sbc.w	r4, r4, r2
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	00e2      	lsls	r2, r4, #3
 80029a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029a6:	00d9      	lsls	r1, r3, #3
 80029a8:	460b      	mov	r3, r1
 80029aa:	4614      	mov	r4, r2
 80029ac:	195b      	adds	r3, r3, r5
 80029ae:	eb44 0406 	adc.w	r4, r4, r6
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	0262      	lsls	r2, r4, #9
 80029bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029c0:	0259      	lsls	r1, r3, #9
 80029c2:	460b      	mov	r3, r1
 80029c4:	4614      	mov	r4, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	4621      	mov	r1, r4
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4623      	mov	r3, r4
 80029d4:	f7fe f988 	bl	8000ce8 <__aeabi_uldivmod>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e049      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e0:	4b85      	ldr	r3, [pc, #532]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	f04f 0400 	mov.w	r4, #0
 80029ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	ea03 0501 	and.w	r5, r3, r1
 80029f6:	ea04 0602 	and.w	r6, r4, r2
 80029fa:	4629      	mov	r1, r5
 80029fc:	4632      	mov	r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0154      	lsls	r4, r2, #5
 8002a08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a0c:	014b      	lsls	r3, r1, #5
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4622      	mov	r2, r4
 8002a12:	1b49      	subs	r1, r1, r5
 8002a14:	eb62 0206 	sbc.w	r2, r2, r6
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	0194      	lsls	r4, r2, #6
 8002a22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a26:	018b      	lsls	r3, r1, #6
 8002a28:	1a5b      	subs	r3, r3, r1
 8002a2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	00e2      	lsls	r2, r4, #3
 8002a38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a3c:	00d9      	lsls	r1, r3, #3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	195b      	adds	r3, r3, r5
 8002a44:	eb44 0406 	adc.w	r4, r4, r6
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	02a2      	lsls	r2, r4, #10
 8002a52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a56:	0299      	lsls	r1, r3, #10
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4621      	mov	r1, r4
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f04f 0400 	mov.w	r4, #0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4623      	mov	r3, r4
 8002a6a:	f7fe f93d 	bl	8000ce8 <__aeabi_uldivmod>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	460c      	mov	r4, r1
 8002a72:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a74:	4b60      	ldr	r3, [pc, #384]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	613b      	str	r3, [r7, #16]
      break;
 8002a8e:	e0ae      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a90:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a98:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9a:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d04a      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	4b54      	ldr	r3, [pc, #336]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	f04f 0400 	mov.w	r4, #0
 8002ab0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	ea03 0501 	and.w	r5, r3, r1
 8002abc:	ea04 0602 	and.w	r6, r4, r2
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	4632      	mov	r2, r6
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	f04f 0400 	mov.w	r4, #0
 8002acc:	0154      	lsls	r4, r2, #5
 8002ace:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ad2:	014b      	lsls	r3, r1, #5
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	1b49      	subs	r1, r1, r5
 8002ada:	eb62 0206 	sbc.w	r2, r2, r6
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	f04f 0400 	mov.w	r4, #0
 8002ae6:	0194      	lsls	r4, r2, #6
 8002ae8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aec:	018b      	lsls	r3, r1, #6
 8002aee:	1a5b      	subs	r3, r3, r1
 8002af0:	eb64 0402 	sbc.w	r4, r4, r2
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	00e2      	lsls	r2, r4, #3
 8002afe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b02:	00d9      	lsls	r1, r3, #3
 8002b04:	460b      	mov	r3, r1
 8002b06:	4614      	mov	r4, r2
 8002b08:	195b      	adds	r3, r3, r5
 8002b0a:	eb44 0406 	adc.w	r4, r4, r6
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	0262      	lsls	r2, r4, #9
 8002b18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b1c:	0259      	lsls	r1, r3, #9
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4614      	mov	r4, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	4621      	mov	r1, r4
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	f7fe f8da 	bl	8000ce8 <__aeabi_uldivmod>
 8002b34:	4603      	mov	r3, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e049      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	f04f 0400 	mov.w	r4, #0
 8002b46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	ea03 0501 	and.w	r5, r3, r1
 8002b52:	ea04 0602 	and.w	r6, r4, r2
 8002b56:	4629      	mov	r1, r5
 8002b58:	4632      	mov	r2, r6
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f04f 0400 	mov.w	r4, #0
 8002b62:	0154      	lsls	r4, r2, #5
 8002b64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b68:	014b      	lsls	r3, r1, #5
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4622      	mov	r2, r4
 8002b6e:	1b49      	subs	r1, r1, r5
 8002b70:	eb62 0206 	sbc.w	r2, r2, r6
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	f04f 0400 	mov.w	r4, #0
 8002b7c:	0194      	lsls	r4, r2, #6
 8002b7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b82:	018b      	lsls	r3, r1, #6
 8002b84:	1a5b      	subs	r3, r3, r1
 8002b86:	eb64 0402 	sbc.w	r4, r4, r2
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	00e2      	lsls	r2, r4, #3
 8002b94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b98:	00d9      	lsls	r1, r3, #3
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	195b      	adds	r3, r3, r5
 8002ba0:	eb44 0406 	adc.w	r4, r4, r6
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	02a2      	lsls	r2, r4, #10
 8002bae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bb2:	0299      	lsls	r1, r3, #10
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4614      	mov	r4, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	4621      	mov	r1, r4
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f04f 0400 	mov.w	r4, #0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	f7fe f88f 	bl	8000ce8 <__aeabi_uldivmod>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	460c      	mov	r4, r1
 8002bce:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0f1b      	lsrs	r3, r3, #28
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	613b      	str	r3, [r7, #16]
      break;
 8002be6:	e002      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x338>)
 8002bea:	613b      	str	r3, [r7, #16]
      break;
 8002bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bee:	693b      	ldr	r3, [r7, #16]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8083 	beq.w	8002d24 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c1e:	4b95      	ldr	r3, [pc, #596]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c2a:	4b92      	ldr	r3, [pc, #584]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c36:	4b8f      	ldr	r3, [pc, #572]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c44:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d112      	bne.n	8002c76 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c50:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d05b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x11e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d157      	bne.n	8002d22 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e216      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x8a>
 8002c80:	4b7c      	ldr	r3, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7b      	ldr	r2, [pc, #492]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e01d      	b.n	8002cca <HAL_RCC_OscConfig+0xc6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0xae>
 8002c98:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a72      	ldr	r2, [pc, #456]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0xc6>
 8002cb2:	4b70      	ldr	r3, [pc, #448]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6f      	ldr	r2, [pc, #444]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6c      	ldr	r2, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe f9ef 	bl	80010b4 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cda:	f7fe f9eb 	bl	80010b4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	; 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1db      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0xd6>
 8002cf8:	e014      	b.n	8002d24 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe f9db 	bl	80010b4 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d02:	f7fe f9d7 	bl	80010b4 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1c7      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d14:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0xfe>
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d06f      	beq.n	8002e10 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d017      	beq.n	8002d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d105      	bne.n	8002d54 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d54:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d11c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d60:	4b44      	ldr	r3, [pc, #272]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_OscConfig+0x180>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e18f      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4938      	ldr	r1, [pc, #224]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d98:	e03a      	b.n	8002e10 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d020      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da2:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f984 	bl	80010b4 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db0:	f7fe f980 	bl	80010b4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e170      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4925      	ldr	r1, [pc, #148]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]
 8002de2:	e015      	b.n	8002e10 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe f963 	bl	80010b4 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fe f95f 	bl	80010b4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e14f      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d037      	beq.n	8002e8c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d016      	beq.n	8002e52 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCC_OscConfig+0x278>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe f943 	bl	80010b4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e32:	f7fe f93f 	bl	80010b4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e12f      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x22e>
 8002e50:	e01c      	b.n	8002e8c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_OscConfig+0x278>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe f92c 	bl	80010b4 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5e:	e00f      	b.n	8002e80 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fe f928 	bl	80010b4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d908      	bls.n	8002e80 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e118      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	42470000 	.word	0x42470000
 8002e7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	4b8a      	ldr	r3, [pc, #552]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e9      	bne.n	8002e60 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8097 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9e:	4b83      	ldr	r3, [pc, #524]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b7f      	ldr	r3, [pc, #508]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b7c      	ldr	r3, [pc, #496]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b79      	ldr	r3, [pc, #484]	; (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	; (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f8e7 	bl	80010b4 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe f8e3 	bl	80010b4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0d3      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b6c      	ldr	r3, [pc, #432]	; (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x31a>
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x354>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x33c>
 8002f26:	4b61      	ldr	r3, [pc, #388]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a60      	ldr	r2, [pc, #384]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	4b5e      	ldr	r3, [pc, #376]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a5d      	ldr	r2, [pc, #372]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0x354>
 8002f40:	4b5a      	ldr	r3, [pc, #360]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a59      	ldr	r2, [pc, #356]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a56      	ldr	r2, [pc, #344]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f8a8 	bl	80010b4 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe f8a4 	bl	80010b4 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e092      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ee      	beq.n	8002f68 <HAL_RCC_OscConfig+0x364>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f892 	bl	80010b4 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe f88e 	bl	80010b4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e07c      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002faa:	4b40      	ldr	r3, [pc, #256]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ee      	bne.n	8002f94 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d068      	beq.n	80030a2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d060      	beq.n	800309e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d145      	bne.n	8003070 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe4:	4b33      	ldr	r3, [pc, #204]	; (80030b4 <HAL_RCC_OscConfig+0x4b0>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fe f863 	bl	80010b4 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe f85f 	bl	80010b4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e04f      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	019b      	lsls	r3, r3, #6
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	071b      	lsls	r3, r3, #28
 800303c:	491b      	ldr	r1, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_RCC_OscConfig+0x4b0>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe f834 	bl	80010b4 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003050:	f7fe f830 	bl	80010b4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e020      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x44c>
 800306e:	e018      	b.n	80030a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_RCC_OscConfig+0x4b0>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe f81d 	bl	80010b4 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe f819 	bl	80010b4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e009      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_OscConfig+0x4a8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x47a>
 800309c:	e001      	b.n	80030a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42470060 	.word	0x42470060

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e01d      	b.n	8003106 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f003 f86e 	bl	80061c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 fa14 	bl	8003524 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d007      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d122      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d11b      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0202 	mvn.w	r2, #2
 8003182:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9a5 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 800319e:	e005      	b.n	80031ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f997 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9a8 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d122      	bne.n	8003206 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d11b      	bne.n	8003206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0204 	mvn.w	r2, #4
 80031d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f97b 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 80031f2:	e005      	b.n	8003200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f96d 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f97e 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d122      	bne.n	800325a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11b      	bne.n	800325a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0208 	mvn.w	r2, #8
 800322a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2204      	movs	r2, #4
 8003230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f951 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8003246:	e005      	b.n	8003254 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f943 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f954 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d122      	bne.n	80032ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b10      	cmp	r3, #16
 8003274:	d11b      	bne.n	80032ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0210 	mvn.w	r2, #16
 800327e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2208      	movs	r2, #8
 8003284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f927 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 800329a:	e005      	b.n	80032a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f919 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f92a 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d10e      	bne.n	80032da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f06f 0201 	mvn.w	r2, #1
 80032d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f003 fa77 	bl	80067c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d10e      	bne.n	8003306 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b80      	cmp	r3, #128	; 0x80
 80032f4:	d107      	bne.n	8003306 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 facf 	bl	80038a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d10e      	bne.n	8003332 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d107      	bne.n	8003332 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800332a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8ef 	bl	8003510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b20      	cmp	r3, #32
 800333e:	d10e      	bne.n	800335e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b20      	cmp	r3, #32
 800334c:	d107      	bne.n	800335e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f06f 0220 	mvn.w	r2, #32
 8003356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 fa99 	bl	8003890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_TIM_ConfigClockSource+0x18>
 800337a:	2302      	movs	r3, #2
 800337c:	e0a6      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x166>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800339c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d067      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x120>
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d80b      	bhi.n	80033d2 <HAL_TIM_ConfigClockSource+0x6c>
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d073      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x140>
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d802      	bhi.n	80033c8 <HAL_TIM_ConfigClockSource+0x62>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d06f      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033c6:	e078      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d06c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x140>
 80033cc:	2b30      	cmp	r3, #48	; 0x30
 80033ce:	d06a      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033d0:	e073      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033d2:	2b70      	cmp	r3, #112	; 0x70
 80033d4:	d00d      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x8c>
 80033d6:	2b70      	cmp	r3, #112	; 0x70
 80033d8:	d804      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x7e>
 80033da:	2b50      	cmp	r3, #80	; 0x50
 80033dc:	d033      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0xe0>
 80033de:	2b60      	cmp	r3, #96	; 0x60
 80033e0:	d041      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80033e2:	e06a      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e8:	d066      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0x152>
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	d017      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033f0:	e063      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f000 f9a9 	bl	8003758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003414:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e04c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6899      	ldr	r1, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f000 f992 	bl	8003758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003442:	609a      	str	r2, [r3, #8]
      break;
 8003444:	e039      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	461a      	mov	r2, r3
 8003454:	f000 f906 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2150      	movs	r1, #80	; 0x50
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f95f 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003464:	e029      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f000 f925 	bl	80036c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2160      	movs	r1, #96	; 0x60
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f94f 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003484:	e019      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	461a      	mov	r2, r3
 8003494:	f000 f8e6 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f93f 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80034a4:	e009      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f000 f936 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80034b6:	e000      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a40      	ldr	r2, [pc, #256]	; (8003638 <TIM_Base_SetConfig+0x114>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003542:	d00f      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3d      	ldr	r2, [pc, #244]	; (800363c <TIM_Base_SetConfig+0x118>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3c      	ldr	r2, [pc, #240]	; (8003640 <TIM_Base_SetConfig+0x11c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3b      	ldr	r2, [pc, #236]	; (8003644 <TIM_Base_SetConfig+0x120>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <TIM_Base_SetConfig+0x124>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <TIM_Base_SetConfig+0x114>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02b      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d027      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2c      	ldr	r2, [pc, #176]	; (800363c <TIM_Base_SetConfig+0x118>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d023      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <TIM_Base_SetConfig+0x11c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <TIM_Base_SetConfig+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01b      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <TIM_Base_SetConfig+0x124>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a28      	ldr	r2, [pc, #160]	; (800364c <TIM_Base_SetConfig+0x128>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <TIM_Base_SetConfig+0x12c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <TIM_Base_SetConfig+0x130>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <TIM_Base_SetConfig+0x134>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <TIM_Base_SetConfig+0x138>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <TIM_Base_SetConfig+0x13c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <TIM_Base_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0xf8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a0c      	ldr	r2, [pc, #48]	; (8003648 <TIM_Base_SetConfig+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40000c00 	.word	0x40000c00
 8003648:	40010400 	.word	0x40010400
 800364c:	40014000 	.word	0x40014000
 8003650:	40014400 	.word	0x40014400
 8003654:	40014800 	.word	0x40014800
 8003658:	40001800 	.word	0x40001800
 800365c:	40001c00 	.word	0x40001c00
 8003660:	40002000 	.word	0x40002000

08003664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 030a 	bic.w	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f023 0210 	bic.w	r2, r3, #16
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	f043 0307 	orr.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	431a      	orrs	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e05a      	b.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a21      	ldr	r2, [pc, #132]	; (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d022      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d01d      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d018      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1b      	ldr	r2, [pc, #108]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a15      	ldr	r2, [pc, #84]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10c      	bne.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4313      	orrs	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40010400 	.word	0x40010400
 8003888:	40014000 	.word	0x40014000
 800388c:	40001800 	.word	0x40001800

08003890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e03f      	b.n	800394a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f002 fc96 	bl	8006210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fc2d 	bl	800415c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	d153      	bne.n	8003a16 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_UART_Transmit_DMA+0x26>
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e04c      	b.n	8003a18 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit_DMA+0x38>
 8003988:	2302      	movs	r3, #2
 800398a:	e045      	b.n	8003a18 <HAL_UART_Transmit_DMA+0xc4>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2221      	movs	r2, #33	; 0x21
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <HAL_UART_Transmit_DMA+0xcc>)
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_UART_Transmit_DMA+0xd0>)
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <HAL_UART_Transmit_DMA+0xd4>)
 80039ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	2200      	movs	r2, #0
 80039d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80039d4:	f107 0308 	add.w	r3, r7, #8
 80039d8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	6819      	ldr	r1, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3304      	adds	r3, #4
 80039e8:	461a      	mov	r2, r3
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	f7fd fd50 	bl	8001490 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a10:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	08003d69 	.word	0x08003d69
 8003a24:	08003dbb 	.word	0x08003dbb
 8003a28:	08003e5b 	.word	0x08003e5b

08003a2c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d166      	bne.n	8003b14 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_UART_Receive_DMA+0x26>
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e05f      	b.n	8003b16 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Receive_DMA+0x38>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e058      	b.n	8003b16 <HAL_UART_Receive_DMA+0xea>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	88fa      	ldrh	r2, [r7, #6]
 8003a76:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2222      	movs	r2, #34	; 0x22
 8003a82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <HAL_UART_Receive_DMA+0xf4>)
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_UART_Receive_DMA+0xf8>)
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <HAL_UART_Receive_DMA+0xfc>)
 8003a9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003aa6:	f107 0308 	add.w	r3, r7, #8
 8003aaa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	f7fd fce7 	bl	8001490 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e000      	b.n	8003b16 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
  }
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	08003dd7 	.word	0x08003dd7
 8003b24:	08003e3f 	.word	0x08003e3f
 8003b28:	08003e5b 	.word	0x08003e5b

08003b2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_UART_IRQHandler+0x52>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa6f 	bl	800405a <UART_Receive_IT>
      return;
 8003b7c:	e0d1      	b.n	8003d22 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80b0 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x1ba>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <HAL_UART_IRQHandler+0x70>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80a5 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_UART_IRQHandler+0x90>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_UART_IRQHandler+0xb0>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	f043 0202 	orr.w	r2, r3, #2
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_UART_IRQHandler+0xd0>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00f      	beq.n	8003c26 <HAL_UART_IRQHandler+0xfa>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_UART_IRQHandler+0xee>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	f043 0208 	orr.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d078      	beq.n	8003d20 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_UART_IRQHandler+0x11c>
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa09 	bl	800405a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <HAL_UART_IRQHandler+0x144>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d031      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f952 	bl	8003f1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d123      	bne.n	8003ccc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c92:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <HAL_UART_IRQHandler+0x1fc>)
 8003ca2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd fc49 	bl	8001540 <HAL_DMA_Abort_IT>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc2:	e00e      	b.n	8003ce2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f845 	bl	8003d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cca:	e00a      	b.n	8003ce2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f841 	bl	8003d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd2:	e006      	b.n	8003ce2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f83d 	bl	8003d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ce0:	e01e      	b.n	8003d20 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce2:	bf00      	nop
    return;
 8003ce4:	e01c      	b.n	8003d20 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_UART_IRQHandler+0x1d6>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f93f 	bl	8003f7e <UART_Transmit_IT>
    return;
 8003d00:	e00f      	b.n	8003d22 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_UART_IRQHandler+0x1f6>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f987 	bl	800402a <UART_EndTransmit_IT>
    return;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003d20:	bf00      	nop
  }
}
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	08003f57 	.word	0x08003f57

08003d2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d113      	bne.n	8003dac <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d98:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003daa:	e002      	b.n	8003db2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f002 fcc5 	bl	800673c <HAL_UART_TxCpltCallback>
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ffaf 	bl	8003d2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11e      	bne.n	8003e30 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e06:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e26:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f002 fca3 	bl	800677c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff ff77 	bl	8003d40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b80      	cmp	r3, #128	; 0x80
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b21      	cmp	r3, #33	; 0x21
 8003e8c:	d108      	bne.n	8003ea0 <UART_DMAError+0x46>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2200      	movs	r2, #0
 8003e98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e9a:	68b8      	ldr	r0, [r7, #8]
 8003e9c:	f000 f827 	bl	8003eee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b22      	cmp	r3, #34	; 0x22
 8003ec0:	d108      	bne.n	8003ed4 <UART_DMAError+0x7a>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ece:	68b8      	ldr	r0, [r7, #8]
 8003ed0:	f000 f823 	bl	8003f1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	f043 0210 	orr.w	r2, r3, #16
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ee0:	68b8      	ldr	r0, [r7, #8]
 8003ee2:	f7ff ff37 	bl	8003d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f04:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff feef 	bl	8003d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b21      	cmp	r3, #33	; 0x21
 8003f90:	d144      	bne.n	800401c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9a:	d11a      	bne.n	8003fd2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	621a      	str	r2, [r3, #32]
 8003fc4:	e00e      	b.n	8003fe4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	621a      	str	r2, [r3, #32]
 8003fd0:	e008      	b.n	8003fe4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6211      	str	r1, [r2, #32]
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004006:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004016:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f002 fb76 	bl	800673c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b22      	cmp	r3, #34	; 0x22
 800406c:	d171      	bne.n	8004152 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d123      	bne.n	80040c0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28
 80040a2:	e029      	b.n	80040f8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
 80040be:	e01b      	b.n	80040f8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6858      	ldr	r0, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6291      	str	r1, [r2, #40]	; 0x28
 80040d8:	b2c2      	uxtb	r2, r0
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	e00c      	b.n	80040f8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	1c58      	adds	r0, r3, #1
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	6288      	str	r0, [r1, #40]	; 0x28
 80040f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4619      	mov	r1, r3
 8004106:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004108:	2b00      	cmp	r3, #0
 800410a:	d120      	bne.n	800414e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0220 	bic.w	r2, r2, #32
 800411a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f002 fb19 	bl	800677c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e002      	b.n	8004154 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800419e:	f023 030c 	bic.w	r3, r3, #12
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ca:	f040 818b 	bne.w	80044e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4ac1      	ldr	r2, [pc, #772]	; (80044d8 <UART_SetConfig+0x37c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d005      	beq.n	80041e4 <UART_SetConfig+0x88>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4abf      	ldr	r2, [pc, #764]	; (80044dc <UART_SetConfig+0x380>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	f040 80bd 	bne.w	800435e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7fe f830 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 80041e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	461d      	mov	r5, r3
 80041ee:	f04f 0600 	mov.w	r6, #0
 80041f2:	46a8      	mov	r8, r5
 80041f4:	46b1      	mov	r9, r6
 80041f6:	eb18 0308 	adds.w	r3, r8, r8
 80041fa:	eb49 0409 	adc.w	r4, r9, r9
 80041fe:	4698      	mov	r8, r3
 8004200:	46a1      	mov	r9, r4
 8004202:	eb18 0805 	adds.w	r8, r8, r5
 8004206:	eb49 0906 	adc.w	r9, r9, r6
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004216:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800421a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800421e:	4688      	mov	r8, r1
 8004220:	4691      	mov	r9, r2
 8004222:	eb18 0005 	adds.w	r0, r8, r5
 8004226:	eb49 0106 	adc.w	r1, r9, r6
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	461d      	mov	r5, r3
 8004230:	f04f 0600 	mov.w	r6, #0
 8004234:	196b      	adds	r3, r5, r5
 8004236:	eb46 0406 	adc.w	r4, r6, r6
 800423a:	461a      	mov	r2, r3
 800423c:	4623      	mov	r3, r4
 800423e:	f7fc fd53 	bl	8000ce8 <__aeabi_uldivmod>
 8004242:	4603      	mov	r3, r0
 8004244:	460c      	mov	r4, r1
 8004246:	461a      	mov	r2, r3
 8004248:	4ba5      	ldr	r3, [pc, #660]	; (80044e0 <UART_SetConfig+0x384>)
 800424a:	fba3 2302 	umull	r2, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	461d      	mov	r5, r3
 8004258:	f04f 0600 	mov.w	r6, #0
 800425c:	46a9      	mov	r9, r5
 800425e:	46b2      	mov	sl, r6
 8004260:	eb19 0309 	adds.w	r3, r9, r9
 8004264:	eb4a 040a 	adc.w	r4, sl, sl
 8004268:	4699      	mov	r9, r3
 800426a:	46a2      	mov	sl, r4
 800426c:	eb19 0905 	adds.w	r9, r9, r5
 8004270:	eb4a 0a06 	adc.w	sl, sl, r6
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004280:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004284:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004288:	4689      	mov	r9, r1
 800428a:	4692      	mov	sl, r2
 800428c:	eb19 0005 	adds.w	r0, r9, r5
 8004290:	eb4a 0106 	adc.w	r1, sl, r6
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	461d      	mov	r5, r3
 800429a:	f04f 0600 	mov.w	r6, #0
 800429e:	196b      	adds	r3, r5, r5
 80042a0:	eb46 0406 	adc.w	r4, r6, r6
 80042a4:	461a      	mov	r2, r3
 80042a6:	4623      	mov	r3, r4
 80042a8:	f7fc fd1e 	bl	8000ce8 <__aeabi_uldivmod>
 80042ac:	4603      	mov	r3, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	461a      	mov	r2, r3
 80042b2:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <UART_SetConfig+0x384>)
 80042b4:	fba3 1302 	umull	r1, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2164      	movs	r1, #100	; 0x64
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a86      	ldr	r2, [pc, #536]	; (80044e0 <UART_SetConfig+0x384>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d4:	4498      	add	r8, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	461d      	mov	r5, r3
 80042da:	f04f 0600 	mov.w	r6, #0
 80042de:	46a9      	mov	r9, r5
 80042e0:	46b2      	mov	sl, r6
 80042e2:	eb19 0309 	adds.w	r3, r9, r9
 80042e6:	eb4a 040a 	adc.w	r4, sl, sl
 80042ea:	4699      	mov	r9, r3
 80042ec:	46a2      	mov	sl, r4
 80042ee:	eb19 0905 	adds.w	r9, r9, r5
 80042f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800430a:	4689      	mov	r9, r1
 800430c:	4692      	mov	sl, r2
 800430e:	eb19 0005 	adds.w	r0, r9, r5
 8004312:	eb4a 0106 	adc.w	r1, sl, r6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	461d      	mov	r5, r3
 800431c:	f04f 0600 	mov.w	r6, #0
 8004320:	196b      	adds	r3, r5, r5
 8004322:	eb46 0406 	adc.w	r4, r6, r6
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	f7fc fcdd 	bl	8000ce8 <__aeabi_uldivmod>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	461a      	mov	r2, r3
 8004334:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <UART_SetConfig+0x384>)
 8004336:	fba3 1302 	umull	r1, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2164      	movs	r1, #100	; 0x64
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a65      	ldr	r2, [pc, #404]	; (80044e0 <UART_SetConfig+0x384>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 0207 	and.w	r2, r3, #7
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4442      	add	r2, r8
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	e26f      	b.n	800483e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435e:	f7fd ff5f 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8004362:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	461d      	mov	r5, r3
 8004368:	f04f 0600 	mov.w	r6, #0
 800436c:	46a8      	mov	r8, r5
 800436e:	46b1      	mov	r9, r6
 8004370:	eb18 0308 	adds.w	r3, r8, r8
 8004374:	eb49 0409 	adc.w	r4, r9, r9
 8004378:	4698      	mov	r8, r3
 800437a:	46a1      	mov	r9, r4
 800437c:	eb18 0805 	adds.w	r8, r8, r5
 8004380:	eb49 0906 	adc.w	r9, r9, r6
 8004384:	f04f 0100 	mov.w	r1, #0
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004390:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004394:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004398:	4688      	mov	r8, r1
 800439a:	4691      	mov	r9, r2
 800439c:	eb18 0005 	adds.w	r0, r8, r5
 80043a0:	eb49 0106 	adc.w	r1, r9, r6
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	461d      	mov	r5, r3
 80043aa:	f04f 0600 	mov.w	r6, #0
 80043ae:	196b      	adds	r3, r5, r5
 80043b0:	eb46 0406 	adc.w	r4, r6, r6
 80043b4:	461a      	mov	r2, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	f7fc fc96 	bl	8000ce8 <__aeabi_uldivmod>
 80043bc:	4603      	mov	r3, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <UART_SetConfig+0x384>)
 80043c4:	fba3 2302 	umull	r2, r3, r3, r2
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	461d      	mov	r5, r3
 80043d2:	f04f 0600 	mov.w	r6, #0
 80043d6:	46a9      	mov	r9, r5
 80043d8:	46b2      	mov	sl, r6
 80043da:	eb19 0309 	adds.w	r3, r9, r9
 80043de:	eb4a 040a 	adc.w	r4, sl, sl
 80043e2:	4699      	mov	r9, r3
 80043e4:	46a2      	mov	sl, r4
 80043e6:	eb19 0905 	adds.w	r9, r9, r5
 80043ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004402:	4689      	mov	r9, r1
 8004404:	4692      	mov	sl, r2
 8004406:	eb19 0005 	adds.w	r0, r9, r5
 800440a:	eb4a 0106 	adc.w	r1, sl, r6
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	461d      	mov	r5, r3
 8004414:	f04f 0600 	mov.w	r6, #0
 8004418:	196b      	adds	r3, r5, r5
 800441a:	eb46 0406 	adc.w	r4, r6, r6
 800441e:	461a      	mov	r2, r3
 8004420:	4623      	mov	r3, r4
 8004422:	f7fc fc61 	bl	8000ce8 <__aeabi_uldivmod>
 8004426:	4603      	mov	r3, r0
 8004428:	460c      	mov	r4, r1
 800442a:	461a      	mov	r2, r3
 800442c:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <UART_SetConfig+0x384>)
 800442e:	fba3 1302 	umull	r1, r3, r3, r2
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2164      	movs	r1, #100	; 0x64
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	3332      	adds	r3, #50	; 0x32
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <UART_SetConfig+0x384>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800444e:	4498      	add	r8, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	461d      	mov	r5, r3
 8004454:	f04f 0600 	mov.w	r6, #0
 8004458:	46a9      	mov	r9, r5
 800445a:	46b2      	mov	sl, r6
 800445c:	eb19 0309 	adds.w	r3, r9, r9
 8004460:	eb4a 040a 	adc.w	r4, sl, sl
 8004464:	4699      	mov	r9, r3
 8004466:	46a2      	mov	sl, r4
 8004468:	eb19 0905 	adds.w	r9, r9, r5
 800446c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800447c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004480:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004484:	4689      	mov	r9, r1
 8004486:	4692      	mov	sl, r2
 8004488:	eb19 0005 	adds.w	r0, r9, r5
 800448c:	eb4a 0106 	adc.w	r1, sl, r6
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	461d      	mov	r5, r3
 8004496:	f04f 0600 	mov.w	r6, #0
 800449a:	196b      	adds	r3, r5, r5
 800449c:	eb46 0406 	adc.w	r4, r6, r6
 80044a0:	461a      	mov	r2, r3
 80044a2:	4623      	mov	r3, r4
 80044a4:	f7fc fc20 	bl	8000ce8 <__aeabi_uldivmod>
 80044a8:	4603      	mov	r3, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <UART_SetConfig+0x384>)
 80044b0:	fba3 1302 	umull	r1, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	2164      	movs	r1, #100	; 0x64
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	3332      	adds	r3, #50	; 0x32
 80044c2:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <UART_SetConfig+0x384>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	f003 0207 	and.w	r2, r3, #7
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4442      	add	r2, r8
 80044d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044d6:	e1b2      	b.n	800483e <UART_SetConfig+0x6e2>
 80044d8:	40011000 	.word	0x40011000
 80044dc:	40011400 	.word	0x40011400
 80044e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4ad7      	ldr	r2, [pc, #860]	; (8004848 <UART_SetConfig+0x6ec>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d005      	beq.n	80044fa <UART_SetConfig+0x39e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4ad6      	ldr	r2, [pc, #856]	; (800484c <UART_SetConfig+0x6f0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	f040 80d1 	bne.w	800469c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044fa:	f7fd fea5 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 80044fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	469a      	mov	sl, r3
 8004504:	f04f 0b00 	mov.w	fp, #0
 8004508:	46d0      	mov	r8, sl
 800450a:	46d9      	mov	r9, fp
 800450c:	eb18 0308 	adds.w	r3, r8, r8
 8004510:	eb49 0409 	adc.w	r4, r9, r9
 8004514:	4698      	mov	r8, r3
 8004516:	46a1      	mov	r9, r4
 8004518:	eb18 080a 	adds.w	r8, r8, sl
 800451c:	eb49 090b 	adc.w	r9, r9, fp
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800452c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004530:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004534:	4688      	mov	r8, r1
 8004536:	4691      	mov	r9, r2
 8004538:	eb1a 0508 	adds.w	r5, sl, r8
 800453c:	eb4b 0609 	adc.w	r6, fp, r9
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4619      	mov	r1, r3
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	f04f 0400 	mov.w	r4, #0
 8004552:	0094      	lsls	r4, r2, #2
 8004554:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004558:	008b      	lsls	r3, r1, #2
 800455a:	461a      	mov	r2, r3
 800455c:	4623      	mov	r3, r4
 800455e:	4628      	mov	r0, r5
 8004560:	4631      	mov	r1, r6
 8004562:	f7fc fbc1 	bl	8000ce8 <__aeabi_uldivmod>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	461a      	mov	r2, r3
 800456c:	4bb8      	ldr	r3, [pc, #736]	; (8004850 <UART_SetConfig+0x6f4>)
 800456e:	fba3 2302 	umull	r2, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	469b      	mov	fp, r3
 800457c:	f04f 0c00 	mov.w	ip, #0
 8004580:	46d9      	mov	r9, fp
 8004582:	46e2      	mov	sl, ip
 8004584:	eb19 0309 	adds.w	r3, r9, r9
 8004588:	eb4a 040a 	adc.w	r4, sl, sl
 800458c:	4699      	mov	r9, r3
 800458e:	46a2      	mov	sl, r4
 8004590:	eb19 090b 	adds.w	r9, r9, fp
 8004594:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ac:	4689      	mov	r9, r1
 80045ae:	4692      	mov	sl, r2
 80045b0:	eb1b 0509 	adds.w	r5, fp, r9
 80045b4:	eb4c 060a 	adc.w	r6, ip, sl
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4619      	mov	r1, r3
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	0094      	lsls	r4, r2, #2
 80045cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045d0:	008b      	lsls	r3, r1, #2
 80045d2:	461a      	mov	r2, r3
 80045d4:	4623      	mov	r3, r4
 80045d6:	4628      	mov	r0, r5
 80045d8:	4631      	mov	r1, r6
 80045da:	f7fc fb85 	bl	8000ce8 <__aeabi_uldivmod>
 80045de:	4603      	mov	r3, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b9a      	ldr	r3, [pc, #616]	; (8004850 <UART_SetConfig+0x6f4>)
 80045e6:	fba3 1302 	umull	r1, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2164      	movs	r1, #100	; 0x64
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	3332      	adds	r3, #50	; 0x32
 80045f8:	4a95      	ldr	r2, [pc, #596]	; (8004850 <UART_SetConfig+0x6f4>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004604:	4498      	add	r8, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	469b      	mov	fp, r3
 800460a:	f04f 0c00 	mov.w	ip, #0
 800460e:	46d9      	mov	r9, fp
 8004610:	46e2      	mov	sl, ip
 8004612:	eb19 0309 	adds.w	r3, r9, r9
 8004616:	eb4a 040a 	adc.w	r4, sl, sl
 800461a:	4699      	mov	r9, r3
 800461c:	46a2      	mov	sl, r4
 800461e:	eb19 090b 	adds.w	r9, r9, fp
 8004622:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004632:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004636:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800463a:	4689      	mov	r9, r1
 800463c:	4692      	mov	sl, r2
 800463e:	eb1b 0509 	adds.w	r5, fp, r9
 8004642:	eb4c 060a 	adc.w	r6, ip, sl
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	f04f 0400 	mov.w	r4, #0
 8004658:	0094      	lsls	r4, r2, #2
 800465a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800465e:	008b      	lsls	r3, r1, #2
 8004660:	461a      	mov	r2, r3
 8004662:	4623      	mov	r3, r4
 8004664:	4628      	mov	r0, r5
 8004666:	4631      	mov	r1, r6
 8004668:	f7fc fb3e 	bl	8000ce8 <__aeabi_uldivmod>
 800466c:	4603      	mov	r3, r0
 800466e:	460c      	mov	r4, r1
 8004670:	461a      	mov	r2, r3
 8004672:	4b77      	ldr	r3, [pc, #476]	; (8004850 <UART_SetConfig+0x6f4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a72      	ldr	r2, [pc, #456]	; (8004850 <UART_SetConfig+0x6f4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4442      	add	r2, r8
 8004698:	609a      	str	r2, [r3, #8]
 800469a:	e0d0      	b.n	800483e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800469c:	f7fd fdc0 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 80046a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	469a      	mov	sl, r3
 80046a6:	f04f 0b00 	mov.w	fp, #0
 80046aa:	46d0      	mov	r8, sl
 80046ac:	46d9      	mov	r9, fp
 80046ae:	eb18 0308 	adds.w	r3, r8, r8
 80046b2:	eb49 0409 	adc.w	r4, r9, r9
 80046b6:	4698      	mov	r8, r3
 80046b8:	46a1      	mov	r9, r4
 80046ba:	eb18 080a 	adds.w	r8, r8, sl
 80046be:	eb49 090b 	adc.w	r9, r9, fp
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046d6:	4688      	mov	r8, r1
 80046d8:	4691      	mov	r9, r2
 80046da:	eb1a 0508 	adds.w	r5, sl, r8
 80046de:	eb4b 0609 	adc.w	r6, fp, r9
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4619      	mov	r1, r3
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	f04f 0400 	mov.w	r4, #0
 80046f4:	0094      	lsls	r4, r2, #2
 80046f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046fa:	008b      	lsls	r3, r1, #2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	4628      	mov	r0, r5
 8004702:	4631      	mov	r1, r6
 8004704:	f7fc faf0 	bl	8000ce8 <__aeabi_uldivmod>
 8004708:	4603      	mov	r3, r0
 800470a:	460c      	mov	r4, r1
 800470c:	461a      	mov	r2, r3
 800470e:	4b50      	ldr	r3, [pc, #320]	; (8004850 <UART_SetConfig+0x6f4>)
 8004710:	fba3 2302 	umull	r2, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	469b      	mov	fp, r3
 800471e:	f04f 0c00 	mov.w	ip, #0
 8004722:	46d9      	mov	r9, fp
 8004724:	46e2      	mov	sl, ip
 8004726:	eb19 0309 	adds.w	r3, r9, r9
 800472a:	eb4a 040a 	adc.w	r4, sl, sl
 800472e:	4699      	mov	r9, r3
 8004730:	46a2      	mov	sl, r4
 8004732:	eb19 090b 	adds.w	r9, r9, fp
 8004736:	eb4a 0a0c 	adc.w	sl, sl, ip
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800474a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800474e:	4689      	mov	r9, r1
 8004750:	4692      	mov	sl, r2
 8004752:	eb1b 0509 	adds.w	r5, fp, r9
 8004756:	eb4c 060a 	adc.w	r6, ip, sl
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4619      	mov	r1, r3
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	0094      	lsls	r4, r2, #2
 800476e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	461a      	mov	r2, r3
 8004776:	4623      	mov	r3, r4
 8004778:	4628      	mov	r0, r5
 800477a:	4631      	mov	r1, r6
 800477c:	f7fc fab4 	bl	8000ce8 <__aeabi_uldivmod>
 8004780:	4603      	mov	r3, r0
 8004782:	460c      	mov	r4, r1
 8004784:	461a      	mov	r2, r3
 8004786:	4b32      	ldr	r3, [pc, #200]	; (8004850 <UART_SetConfig+0x6f4>)
 8004788:	fba3 1302 	umull	r1, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	2164      	movs	r1, #100	; 0x64
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	3332      	adds	r3, #50	; 0x32
 800479a:	4a2d      	ldr	r2, [pc, #180]	; (8004850 <UART_SetConfig+0x6f4>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a6:	4498      	add	r8, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	469b      	mov	fp, r3
 80047ac:	f04f 0c00 	mov.w	ip, #0
 80047b0:	46d9      	mov	r9, fp
 80047b2:	46e2      	mov	sl, ip
 80047b4:	eb19 0309 	adds.w	r3, r9, r9
 80047b8:	eb4a 040a 	adc.w	r4, sl, sl
 80047bc:	4699      	mov	r9, r3
 80047be:	46a2      	mov	sl, r4
 80047c0:	eb19 090b 	adds.w	r9, r9, fp
 80047c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047dc:	4689      	mov	r9, r1
 80047de:	4692      	mov	sl, r2
 80047e0:	eb1b 0509 	adds.w	r5, fp, r9
 80047e4:	eb4c 060a 	adc.w	r6, ip, sl
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	0094      	lsls	r4, r2, #2
 80047fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	461a      	mov	r2, r3
 8004804:	4623      	mov	r3, r4
 8004806:	4628      	mov	r0, r5
 8004808:	4631      	mov	r1, r6
 800480a:	f7fc fa6d 	bl	8000ce8 <__aeabi_uldivmod>
 800480e:	4603      	mov	r3, r0
 8004810:	460c      	mov	r4, r1
 8004812:	461a      	mov	r2, r3
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <UART_SetConfig+0x6f4>)
 8004816:	fba3 1302 	umull	r1, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2164      	movs	r1, #100	; 0x64
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a09      	ldr	r2, [pc, #36]	; (8004850 <UART_SetConfig+0x6f4>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4442      	add	r2, r8
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	e7ff      	b.n	800483e <UART_SetConfig+0x6e2>
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004848:	40011000 	.word	0x40011000
 800484c:	40011400 	.word	0x40011400
 8004850:	51eb851f 	.word	0x51eb851f

08004854 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004854:	b084      	sub	sp, #16
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	f107 001c 	add.w	r0, r7, #28
 8004862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	2b01      	cmp	r3, #1
 800486a:	d122      	bne.n	80048b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d105      	bne.n	80048a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa48 	bl	8004d3c <USB_CoreReset>
 80048ac:	4603      	mov	r3, r0
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	e01a      	b.n	80048e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa3c 	bl	8004d3c <USB_CoreReset>
 80048c4:	4603      	mov	r3, r0
 80048c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
 80048da:	e005      	b.n	80048e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10b      	bne.n	8004906 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f043 0206 	orr.w	r2, r3, #6
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004912:	b004      	add	sp, #16
 8004914:	4770      	bx	lr

08004916 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d106      	bne.n	8004964 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e00b      	b.n	800497c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	e001      	b.n	800497c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e003      	b.n	8004984 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800497c:	2032      	movs	r0, #50	; 0x32
 800497e:	f7fc fba5 	bl	80010cc <HAL_Delay>

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800498c:	b084      	sub	sp, #16
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800499a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e009      	b.n	80049c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3340      	adds	r3, #64	; 0x40
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b0e      	cmp	r3, #14
 80049c4:	d9f2      	bls.n	80049ac <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d11c      	bne.n	8004a06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e005      	b.n	8004a12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	4619      	mov	r1, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	680b      	ldr	r3, [r1, #0]
 8004a30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10c      	bne.n	8004a52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a3e:	2100      	movs	r1, #0
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f949 	bl	8004cd8 <USB_SetDevSpeed>
 8004a46:	e008      	b.n	8004a5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a48:	2101      	movs	r1, #1
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f944 	bl	8004cd8 <USB_SetDevSpeed>
 8004a50:	e003      	b.n	8004a5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a52:	2103      	movs	r1, #3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f93f 	bl	8004cd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a5a:	2110      	movs	r1, #16
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8f3 	bl	8004c48 <USB_FlushTxFifo>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f911 	bl	8004c94 <USB_FlushRxFifo>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	461a      	mov	r2, r3
 8004a84:	2300      	movs	r3, #0
 8004a86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2300      	movs	r3, #0
 8004a92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	e043      	b.n	8004b2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004abc:	d118      	bne.n	8004af0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e013      	b.n	8004b02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e008      	b.n	8004b02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	461a      	mov	r2, r3
 8004b22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3b7      	bcc.n	8004aa6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e043      	b.n	8004bc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b52:	d118      	bne.n	8004b86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e013      	b.n	8004b98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e008      	b.n	8004b98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3b7      	bcc.n	8004b3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <USB_DevInit+0x2b8>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f043 0208 	orr.w	r2, r3, #8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c40:	b004      	add	sp, #16
 8004c42:	4770      	bx	lr
 8004c44:	803c3800 	.word	0x803c3800

08004c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <USB_FlushTxFifo+0x48>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e006      	b.n	8004c82 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d0f0      	beq.n	8004c62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	00030d40 	.word	0x00030d40

08004c94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <USB_FlushRxFifo+0x40>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e006      	b.n	8004cc6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d0f0      	beq.n	8004ca6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	00030d40 	.word	0x00030d40

08004cd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004d2a:	2003      	movs	r0, #3
 8004d2c:	f7fc f9ce 	bl	80010cc <HAL_Delay>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <USB_CoreReset+0x64>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e01b      	b.n	8004d92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	daf2      	bge.n	8004d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f043 0201 	orr.w	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3301      	adds	r3, #1
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <USB_CoreReset+0x64>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e006      	b.n	8004d92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d0f0      	beq.n	8004d72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	00030d40 	.word	0x00030d40

08004da4 <blue_parser_init>:
/**
 * \brief           Initializes UART_DMA_HandleTypeDef structure and sets EN pin on module to SET state
 * \param[in]		hblue: Handle to __Blue_Frame_HandleTypeDef structure
 * \param[in]		huart_dma: Handle to __UART_DMA_HandleTypeDef structure which delivers raw data
 */
void blue_parser_init(Blue_Frame_HandleTypeDef *hblue, UART_DMA_HandleTypeDef *huart_dma) {
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	for(uint16_t i=0; i<LINE_BUFFER_SZ; i++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	81fb      	strh	r3, [r7, #14]
 8004db2:	e006      	b.n	8004dc2 <blue_parser_init+0x1e>
		hblue->line_buffer[i] = '\0';
 8004db4:	89fb      	ldrh	r3, [r7, #14]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	2100      	movs	r1, #0
 8004dba:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<LINE_BUFFER_SZ; i++)
 8004dbc:	89fb      	ldrh	r3, [r7, #14]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	81fb      	strh	r3, [r7, #14]
 8004dc2:	89fb      	ldrh	r3, [r7, #14]
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d3f4      	bcc.n	8004db4 <blue_parser_init+0x10>
	hblue->writer_position = 0;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	hblue->reader_position = 0;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	for(uint8_t i=0; i<FIELD_BUFFER_SZ; i++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	737b      	strb	r3, [r7, #13]
 8004dde:	e008      	b.n	8004df2 <blue_parser_init+0x4e>
		hblue->field_buffer[i] = '\0';
 8004de0:	7b7b      	ldrb	r3, [r7, #13]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	for(uint8_t i=0; i<FIELD_BUFFER_SZ; i++)
 8004dec:	7b7b      	ldrb	r3, [r7, #13]
 8004dee:	3301      	adds	r3, #1
 8004df0:	737b      	strb	r3, [r7, #13]
 8004df2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	daf2      	bge.n	8004de0 <blue_parser_init+0x3c>
	hblue->field_position = 0;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482

	hblue->huart_dma 	= huart_dma;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
	hblue->latitude 	= 0.0;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	e9c2 3400 	strd	r3, r4, [r2]
	hblue->longitude 	= 0.0;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	f04f 0400 	mov.w	r4, #0
 8004e2a:	e9c2 3400 	strd	r3, r4, [r2]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e34:	4803      	ldr	r0, [pc, #12]	; (8004e44 <blue_parser_init+0xa0>)
 8004e36:	f7fc ff9f 	bl	8001d78 <HAL_GPIO_WritePin>
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd90      	pop	{r4, r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000

08004e48 <blue_parser_recv_handler>:

/**
 * \brief           Downloads data received from UART and saves it in own buffer
 * \param[in]		hblue: Handle to __Blue_Frame_HandleTypeDef structure
 */
void blue_parser_recv_handler(Blue_Frame_HandleTypeDef *hblue) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	uint8_t recv_char;

	while (ringbuff_get_full(&hblue->huart_dma->usart_rx_buff)) {
 8004e50:	e046      	b.n	8004ee0 <blue_parser_recv_handler+0x98>
		ringbuff_read(&(hblue->huart_dma->usart_rx_buff), &recv_char, 1); /* Downaload data from ringbuff */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8004e58:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e5c:	f107 010f 	add.w	r1, r7, #15
 8004e60:	2201      	movs	r2, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f978 	bl	8005158 <ringbuff_read>

		if (hblue->writer_position == 0 && recv_char == '@') {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <blue_parser_recv_handler+0x42>
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d108      	bne.n	8004e8a <blue_parser_recv_handler+0x42>
			hblue->writer_position++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004e7e:	3301      	adds	r3, #1
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
 8004e88:	e02a      	b.n	8004ee0 <blue_parser_recv_handler+0x98>
		} else if (hblue->writer_position >= 1 && hblue->writer_position < LINE_BUFFER_SZ-1) {
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d021      	beq.n	8004ed8 <blue_parser_recv_handler+0x90>
			if (recv_char == '\r') { /* Check if end of the line */
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b0d      	cmp	r3, #13
 8004e98:	d10e      	bne.n	8004eb8 <blue_parser_recv_handler+0x70>
				hblue->line_buffer[hblue->writer_position - 1] = '\0';
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	54d1      	strb	r1, [r2, r3]
				hblue->writer_position = 0;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
				blue_parser_process_frame(hblue); /* Process complete frame*/
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f877 	bl	8004fa4 <blue_parser_process_frame>
 8004eb6:	e013      	b.n	8004ee0 <blue_parser_recv_handler+0x98>
			} else {
				hblue->line_buffer[hblue->writer_position - 1] = recv_char;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	7bf9      	ldrb	r1, [r7, #15]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	54d1      	strb	r1, [r2, r3]
				hblue->writer_position++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
 8004ed6:	e003      	b.n	8004ee0 <blue_parser_recv_handler+0x98>
			}
		} else {
			hblue->writer_position = 0;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	while (ringbuff_get_full(&hblue->huart_dma->usart_rx_buff)) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8004ee6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f9fc 	bl	80052e8 <ringbuff_get_full>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ad      	bne.n	8004e52 <blue_parser_recv_handler+0xa>
		}
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <blue_parser_read_field>:

/**
 * \brief           Reads following characters unless "," or EOF occur
 * \param[in]		hblue: Handle to __Blue_Frame_HandleTypeDef structure
 */
void blue_parser_read_field(Blue_Frame_HandleTypeDef *hblue) {
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
	hblue->field_position = 0;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
	while(hblue->line_buffer[hblue->reader_position] != ',' && hblue->line_buffer[hblue->reader_position] != '\0'
 8004f0e:	e01d      	b.n	8004f4c <blue_parser_read_field+0x4e>
			&& hblue->field_position < FIELD_BUFFER_SZ-1) {
		hblue->field_buffer[hblue->field_position] = hblue->line_buffer[hblue->reader_position];
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8004f16:	461a      	mov	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
 8004f1e:	4619      	mov	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	5c9a      	ldrb	r2, [r3, r2]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	440b      	add	r3, r1
 8004f28:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		hblue->reader_position++;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8004f32:	3301      	adds	r3, #1
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
		hblue->field_position++;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
 8004f42:	3301      	adds	r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
	while(hblue->line_buffer[hblue->reader_position] != ',' && hblue->line_buffer[hblue->reader_position] != '\0'
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	5c9b      	ldrb	r3, [r3, r2]
 8004f58:	2b2c      	cmp	r3, #44	; 0x2c
 8004f5a:	d00c      	beq.n	8004f76 <blue_parser_read_field+0x78>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	5c9b      	ldrb	r3, [r3, r2]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <blue_parser_read_field+0x78>
			&& hblue->field_position < FIELD_BUFFER_SZ-1) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
 8004f72:	2b7e      	cmp	r3, #126	; 0x7e
 8004f74:	d9cc      	bls.n	8004f10 <blue_parser_read_field+0x12>
	}
	hblue->field_buffer[hblue->field_position] = '\0';
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	hblue->reader_position++;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <blue_parser_process_frame>:

/**
 * \brief           Decodes latitude and longitude delimited by ","
 * \param[in]		hblue: Handle to __Blue_Frame_HandleTypeDef structure
 */
void blue_parser_process_frame(Blue_Frame_HandleTypeDef *hblue) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	hblue->reader_position = 0;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	blue_parser_read_field(hblue);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ffa2 	bl	8004efe <blue_parser_read_field>
	sscanf(hblue->field_buffer, "%lf", &(hblue->latitude));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f203 4002 	addw	r0, r3, #1026	; 0x402
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	490b      	ldr	r1, [pc, #44]	; (8004ff8 <blue_parser_process_frame+0x54>)
 8004fca:	f002 fc71 	bl	80078b0 <siscanf>

	blue_parser_read_field(hblue);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ff95 	bl	8004efe <blue_parser_read_field>
	sscanf(hblue->field_buffer, "%lf", &(hblue->longitude));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f203 4002 	addw	r0, r3, #1026	; 0x402
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4905      	ldr	r1, [pc, #20]	; (8004ff8 <blue_parser_process_frame+0x54>)
 8004fe4:	f002 fc64 	bl	80078b0 <siscanf>

	hblue->ParseCpltCallback(); /* Invoke callback to inform about new coordinates */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8004fee:	4798      	blx	r3
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	0800aec0 	.word	0x0800aec0

08004ffc <ringbuff_init>:
 * \param[in]       buffdata: Pointer to memory to use as buffer data
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t ringbuff_init(RINGBUFF_VOLATILE ringbuff_t* buff, void* buffdata, size_t size) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <ringbuff_init+0x1e>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <ringbuff_init+0x1e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <ringbuff_init+0x22>
        return 0;
 800501a:	2300      	movs	r3, #0
 800501c:	e011      	b.n	8005042 <ringbuff_init+0x46>
    }

    BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 800501e:	221c      	movs	r2, #28
 8005020:	2100      	movs	r1, #0
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f001 fdd7 	bl	8006bd6 <memset>

    buff->size = size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]
    buff->buff = buffdata;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	605a      	str	r2, [r3, #4]

#if RINGBUFF_USE_MAGIC
    buff->magic1 = 0xDEADBEEF;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <ringbuff_init+0x50>)
 8005038:	601a      	str	r2, [r3, #0]
    buff->magic2 = ~0xDEADBEEF;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <ringbuff_init+0x54>)
 800503e:	619a      	str	r2, [r3, #24]
#endif /* RINGBUFF_USE_MAGIC */

    return 1;
 8005040:	2301      	movs	r3, #1
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	deadbeef 	.word	0xdeadbeef
 8005050:	21524110 	.word	0x21524110

08005054 <ringbuff_write>:
 * \param[in]       btw: Number of bytes to write
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t ringbuff_write(RINGBUFF_VOLATILE ringbuff_t* buff, const void* data, size_t btw) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <ringbuff_write+0x46>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a38      	ldr	r2, [pc, #224]	; (8005150 <ringbuff_write+0xfc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d112      	bne.n	800509a <ringbuff_write+0x46>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	4a36      	ldr	r2, [pc, #216]	; (8005154 <ringbuff_write+0x100>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10d      	bne.n	800509a <ringbuff_write+0x46>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <ringbuff_write+0x46>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <ringbuff_write+0x46>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <ringbuff_write+0x46>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <ringbuff_write+0x4a>
        return 0;
 800509a:	2300      	movs	r3, #0
 800509c:	e053      	b.n	8005146 <ringbuff_write+0xf2>
    }

    /* Calculate maximum number of bytes available to write */
    free = ringbuff_get_free(buff);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f8dc 	bl	800525c <ringbuff_get_free>
 80050a4:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bf28      	it	cs
 80050ae:	4613      	movcs	r3, r2
 80050b0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <ringbuff_write+0x68>
        return 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e044      	b.n	8005146 <ringbuff_write+0xf2>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bf28      	it	cs
 80050cc:	4613      	movcs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fd6e 	bl	8006bc0 <memcpy>
    buff->w += tocopy;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	441a      	add	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <ringbuff_write+0xc2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6858      	ldr	r0, [r3, #4]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4619      	mov	r1, r3
 800510c:	f001 fd58 	bl	8006bc0 <memcpy>
        buff->w = btw;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <ringbuff_write+0xd4>
        buff->w = 0;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <ringbuff_write+0xec>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	6979      	ldr	r1, [r7, #20]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	440a      	add	r2, r1
 800513a:	2101      	movs	r1, #1
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	4798      	blx	r3
    return tocopy + btw;
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4413      	add	r3, r2
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	deadbeef 	.word	0xdeadbeef
 8005154:	21524110 	.word	0x21524110

08005158 <ringbuff_read>:
 * \param[in]       buff: Buffer handle
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t ringbuff_read(RINGBUFF_VOLATILE ringbuff_t* buff, void* data, size_t btr) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    uint8_t *d = data;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d017      	beq.n	800519e <ringbuff_read+0x46>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a38      	ldr	r2, [pc, #224]	; (8005254 <ringbuff_read+0xfc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d112      	bne.n	800519e <ringbuff_read+0x46>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4a36      	ldr	r2, [pc, #216]	; (8005258 <ringbuff_read+0x100>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d10d      	bne.n	800519e <ringbuff_read+0x46>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <ringbuff_read+0x46>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <ringbuff_read+0x46>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <ringbuff_read+0x46>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <ringbuff_read+0x4a>
        return 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	e053      	b.n	800524a <ringbuff_read+0xf2>
    }

    /* Calculate maximum number of bytes available to read */
    full = ringbuff_get_full(buff);
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f8a0 	bl	80052e8 <ringbuff_get_full>
 80051a8:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bf28      	it	cs
 80051b2:	4613      	movcs	r3, r2
 80051b4:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <ringbuff_read+0x68>
        return 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	e044      	b.n	800524a <ringbuff_read+0xf2>
    }

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	bf28      	it	cs
 80051d0:	4613      	movcs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4619      	mov	r1, r3
 80051e2:	69f8      	ldr	r0, [r7, #28]
 80051e4:	f001 fcec 	bl	8006bc0 <memcpy>
    buff->r += tocopy;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	441a      	add	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	60da      	str	r2, [r3, #12]
    btr -= tocopy;
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <ringbuff_read+0xc2>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	18d0      	adds	r0, r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4619      	mov	r1, r3
 8005210:	f001 fcd6 	bl	8006bc0 <memcpy>
        buff->r = btr;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->r >= buff->size) {
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <ringbuff_read+0xd4>
        buff->r = 0;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, tocopy + btr);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <ringbuff_read+0xec>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	440a      	add	r2, r1
 800523e:	2100      	movs	r1, #0
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	4798      	blx	r3
    return tocopy + btr;
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4413      	add	r3, r2
}
 800524a:	4618      	mov	r0, r3
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	deadbeef 	.word	0xdeadbeef
 8005258:	21524110 	.word	0x21524110

0800525c <ringbuff_get_free>:
/**
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t* buff) {
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d011      	beq.n	800528e <ringbuff_get_free+0x32>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <ringbuff_get_free+0x84>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d10c      	bne.n	800528e <ringbuff_get_free+0x32>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <ringbuff_get_free+0x88>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d107      	bne.n	800528e <ringbuff_get_free+0x32>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <ringbuff_get_free+0x32>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <ringbuff_get_free+0x36>
        return 0;
 800528e:	2300      	movs	r3, #0
 8005290:	e01f      	b.n	80052d2 <ringbuff_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d103      	bne.n	80052ae <ringbuff_get_free+0x52>
        size = buff->size;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e00f      	b.n	80052ce <ringbuff_get_free+0x72>
    } else if (r > w) {
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d904      	bls.n	80052c0 <ringbuff_get_free+0x64>
        size = r - w;
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e006      	b.n	80052ce <ringbuff_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1acb      	subs	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3b01      	subs	r3, #1
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	deadbeef 	.word	0xdeadbeef
 80052e4:	21524110 	.word	0x21524110

080052e8 <ringbuff_get_full>:
/**
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <ringbuff_get_full+0x32>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <ringbuff_get_full+0x80>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10c      	bne.n	800531a <ringbuff_get_full+0x32>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <ringbuff_get_full+0x84>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d107      	bne.n	800531a <ringbuff_get_full+0x32>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <ringbuff_get_full+0x32>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <ringbuff_get_full+0x36>
        return 0;
 800531a:	2300      	movs	r3, #0
 800531c:	e01d      	b.n	800535a <ringbuff_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	429a      	cmp	r2, r3
 8005330:	d102      	bne.n	8005338 <ringbuff_get_full+0x50>
        size = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e00f      	b.n	8005358 <ringbuff_get_full+0x70>
    } else if (w > r) {
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	429a      	cmp	r2, r3
 800533e:	d904      	bls.n	800534a <ringbuff_get_full+0x62>
        size = w - r;
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e006      	b.n	8005358 <ringbuff_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	6939      	ldr	r1, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1acb      	subs	r3, r1, r3
 8005354:	4413      	add	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
    }
    return size;
 8005358:	697b      	ldr	r3, [r7, #20]
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	deadbeef 	.word	0xdeadbeef
 800536c:	21524110 	.word	0x21524110

08005370 <ringbuff_get_linear_block_read_address>:
/**
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d011      	beq.n	80053a2 <ringbuff_get_linear_block_read_address+0x32>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <ringbuff_get_linear_block_read_address+0x4c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d10c      	bne.n	80053a2 <ringbuff_get_linear_block_read_address+0x32>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <ringbuff_get_linear_block_read_address+0x50>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d107      	bne.n	80053a2 <ringbuff_get_linear_block_read_address+0x32>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <ringbuff_get_linear_block_read_address+0x32>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <ringbuff_get_linear_block_read_address+0x36>
        return NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e004      	b.n	80053b0 <ringbuff_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	4413      	add	r3, r2
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	deadbeef 	.word	0xdeadbeef
 80053c0:	21524110 	.word	0x21524110

080053c4 <ringbuff_get_linear_block_read_length>:
/**
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t* buff) {
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d011      	beq.n	80053f6 <ringbuff_get_linear_block_read_length+0x32>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <ringbuff_get_linear_block_read_length+0x7c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d10c      	bne.n	80053f6 <ringbuff_get_linear_block_read_length+0x32>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <ringbuff_get_linear_block_read_length+0x80>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d107      	bne.n	80053f6 <ringbuff_get_linear_block_read_length+0x32>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <ringbuff_get_linear_block_read_length+0x32>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <ringbuff_get_linear_block_read_length+0x36>
        return 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e01b      	b.n	8005432 <ringbuff_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	429a      	cmp	r2, r3
 800540c:	d904      	bls.n	8005418 <ringbuff_get_linear_block_read_length+0x54>
        len = w - r;
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e00b      	b.n	8005430 <ringbuff_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	429a      	cmp	r2, r3
 800541e:	d905      	bls.n	800542c <ringbuff_get_linear_block_read_length+0x68>
        len = buff->size - r;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e001      	b.n	8005430 <ringbuff_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
    }
    return len;
 8005430:	697b      	ldr	r3, [r7, #20]
}
 8005432:	4618      	mov	r0, r3
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	deadbeef 	.word	0xdeadbeef
 8005444:	21524110 	.word	0x21524110

08005448 <ringbuff_skip>:
 * \note            Useful at the end of streaming transfer such as DMA
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t* buff, size_t len) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d014      	beq.n	8005482 <ringbuff_skip+0x3a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <ringbuff_skip+0x98>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10f      	bne.n	8005482 <ringbuff_skip+0x3a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <ringbuff_skip+0x9c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10a      	bne.n	8005482 <ringbuff_skip+0x3a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d006      	beq.n	8005482 <ringbuff_skip+0x3a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <ringbuff_skip+0x3a>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <ringbuff_skip+0x3e>
        return 0;
 8005482:	2300      	movs	r3, #0
 8005484:	e027      	b.n	80054d6 <ringbuff_skip+0x8e>
    }

    full = ringbuff_get_full(buff);             /* Get buffer used length */
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ff2e 	bl	80052e8 <ringbuff_get_full>
 800548c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4293      	cmp	r3, r2
 8005494:	bf28      	it	cs
 8005496:	4613      	movcs	r3, r2
 8005498:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d306      	bcc.n	80054c0 <ringbuff_skip+0x78>
        buff->r -= buff->size;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <ringbuff_skip+0x8c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	2100      	movs	r1, #0
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
    return len;
 80054d4:	683b      	ldr	r3, [r7, #0]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	deadbeef 	.word	0xdeadbeef
 80054e4:	21524110 	.word	0x21524110

080054e8 <gps_init>:
/* USER CODE BEGIN Includes */
#include "gps.h"
/* USER CODE END Includes */

/* USER CODE BEGIN 0 */
void gps_init(GPS_TypeDef *hgps, UART_DMA_HandleTypeDef *huart_dma) {
 80054e8:	b490      	push	{r4, r7}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0; i<100; i++) hgps->line_buffer[i] = '\0';
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e006      	b.n	8005506 <gps_init+0x1e>
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	2100      	movs	r1, #0
 80054fe:	54d1      	strb	r1, [r2, r3]
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	3301      	adds	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b63      	cmp	r3, #99	; 0x63
 800550a:	d9f5      	bls.n	80054f8 <gps_init+0x10>
	hgps->writer_position = 0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	hgps->reader_position = 0;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	for(uint8_t i=0; i<30; i++) hgps->field_buffer[i] = '\0';
 800551c:	2300      	movs	r3, #0
 800551e:	73bb      	strb	r3, [r7, #14]
 8005520:	e008      	b.n	8005534 <gps_init+0x4c>
 8005522:	7bbb      	ldrb	r3, [r7, #14]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	4413      	add	r3, r2
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800552e:	7bbb      	ldrb	r3, [r7, #14]
 8005530:	3301      	adds	r3, #1
 8005532:	73bb      	strb	r3, [r7, #14]
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	2b1d      	cmp	r3, #29
 8005538:	d9f3      	bls.n	8005522 <gps_init+0x3a>
	hgps->field_position = 0;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	hgps->date_day = 0;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	hgps->date_mounth = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	hgps->date_year = 0;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	hgps->time_hour = 0;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	hgps->time_min = 0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	hgps->time_sec = 0;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a

	hgps->latitude = 0.0;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	hgps->latitude_direction = '?';
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	223f      	movs	r2, #63	; 0x3f
 8005584:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	hgps->longitude = 0.0;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	f04f 0400 	mov.w	r4, #0
 8005592:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	hgps->longitude_direction = '?';
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	223f      	movs	r2, #63	; 0x3f
 800559a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	hgps->altitude = 0.0;
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	hgps->speed_knots = 0.0;
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	hgps->speed_kilometers = 0.0;
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	f04f 0400 	mov.w	r4, #0
 80055c4:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

	hgps->satelites_number = 0;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	hgps->quality = '?';
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	223f      	movs	r2, #63	; 0x3f
 80055d4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	hgps->dop = 0.0;
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	f04f 0400 	mov.w	r4, #0
 80055e2:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	hgps->hdop = 0.0;
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	f04f 0400 	mov.w	r4, #0
 80055f0:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	hgps->vdop = 0.0;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	f04f 0400 	mov.w	r4, #0
 80055fe:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0

	hgps->huart_dma = huart_dma;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bc90      	pop	{r4, r7}
 8005612:	4770      	bx	lr

08005614 <gps_rcv_handler>:

void gps_rcv_handler(GPS_TypeDef *hgps) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	uint8_t recv_char;

	while (ringbuff_get_full(&hgps->huart_dma->usart_rx_buff)) {
 800561c:	e04e      	b.n	80056bc <gps_rcv_handler+0xa8>
		ringbuff_read(&(hgps->huart_dma->usart_rx_buff), &recv_char, 1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005624:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005628:	f107 010f 	add.w	r1, r7, #15
 800562c:	2201      	movs	r2, #1
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fd92 	bl	8005158 <ringbuff_read>

		if (hgps->writer_position == 0 && recv_char == '$') {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <gps_rcv_handler+0x42>
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b24      	cmp	r3, #36	; 0x24
 8005642:	d108      	bne.n	8005656 <gps_rcv_handler+0x42>
			hgps->writer_position++;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800564a:	3301      	adds	r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8005654:	e032      	b.n	80056bc <gps_rcv_handler+0xa8>
		} else if (hgps->writer_position >= 1 && hgps->writer_position < 99) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800565c:	2b00      	cmp	r3, #0
 800565e:	d029      	beq.n	80056b4 <gps_rcv_handler+0xa0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005666:	2b62      	cmp	r3, #98	; 0x62
 8005668:	d824      	bhi.n	80056b4 <gps_rcv_handler+0xa0>
			if (recv_char == '\r' || recv_char == '\n') {
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	2b0d      	cmp	r3, #13
 800566e:	d002      	beq.n	8005676 <gps_rcv_handler+0x62>
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b0a      	cmp	r3, #10
 8005674:	d10e      	bne.n	8005694 <gps_rcv_handler+0x80>
				hgps->line_buffer[hgps->writer_position - 1] = '\0';
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800567c:	3b01      	subs	r3, #1
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	2100      	movs	r1, #0
 8005682:	54d1      	strb	r1, [r2, r3]
				hgps->writer_position = 0;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				gps_process_line(hgps);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f877 	bl	8005780 <gps_process_line>
 8005692:	e00e      	b.n	80056b2 <gps_rcv_handler+0x9e>
			} else {
				hgps->line_buffer[hgps->writer_position - 1] = recv_char;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800569a:	3b01      	subs	r3, #1
 800569c:	7bf9      	ldrb	r1, [r7, #15]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	54d1      	strb	r1, [r2, r3]
				hgps->writer_position++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80056a8:	3301      	adds	r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (recv_char == '\r' || recv_char == '\n') {
 80056b2:	e003      	b.n	80056bc <gps_rcv_handler+0xa8>
			}
		} else {
			hgps->writer_position = 0;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	while (ringbuff_get_full(&hgps->huart_dma->usart_rx_buff)) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fe0e 	bl	80052e8 <ringbuff_get_full>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1a5      	bne.n	800561e <gps_rcv_handler+0xa>
		}
	}
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <gps_read_field>:

void gps_read_field(GPS_TypeDef *hgps) {
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
	hgps->field_position = 0;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	while(hgps->line_buffer[hgps->reader_position] != ',' && hgps->line_buffer[hgps->reader_position] != '\0'
 80056ea:	e01d      	b.n	8005728 <gps_read_field+0x4e>
			&& hgps->field_position < 29) {
		hgps->field_buffer[hgps->field_position] = hgps->line_buffer[hgps->reader_position];
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056fa:	4619      	mov	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	5c9a      	ldrb	r2, [r3, r2]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	440b      	add	r3, r1
 8005704:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		hgps->reader_position++;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800570e:	3301      	adds	r3, #1
 8005710:	b2da      	uxtb	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		hgps->field_position++;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800571e:	3301      	adds	r3, #1
 8005720:	b2da      	uxtb	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	while(hgps->line_buffer[hgps->reader_position] != ',' && hgps->line_buffer[hgps->reader_position] != '\0'
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	5c9b      	ldrb	r3, [r3, r2]
 8005734:	2b2c      	cmp	r3, #44	; 0x2c
 8005736:	d00c      	beq.n	8005752 <gps_read_field+0x78>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800573e:	461a      	mov	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	5c9b      	ldrb	r3, [r3, r2]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <gps_read_field+0x78>
			&& hgps->field_position < 29) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800574e:	2b1c      	cmp	r3, #28
 8005750:	d9cc      	bls.n	80056ec <gps_read_field+0x12>
	}
	hgps->field_buffer[hgps->field_position] = '\0';
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	hgps->reader_position++;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800576a:	3301      	adds	r3, #1
 800576c:	b2da      	uxtb	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <gps_process_line>:

void gps_process_line(GPS_TypeDef *hgps) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	hgps->reader_position = 0;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	gps_read_field(hgps);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff ffa2 	bl	80056da <gps_read_field>
	     if(strcmp(hgps->field_buffer, "GPRMC") == 0) gps_process_gprmc(hgps);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3366      	adds	r3, #102	; 0x66
 800579a:	491a      	ldr	r1, [pc, #104]	; (8005804 <gps_process_line+0x84>)
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fd37 	bl	8000210 <strcmp>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <gps_process_line+0x30>
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f833 	bl	8005814 <gps_process_gprmc>
	else if(strcmp(hgps->field_buffer, "GPVTG") == 0) gps_process_gpvtg(hgps);
	else if(strcmp(hgps->field_buffer, "GPGGA") == 0) gps_process_gpgga(hgps);
	else if(strcmp(hgps->field_buffer, "GPGSA") == 0) gps_process_gpgsa(hgps);
}
 80057ae:	e025      	b.n	80057fc <gps_process_line+0x7c>
	else if(strcmp(hgps->field_buffer, "GPVTG") == 0) gps_process_gpvtg(hgps);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3366      	adds	r3, #102	; 0x66
 80057b4:	4914      	ldr	r1, [pc, #80]	; (8005808 <gps_process_line+0x88>)
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fa fd2a 	bl	8000210 <strcmp>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <gps_process_line+0x4a>
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f904 	bl	80059d0 <gps_process_gpvtg>
}
 80057c8:	e018      	b.n	80057fc <gps_process_line+0x7c>
	else if(strcmp(hgps->field_buffer, "GPGGA") == 0) gps_process_gpgga(hgps);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3366      	adds	r3, #102	; 0x66
 80057ce:	490f      	ldr	r1, [pc, #60]	; (800580c <gps_process_line+0x8c>)
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fa fd1d 	bl	8000210 <strcmp>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <gps_process_line+0x64>
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f933 	bl	8005a48 <gps_process_gpgga>
}
 80057e2:	e00b      	b.n	80057fc <gps_process_line+0x7c>
	else if(strcmp(hgps->field_buffer, "GPGSA") == 0) gps_process_gpgsa(hgps);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3366      	adds	r3, #102	; 0x66
 80057e8:	4909      	ldr	r1, [pc, #36]	; (8005810 <gps_process_line+0x90>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fa fd10 	bl	8000210 <strcmp>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <gps_process_line+0x7c>
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f978 	bl	8005aec <gps_process_gpgsa>
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	0800aec4 	.word	0x0800aec4
 8005808:	0800aecc 	.word	0x0800aecc
 800580c:	0800aed4 	.word	0x0800aed4
 8005810:	0800aedc 	.word	0x0800aedc

08005814 <gps_process_gprmc>:

void gps_process_gprmc(GPS_TypeDef *hgps)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	//$GPRMC,212846.00,A,5025.81511,N,01639.92090,E,0.196,,140417,,,A*73
	gps_read_field(hgps);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff5c 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3366      	adds	r3, #102	; 0x66
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d036      	beq.n	800589a <gps_process_gprmc+0x86>
		uint32_t tmp;
		sscanf(hgps->field_buffer, "%d", &tmp);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3366      	adds	r3, #102	; 0x66
 8005830:	f107 020c 	add.w	r2, r7, #12
 8005834:	4961      	ldr	r1, [pc, #388]	; (80059bc <gps_process_gprmc+0x1a8>)
 8005836:	4618      	mov	r0, r3
 8005838:	f002 f83a 	bl	80078b0 <siscanf>
		hgps->time_sec = tmp % 100;
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4b60      	ldr	r3, [pc, #384]	; (80059c0 <gps_process_gprmc+0x1ac>)
 8005840:	fba3 1302 	umull	r1, r3, r3, r2
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	2164      	movs	r1, #100	; 0x64
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	b2da      	uxtb	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		hgps->time_min = (tmp / 100) % 100;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a59      	ldr	r2, [pc, #356]	; (80059c0 <gps_process_gprmc+0x1ac>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	095a      	lsrs	r2, r3, #5
 8005860:	4b57      	ldr	r3, [pc, #348]	; (80059c0 <gps_process_gprmc+0x1ac>)
 8005862:	fba3 1302 	umull	r1, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2164      	movs	r1, #100	; 0x64
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	b2da      	uxtb	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		hgps->time_hour = (tmp / 10000) % 100;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a52      	ldr	r2, [pc, #328]	; (80059c4 <gps_process_gprmc+0x1b0>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	0b5a      	lsrs	r2, r3, #13
 8005882:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <gps_process_gprmc+0x1ac>)
 8005884:	fba3 1302 	umull	r1, r3, r3, r2
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	2164      	movs	r1, #100	; 0x64
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	b2da      	uxtb	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	}

	gps_read_field(hgps);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff ff1d 	bl	80056da <gps_read_field>

	gps_read_field(hgps);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff ff1a 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3366      	adds	r3, #102	; 0x66
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <gps_process_gprmc+0xae>
		sscanf(hgps->field_buffer, "%lf", &(hgps->latitude));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f103 0066 	add.w	r0, r3, #102	; 0x66
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3390      	adds	r3, #144	; 0x90
 80058ba:	461a      	mov	r2, r3
 80058bc:	4942      	ldr	r1, [pc, #264]	; (80059c8 <gps_process_gprmc+0x1b4>)
 80058be:	f001 fff7 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff09 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3366      	adds	r3, #102	; 0x66
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <gps_process_gprmc+0xd0>
		sscanf(hgps->field_buffer, "%c", &(hgps->latitude_direction));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f103 0066 	add.w	r0, r3, #102	; 0x66
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3398      	adds	r3, #152	; 0x98
 80058dc:	461a      	mov	r2, r3
 80058de:	493b      	ldr	r1, [pc, #236]	; (80059cc <gps_process_gprmc+0x1b8>)
 80058e0:	f001 ffe6 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fef8 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3366      	adds	r3, #102	; 0x66
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <gps_process_gprmc+0xf2>
		sscanf(hgps->field_buffer, "%lf", &(hgps->longitude));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f103 0066 	add.w	r0, r3, #102	; 0x66
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	33a0      	adds	r3, #160	; 0xa0
 80058fe:	461a      	mov	r2, r3
 8005900:	4931      	ldr	r1, [pc, #196]	; (80059c8 <gps_process_gprmc+0x1b4>)
 8005902:	f001 ffd5 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fee7 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3366      	adds	r3, #102	; 0x66
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <gps_process_gprmc+0x114>
		sscanf(hgps->field_buffer, "%c", &(hgps->longitude_direction));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f103 0066 	add.w	r0, r3, #102	; 0x66
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	33a8      	adds	r3, #168	; 0xa8
 8005920:	461a      	mov	r2, r3
 8005922:	492a      	ldr	r1, [pc, #168]	; (80059cc <gps_process_gprmc+0x1b8>)
 8005924:	f001 ffc4 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff fed6 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fed3 	bl	80056da <gps_read_field>

	gps_read_field(hgps);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fed0 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3366      	adds	r3, #102	; 0x66
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d036      	beq.n	80059b2 <gps_process_gprmc+0x19e>
		uint32_t tmp;
		sscanf(hgps->field_buffer, "%d", &tmp);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3366      	adds	r3, #102	; 0x66
 8005948:	f107 0208 	add.w	r2, r7, #8
 800594c:	491b      	ldr	r1, [pc, #108]	; (80059bc <gps_process_gprmc+0x1a8>)
 800594e:	4618      	mov	r0, r3
 8005950:	f001 ffae 	bl	80078b0 <siscanf>
		hgps->date_year = tmp % 100;
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <gps_process_gprmc+0x1ac>)
 8005958:	fba3 1302 	umull	r1, r3, r3, r2
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	2164      	movs	r1, #100	; 0x64
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	b2da      	uxtb	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		hgps->date_mounth = (tmp / 100) % 100;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <gps_process_gprmc+0x1ac>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	095a      	lsrs	r2, r3, #5
 8005978:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <gps_process_gprmc+0x1ac>)
 800597a:	fba3 1302 	umull	r1, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	2164      	movs	r1, #100	; 0x64
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	b2da      	uxtb	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		hgps->date_day = (tmp / 10000) % 100;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <gps_process_gprmc+0x1b0>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	0b5a      	lsrs	r2, r3, #13
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <gps_process_gprmc+0x1ac>)
 800599c:	fba3 1302 	umull	r1, r3, r3, r2
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	2164      	movs	r1, #100	; 0x64
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	0800aee4 	.word	0x0800aee4
 80059c0:	51eb851f 	.word	0x51eb851f
 80059c4:	d1b71759 	.word	0xd1b71759
 80059c8:	0800aee8 	.word	0x0800aee8
 80059cc:	0800aeec 	.word	0x0800aeec

080059d0 <gps_process_gpvtg>:

void gps_process_gpvtg(GPS_TypeDef *hgps)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	//$GPVTG,,T,,M,0.196,N,0.363,K,A*2B
	gps_read_field(hgps);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fe7e 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fe7b 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff fe78 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fe75 	bl	80056da <gps_read_field>

	gps_read_field(hgps);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff fe72 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3366      	adds	r3, #102	; 0x66
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <gps_process_gpvtg+0x42>
		sscanf(hgps->field_buffer, "%lf", &(hgps->speed_knots));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	33b8      	adds	r3, #184	; 0xb8
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	490d      	ldr	r1, [pc, #52]	; (8005a44 <gps_process_gpvtg+0x74>)
 8005a0e:	f001 ff4f 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fe61 	bl	80056da <gps_read_field>

	gps_read_field(hgps);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fe5e 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3366      	adds	r3, #102	; 0x66
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <gps_process_gpvtg+0x6a>
		sscanf(hgps->field_buffer, "%lf", &(hgps->speed_kilometers));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	33c0      	adds	r3, #192	; 0xc0
 8005a32:	461a      	mov	r2, r3
 8005a34:	4903      	ldr	r1, [pc, #12]	; (8005a44 <gps_process_gpvtg+0x74>)
 8005a36:	f001 ff3b 	bl	80078b0 <siscanf>
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	0800aee8 	.word	0x0800aee8

08005a48 <gps_process_gpgga>:

void gps_process_gpgga(GPS_TypeDef *hgps)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	//$GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F
	gps_read_field(hgps);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff fe42 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff fe3f 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff fe3c 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fe39 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fe36 	bl	80056da <gps_read_field>

	gps_read_field(hgps);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff fe33 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3366      	adds	r3, #102	; 0x66
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <gps_process_gpgga+0x48>
		sscanf(hgps->field_buffer, "%d", &(hgps->quality));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	33c9      	adds	r3, #201	; 0xc9
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4916      	ldr	r1, [pc, #88]	; (8005ae4 <gps_process_gpgga+0x9c>)
 8005a8c:	f001 ff10 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fe22 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3366      	adds	r3, #102	; 0x66
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <gps_process_gpgga+0x6a>
		sscanf(hgps->field_buffer, "%d", &(hgps->satelites_number));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	33c8      	adds	r3, #200	; 0xc8
 8005aaa:	461a      	mov	r2, r3
 8005aac:	490d      	ldr	r1, [pc, #52]	; (8005ae4 <gps_process_gpgga+0x9c>)
 8005aae:	f001 feff 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fe11 	bl	80056da <gps_read_field>

	gps_read_field(hgps);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fe0e 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3366      	adds	r3, #102	; 0x66
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <gps_process_gpgga+0x92>
		sscanf(hgps->field_buffer, "%lf", &(hgps->altitude));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	33b0      	adds	r3, #176	; 0xb0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4904      	ldr	r1, [pc, #16]	; (8005ae8 <gps_process_gpgga+0xa0>)
 8005ad6:	f001 feeb 	bl	80078b0 <siscanf>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	0800aee4 	.word	0x0800aee4
 8005ae8:	0800aee8 	.word	0x0800aee8

08005aec <gps_process_gpgsa>:

void gps_process_gpgsa(GPS_TypeDef *hgps)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	//$GPGSA,A,3,10,18,21,15,,,,,,,,,6.79,4.72,4.89*01
	gps_read_field(hgps);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fdf0 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fded 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff fdea 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fde7 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fde4 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fde1 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fdde 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fddb 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fdd8 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fdd5 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fdd2 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fdcf 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fdcc 	bl	80056da <gps_read_field>
	gps_read_field(hgps);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fdc9 	bl	80056da <gps_read_field>

	gps_read_field(hgps);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fdc6 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3366      	adds	r3, #102	; 0x66
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <gps_process_gpgsa+0x7e>
		sscanf(hgps->field_buffer, "%lf", &(hgps->dop));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	33d0      	adds	r3, #208	; 0xd0
 8005b62:	461a      	mov	r2, r3
 8005b64:	4914      	ldr	r1, [pc, #80]	; (8005bb8 <gps_process_gpgsa+0xcc>)
 8005b66:	f001 fea3 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fdb5 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3366      	adds	r3, #102	; 0x66
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <gps_process_gpgsa+0xa0>
		sscanf(hgps->field_buffer, "%lf", &(hgps->hdop));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	33d8      	adds	r3, #216	; 0xd8
 8005b84:	461a      	mov	r2, r3
 8005b86:	490c      	ldr	r1, [pc, #48]	; (8005bb8 <gps_process_gpgsa+0xcc>)
 8005b88:	f001 fe92 	bl	80078b0 <siscanf>

	gps_read_field(hgps);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff fda4 	bl	80056da <gps_read_field>
	if(strlen(hgps->field_buffer) > 0)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3366      	adds	r3, #102	; 0x66
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <gps_process_gpgsa+0xc2>
		sscanf(hgps->field_buffer, "%lf", &(hgps->vdop));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	33e0      	adds	r3, #224	; 0xe0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4903      	ldr	r1, [pc, #12]	; (8005bb8 <gps_process_gpgsa+0xcc>)
 8005baa:	f001 fe81 	bl	80078b0 <siscanf>
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	0800aee8 	.word	0x0800aee8

08005bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005bc0:	f7fb fa12 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005bc4:	f000 f83c 	bl	8005c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005bc8:	f000 f9f6 	bl	8005fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005bcc:	f000 f9bc 	bl	8005f48 <MX_DMA_Init>
  MX_TIM3_Init();
 8005bd0:	f000 f8c0 	bl	8005d54 <MX_TIM3_Init>
  MX_UART4_Init();
 8005bd4:	f000 f90c 	bl	8005df0 <MX_UART4_Init>
  MX_UART5_Init();
 8005bd8:	f000 f934 	bl	8005e44 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005bdc:	f000 f95c 	bl	8005e98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005be0:	f000 f984 	bl	8005eec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  uart_dma_init(&huart_dma_1, &huart4, &hdma_uart4_tx, &hdma_uart4_rx);
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <main+0x58>)
 8005be6:	4a0c      	ldr	r2, [pc, #48]	; (8005c18 <main+0x5c>)
 8005be8:	490c      	ldr	r1, [pc, #48]	; (8005c1c <main+0x60>)
 8005bea:	480d      	ldr	r0, [pc, #52]	; (8005c20 <main+0x64>)
 8005bec:	f000 fef7 	bl	80069de <uart_dma_init>
  uart_dma_init(&huart_dma_2, &huart5, &hdma_uart5_tx, &hdma_uart5_rx);
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <main+0x68>)
 8005bf2:	4a0d      	ldr	r2, [pc, #52]	; (8005c28 <main+0x6c>)
 8005bf4:	490d      	ldr	r1, [pc, #52]	; (8005c2c <main+0x70>)
 8005bf6:	480e      	ldr	r0, [pc, #56]	; (8005c30 <main+0x74>)
 8005bf8:	f000 fef1 	bl	80069de <uart_dma_init>

  gps_init(&hgps, &huart_dma_1);
 8005bfc:	4908      	ldr	r1, [pc, #32]	; (8005c20 <main+0x64>)
 8005bfe:	480d      	ldr	r0, [pc, #52]	; (8005c34 <main+0x78>)
 8005c00:	f7ff fc72 	bl	80054e8 <gps_init>
  blue_parser_init(&hblue, &huart_dma_2);
 8005c04:	490a      	ldr	r1, [pc, #40]	; (8005c30 <main+0x74>)
 8005c06:	480c      	ldr	r0, [pc, #48]	; (8005c38 <main+0x7c>)
 8005c08:	f7ff f8cc 	bl	8004da4 <blue_parser_init>

  HAL_TIM_Base_Start_IT(&htim3);
 8005c0c:	480b      	ldr	r0, [pc, #44]	; (8005c3c <main+0x80>)
 8005c0e:	f7fd fa7e 	bl	800310e <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005c12:	e7fe      	b.n	8005c12 <main+0x56>
 8005c14:	20000210 	.word	0x20000210
 8005c18:	20005e00 	.word	0x20005e00
 8005c1c:	200058c0 	.word	0x200058c0
 8005c20:	20002f04 	.word	0x20002f04
 8005c24:	20005da0 	.word	0x20005da0
 8005c28:	20005e60 	.word	0x20005e60
 8005c2c:	20005790 	.word	0x20005790
 8005c30:	20000270 	.word	0x20000270
 8005c34:	200057d0 	.word	0x200057d0
 8005c38:	20005900 	.word	0x20005900
 8005c3c:	20005750 	.word	0x20005750

08005c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b0ac      	sub	sp, #176	; 0xb0
 8005c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c4a:	2234      	movs	r2, #52	; 0x34
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ffc1 	bl	8006bd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	225c      	movs	r2, #92	; 0x5c
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 ffb2 	bl	8006bd6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	4b35      	ldr	r3, [pc, #212]	; (8005d4c <SystemClock_Config+0x10c>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	4a34      	ldr	r2, [pc, #208]	; (8005d4c <SystemClock_Config+0x10c>)
 8005c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c80:	6413      	str	r3, [r2, #64]	; 0x40
 8005c82:	4b32      	ldr	r3, [pc, #200]	; (8005d4c <SystemClock_Config+0x10c>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	4b2f      	ldr	r3, [pc, #188]	; (8005d50 <SystemClock_Config+0x110>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2e      	ldr	r2, [pc, #184]	; (8005d50 <SystemClock_Config+0x110>)
 8005c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <SystemClock_Config+0x110>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005caa:	2301      	movs	r3, #1
 8005cac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005cae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005cbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005cca:	23a8      	movs	r3, #168	; 0xa8
 8005ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005cd6:	2307      	movs	r3, #7
 8005cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005cdc:	2302      	movs	r3, #2
 8005cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ce2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fc ff8c 	bl	8002c04 <HAL_RCC_OscConfig>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8005cf2:	f000 fa35 	bl	8006160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cf6:	230f      	movs	r3, #15
 8005cf8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d06:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d0c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d12:	2105      	movs	r1, #5
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fc f991 	bl	800203c <HAL_RCC_ClockConfig>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8005d20:	f000 fa1e 	bl	8006160 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8005d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d28:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d2e:	f107 030c 	add.w	r3, r7, #12
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc fa9c 	bl	8002270 <HAL_RCCEx_PeriphCLKConfig>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8005d3e:	f000 fa0f 	bl	8006160 <Error_Handler>
  }
}
 8005d42:	bf00      	nop
 8005d44:	37b0      	adds	r7, #176	; 0xb0
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	40007000 	.word	0x40007000

08005d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	609a      	str	r2, [r3, #8]
 8005d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d68:	463b      	mov	r3, r7
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005d70:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005d72:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <MX_TIM3_Init+0x98>)
 8005d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16384;
 8005d76:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20507;
 8005d84:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005d86:	f245 021b 	movw	r2, #20507	; 0x501b
 8005d8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d8c:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005d98:	4813      	ldr	r0, [pc, #76]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005d9a:	f7fd f98d 	bl	80030b8 <HAL_TIM_Base_Init>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005da4:	f000 f9dc 	bl	8006160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005dae:	f107 0308 	add.w	r3, r7, #8
 8005db2:	4619      	mov	r1, r3
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005db6:	f7fd fad6 	bl	8003366 <HAL_TIM_ConfigClockSource>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005dc0:	f000 f9ce 	bl	8006160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005dcc:	463b      	mov	r3, r7
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4805      	ldr	r0, [pc, #20]	; (8005de8 <MX_TIM3_Init+0x94>)
 8005dd2:	f7fd fce1 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005ddc:	f000 f9c0 	bl	8006160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005de0:	bf00      	nop
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20005750 	.word	0x20005750
 8005dec:	40000400 	.word	0x40000400

08005df0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005df4:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005df6:	4a12      	ldr	r2, [pc, #72]	; (8005e40 <MX_UART4_Init+0x50>)
 8005df8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005dfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005e00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005e02:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005e08:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005e14:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005e16:	220c      	movs	r2, #12
 8005e18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e1a:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005e26:	4805      	ldr	r0, [pc, #20]	; (8005e3c <MX_UART4_Init+0x4c>)
 8005e28:	f7fd fd46 	bl	80038b8 <HAL_UART_Init>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8005e32:	f000 f995 	bl	8006160 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  /* USER CODE END UART4_Init 2 */

}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200058c0 	.word	0x200058c0
 8005e40:	40004c00 	.word	0x40004c00

08005e44 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e4a:	4a12      	ldr	r2, [pc, #72]	; (8005e94 <MX_UART5_Init+0x50>)
 8005e4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8005e4e:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005e54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e6a:	220c      	movs	r2, #12
 8005e6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005e7a:	4805      	ldr	r0, [pc, #20]	; (8005e90 <MX_UART5_Init+0x4c>)
 8005e7c:	f7fd fd1c 	bl	80038b8 <HAL_UART_Init>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005e86:	f000 f96b 	bl	8006160 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20005790 	.word	0x20005790
 8005e94:	40005000 	.word	0x40005000

08005e98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e9c:	4b11      	ldr	r3, [pc, #68]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005e9e:	4a12      	ldr	r2, [pc, #72]	; (8005ee8 <MX_USART3_UART_Init+0x50>)
 8005ea0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ea8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005ebe:	220c      	movs	r2, #12
 8005ec0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ece:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <MX_USART3_UART_Init+0x4c>)
 8005ed0:	f7fd fcf2 	bl	80038b8 <HAL_UART_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005eda:	f000 f941 	bl	8006160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20002abc 	.word	0x20002abc
 8005ee8:	40004800 	.word	0x40004800

08005eec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ef2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005ef6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005ef8:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005efa:	2206      	movs	r2, #6
 8005efc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005efe:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f00:	2202      	movs	r2, #2
 8005f02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005f2e:	4805      	ldr	r0, [pc, #20]	; (8005f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f30:	f7fb ff3b 	bl	8001daa <HAL_PCD_Init>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005f3a:	f000 f911 	bl	8006160 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20002afc 	.word	0x20002afc

08005f48 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <MX_DMA_Init+0x6c>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <MX_DMA_Init+0x6c>)
 8005f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <MX_DMA_Init+0x6c>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	200b      	movs	r0, #11
 8005f70:	f7fb f9a9 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005f74:	200b      	movs	r0, #11
 8005f76:	f7fb f9c2 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	200d      	movs	r0, #13
 8005f80:	f7fb f9a1 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005f84:	200d      	movs	r0, #13
 8005f86:	f7fb f9ba 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	200f      	movs	r0, #15
 8005f90:	f7fb f999 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005f94:	200f      	movs	r0, #15
 8005f96:	f7fb f9b2 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	202f      	movs	r0, #47	; 0x2f
 8005fa0:	f7fb f991 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005fa4:	202f      	movs	r0, #47	; 0x2f
 8005fa6:	f7fb f9aa 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800

08005fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08c      	sub	sp, #48	; 0x30
 8005fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fbe:	f107 031c 	add.w	r3, r7, #28
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	605a      	str	r2, [r3, #4]
 8005fc8:	609a      	str	r2, [r3, #8]
 8005fca:	60da      	str	r2, [r3, #12]
 8005fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <MX_GPIO_Init+0x190>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	4a5c      	ldr	r2, [pc, #368]	; (8006148 <MX_GPIO_Init+0x190>)
 8005fd8:	f043 0304 	orr.w	r3, r3, #4
 8005fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fde:	4b5a      	ldr	r3, [pc, #360]	; (8006148 <MX_GPIO_Init+0x190>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	4b56      	ldr	r3, [pc, #344]	; (8006148 <MX_GPIO_Init+0x190>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	4a55      	ldr	r2, [pc, #340]	; (8006148 <MX_GPIO_Init+0x190>)
 8005ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8005ffa:	4b53      	ldr	r3, [pc, #332]	; (8006148 <MX_GPIO_Init+0x190>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	4b4f      	ldr	r3, [pc, #316]	; (8006148 <MX_GPIO_Init+0x190>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	4a4e      	ldr	r2, [pc, #312]	; (8006148 <MX_GPIO_Init+0x190>)
 8006010:	f043 0301 	orr.w	r3, r3, #1
 8006014:	6313      	str	r3, [r2, #48]	; 0x30
 8006016:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <MX_GPIO_Init+0x190>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	613b      	str	r3, [r7, #16]
 8006020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	4b48      	ldr	r3, [pc, #288]	; (8006148 <MX_GPIO_Init+0x190>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	4a47      	ldr	r2, [pc, #284]	; (8006148 <MX_GPIO_Init+0x190>)
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	6313      	str	r3, [r2, #48]	; 0x30
 8006032:	4b45      	ldr	r3, [pc, #276]	; (8006148 <MX_GPIO_Init+0x190>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	4b41      	ldr	r3, [pc, #260]	; (8006148 <MX_GPIO_Init+0x190>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	4a40      	ldr	r2, [pc, #256]	; (8006148 <MX_GPIO_Init+0x190>)
 8006048:	f043 0310 	orr.w	r3, r3, #16
 800604c:	6313      	str	r3, [r2, #48]	; 0x30
 800604e:	4b3e      	ldr	r3, [pc, #248]	; (8006148 <MX_GPIO_Init+0x190>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800605a:	2300      	movs	r3, #0
 800605c:	607b      	str	r3, [r7, #4]
 800605e:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <MX_GPIO_Init+0x190>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	4a39      	ldr	r2, [pc, #228]	; (8006148 <MX_GPIO_Init+0x190>)
 8006064:	f043 0308 	orr.w	r3, r3, #8
 8006068:	6313      	str	r3, [r2, #48]	; 0x30
 800606a:	4b37      	ldr	r3, [pc, #220]	; (8006148 <MX_GPIO_Init+0x190>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	607b      	str	r3, [r7, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	4b33      	ldr	r3, [pc, #204]	; (8006148 <MX_GPIO_Init+0x190>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	4a32      	ldr	r2, [pc, #200]	; (8006148 <MX_GPIO_Init+0x190>)
 8006080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006084:	6313      	str	r3, [r2, #48]	; 0x30
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <MX_GPIO_Init+0x190>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006092:	2200      	movs	r2, #0
 8006094:	f244 0181 	movw	r1, #16513	; 0x4081
 8006098:	482c      	ldr	r0, [pc, #176]	; (800614c <MX_GPIO_Init+0x194>)
 800609a:	f7fb fe6d 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800609e:	2200      	movs	r2, #0
 80060a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060a4:	482a      	ldr	r0, [pc, #168]	; (8006150 <MX_GPIO_Init+0x198>)
 80060a6:	f7fb fe67 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80060aa:	2200      	movs	r2, #0
 80060ac:	2140      	movs	r1, #64	; 0x40
 80060ae:	4829      	ldr	r0, [pc, #164]	; (8006154 <MX_GPIO_Init+0x19c>)
 80060b0:	f7fb fe62 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80060b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80060ba:	4b27      	ldr	r3, [pc, #156]	; (8006158 <MX_GPIO_Init+0x1a0>)
 80060bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80060c2:	f107 031c 	add.w	r3, r7, #28
 80060c6:	4619      	mov	r1, r3
 80060c8:	4824      	ldr	r0, [pc, #144]	; (800615c <MX_GPIO_Init+0x1a4>)
 80060ca:	f7fb fcc3 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80060ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80060d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060d4:	2301      	movs	r3, #1
 80060d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060dc:	2300      	movs	r3, #0
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e0:	f107 031c 	add.w	r3, r7, #28
 80060e4:	4619      	mov	r1, r3
 80060e6:	4819      	ldr	r0, [pc, #100]	; (800614c <MX_GPIO_Init+0x194>)
 80060e8:	f7fb fcb4 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f2:	2301      	movs	r3, #1
 80060f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060fa:	2300      	movs	r3, #0
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060fe:	f107 031c 	add.w	r3, r7, #28
 8006102:	4619      	mov	r1, r3
 8006104:	4812      	ldr	r0, [pc, #72]	; (8006150 <MX_GPIO_Init+0x198>)
 8006106:	f7fb fca5 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800610a:	2340      	movs	r3, #64	; 0x40
 800610c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800610e:	2301      	movs	r3, #1
 8006110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006112:	2300      	movs	r3, #0
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006116:	2300      	movs	r3, #0
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800611a:	f107 031c 	add.w	r3, r7, #28
 800611e:	4619      	mov	r1, r3
 8006120:	480c      	ldr	r0, [pc, #48]	; (8006154 <MX_GPIO_Init+0x19c>)
 8006122:	f7fb fc97 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800612a:	2300      	movs	r3, #0
 800612c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006132:	f107 031c 	add.w	r3, r7, #28
 8006136:	4619      	mov	r1, r3
 8006138:	4806      	ldr	r0, [pc, #24]	; (8006154 <MX_GPIO_Init+0x19c>)
 800613a:	f7fb fc8b 	bl	8001a54 <HAL_GPIO_Init>

}
 800613e:	bf00      	nop
 8006140:	3730      	adds	r7, #48	; 0x30
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40023800 	.word	0x40023800
 800614c:	40020400 	.word	0x40020400
 8006150:	40021000 	.word	0x40021000
 8006154:	40021800 	.word	0x40021800
 8006158:	10110000 	.word	0x10110000
 800615c:	40020800 	.word	0x40020800

08006160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <HAL_MspInit+0x4c>)
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	4a0f      	ldr	r2, [pc, #60]	; (80061bc <HAL_MspInit+0x4c>)
 8006180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006184:	6453      	str	r3, [r2, #68]	; 0x44
 8006186:	4b0d      	ldr	r3, [pc, #52]	; (80061bc <HAL_MspInit+0x4c>)
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618e:	607b      	str	r3, [r7, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4b09      	ldr	r3, [pc, #36]	; (80061bc <HAL_MspInit+0x4c>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	4a08      	ldr	r2, [pc, #32]	; (80061bc <HAL_MspInit+0x4c>)
 800619c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6413      	str	r3, [r2, #64]	; 0x40
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <HAL_MspInit+0x4c>)
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40023800 	.word	0x40023800

080061c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a0e      	ldr	r2, [pc, #56]	; (8006208 <HAL_TIM_Base_MspInit+0x48>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d115      	bne.n	80061fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	4b0d      	ldr	r3, [pc, #52]	; (800620c <HAL_TIM_Base_MspInit+0x4c>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <HAL_TIM_Base_MspInit+0x4c>)
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	6413      	str	r3, [r2, #64]	; 0x40
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <HAL_TIM_Base_MspInit+0x4c>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2100      	movs	r1, #0
 80061f2:	201d      	movs	r0, #29
 80061f4:	f7fb f867 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80061f8:	201d      	movs	r0, #29
 80061fa:	f7fb f880 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40000400 	.word	0x40000400
 800620c:	40023800 	.word	0x40023800

08006210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	605a      	str	r2, [r3, #4]
 8006222:	609a      	str	r2, [r3, #8]
 8006224:	60da      	str	r2, [r3, #12]
 8006226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a99      	ldr	r2, [pc, #612]	; (8006494 <HAL_UART_MspInit+0x284>)
 800622e:	4293      	cmp	r3, r2
 8006230:	f040 8094 	bne.w	800635c <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006234:	2300      	movs	r3, #0
 8006236:	623b      	str	r3, [r7, #32]
 8006238:	4b97      	ldr	r3, [pc, #604]	; (8006498 <HAL_UART_MspInit+0x288>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	4a96      	ldr	r2, [pc, #600]	; (8006498 <HAL_UART_MspInit+0x288>)
 800623e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006242:	6413      	str	r3, [r2, #64]	; 0x40
 8006244:	4b94      	ldr	r3, [pc, #592]	; (8006498 <HAL_UART_MspInit+0x288>)
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800624c:	623b      	str	r3, [r7, #32]
 800624e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	4b90      	ldr	r3, [pc, #576]	; (8006498 <HAL_UART_MspInit+0x288>)
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	4a8f      	ldr	r2, [pc, #572]	; (8006498 <HAL_UART_MspInit+0x288>)
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	6313      	str	r3, [r2, #48]	; 0x30
 8006260:	4b8d      	ldr	r3, [pc, #564]	; (8006498 <HAL_UART_MspInit+0x288>)
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800626c:	2303      	movs	r3, #3
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006270:	2302      	movs	r3, #2
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006274:	2301      	movs	r3, #1
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006278:	2303      	movs	r3, #3
 800627a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800627c:	2308      	movs	r3, #8
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006284:	4619      	mov	r1, r3
 8006286:	4885      	ldr	r0, [pc, #532]	; (800649c <HAL_UART_MspInit+0x28c>)
 8006288:	f7fb fbe4 	bl	8001a54 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800628c:	4b84      	ldr	r3, [pc, #528]	; (80064a0 <HAL_UART_MspInit+0x290>)
 800628e:	4a85      	ldr	r2, [pc, #532]	; (80064a4 <HAL_UART_MspInit+0x294>)
 8006290:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006292:	4b83      	ldr	r3, [pc, #524]	; (80064a0 <HAL_UART_MspInit+0x290>)
 8006294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006298:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800629a:	4b81      	ldr	r3, [pc, #516]	; (80064a0 <HAL_UART_MspInit+0x290>)
 800629c:	2200      	movs	r2, #0
 800629e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062a0:	4b7f      	ldr	r3, [pc, #508]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062a6:	4b7e      	ldr	r3, [pc, #504]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062ae:	4b7c      	ldr	r3, [pc, #496]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062b4:	4b7a      	ldr	r3, [pc, #488]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80062ba:	4b79      	ldr	r3, [pc, #484]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80062c2:	4b77      	ldr	r3, [pc, #476]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80062c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062ca:	4b75      	ldr	r3, [pc, #468]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80062d0:	4873      	ldr	r0, [pc, #460]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062d2:	f7fb f82f 	bl	8001334 <HAL_DMA_Init>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80062dc:	f7ff ff40 	bl	8006160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a6f      	ldr	r2, [pc, #444]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062e4:	635a      	str	r2, [r3, #52]	; 0x34
 80062e6:	4a6e      	ldr	r2, [pc, #440]	; (80064a0 <HAL_UART_MspInit+0x290>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80062ec:	4b6e      	ldr	r3, [pc, #440]	; (80064a8 <HAL_UART_MspInit+0x298>)
 80062ee:	4a6f      	ldr	r2, [pc, #444]	; (80064ac <HAL_UART_MspInit+0x29c>)
 80062f0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80062f2:	4b6d      	ldr	r3, [pc, #436]	; (80064a8 <HAL_UART_MspInit+0x298>)
 80062f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062f8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062fa:	4b6b      	ldr	r3, [pc, #428]	; (80064a8 <HAL_UART_MspInit+0x298>)
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006300:	4b69      	ldr	r3, [pc, #420]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006302:	2200      	movs	r2, #0
 8006304:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006306:	4b68      	ldr	r3, [pc, #416]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800630c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800630e:	4b66      	ldr	r3, [pc, #408]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006310:	2200      	movs	r2, #0
 8006312:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006314:	4b64      	ldr	r3, [pc, #400]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006316:	2200      	movs	r2, #0
 8006318:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800631a:	4b63      	ldr	r3, [pc, #396]	; (80064a8 <HAL_UART_MspInit+0x298>)
 800631c:	2200      	movs	r2, #0
 800631e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006320:	4b61      	ldr	r3, [pc, #388]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006322:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006326:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006328:	4b5f      	ldr	r3, [pc, #380]	; (80064a8 <HAL_UART_MspInit+0x298>)
 800632a:	2200      	movs	r2, #0
 800632c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800632e:	485e      	ldr	r0, [pc, #376]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006330:	f7fb f800 	bl	8001334 <HAL_DMA_Init>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800633a:	f7ff ff11 	bl	8006160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a59      	ldr	r2, [pc, #356]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
 8006344:	4a58      	ldr	r2, [pc, #352]	; (80064a8 <HAL_UART_MspInit+0x298>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	2034      	movs	r0, #52	; 0x34
 8006350:	f7fa ffb9 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006354:	2034      	movs	r0, #52	; 0x34
 8006356:	f7fa ffd2 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800635a:	e0e7      	b.n	800652c <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART5)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a53      	ldr	r2, [pc, #332]	; (80064b0 <HAL_UART_MspInit+0x2a0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	f040 80b0 	bne.w	80064c8 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	4b4a      	ldr	r3, [pc, #296]	; (8006498 <HAL_UART_MspInit+0x288>)
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	4a49      	ldr	r2, [pc, #292]	; (8006498 <HAL_UART_MspInit+0x288>)
 8006372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006376:	6413      	str	r3, [r2, #64]	; 0x40
 8006378:	4b47      	ldr	r3, [pc, #284]	; (8006498 <HAL_UART_MspInit+0x288>)
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	4b43      	ldr	r3, [pc, #268]	; (8006498 <HAL_UART_MspInit+0x288>)
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	4a42      	ldr	r2, [pc, #264]	; (8006498 <HAL_UART_MspInit+0x288>)
 800638e:	f043 0310 	orr.w	r3, r3, #16
 8006392:	6313      	str	r3, [r2, #48]	; 0x30
 8006394:	4b40      	ldr	r3, [pc, #256]	; (8006498 <HAL_UART_MspInit+0x288>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80063a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a6:	2302      	movs	r3, #2
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063aa:	2301      	movs	r3, #1
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063ae:	2303      	movs	r3, #3
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80063b2:	2308      	movs	r3, #8
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ba:	4619      	mov	r1, r3
 80063bc:	483d      	ldr	r0, [pc, #244]	; (80064b4 <HAL_UART_MspInit+0x2a4>)
 80063be:	f7fb fb49 	bl	8001a54 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80063c2:	4b3d      	ldr	r3, [pc, #244]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063c4:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <HAL_UART_MspInit+0x2ac>)
 80063c6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80063c8:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063ce:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063d0:	4b39      	ldr	r3, [pc, #228]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063d6:	4b38      	ldr	r3, [pc, #224]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063d8:	2200      	movs	r2, #0
 80063da:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063e2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063e4:	4b34      	ldr	r3, [pc, #208]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063ea:	4b33      	ldr	r3, [pc, #204]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80063f0:	4b31      	ldr	r3, [pc, #196]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063f6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80063f8:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 80063fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063fe:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006400:	4b2d      	ldr	r3, [pc, #180]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 8006402:	2200      	movs	r2, #0
 8006404:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006406:	482c      	ldr	r0, [pc, #176]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 8006408:	f7fa ff94 	bl	8001334 <HAL_DMA_Init>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_UART_MspInit+0x206>
      Error_Handler();
 8006412:	f7ff fea5 	bl	8006160 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 800641a:	635a      	str	r2, [r3, #52]	; 0x34
 800641c:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <HAL_UART_MspInit+0x2a8>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006422:	4b27      	ldr	r3, [pc, #156]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006424:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <HAL_UART_MspInit+0x2b4>)
 8006426:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 800642a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800642e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006430:	4b23      	ldr	r3, [pc, #140]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006432:	2240      	movs	r2, #64	; 0x40
 8006434:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006438:	2200      	movs	r2, #0
 800643a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800643c:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 800643e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006442:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006446:	2200      	movs	r2, #0
 8006448:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800644a:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 800644c:	2200      	movs	r2, #0
 800644e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006452:	2200      	movs	r2, #0
 8006454:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800645c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800645e:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006460:	2200      	movs	r2, #0
 8006462:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006464:	4816      	ldr	r0, [pc, #88]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006466:	f7fa ff65 	bl	8001334 <HAL_DMA_Init>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_UART_MspInit+0x264>
      Error_Handler();
 8006470:	f7ff fe76 	bl	8006160 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a12      	ldr	r2, [pc, #72]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
 800647a:	4a11      	ldr	r2, [pc, #68]	; (80064c0 <HAL_UART_MspInit+0x2b0>)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006480:	2200      	movs	r2, #0
 8006482:	2100      	movs	r1, #0
 8006484:	2035      	movs	r0, #53	; 0x35
 8006486:	f7fa ff1e 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800648a:	2035      	movs	r0, #53	; 0x35
 800648c:	f7fa ff37 	bl	80012fe <HAL_NVIC_EnableIRQ>
}
 8006490:	e04c      	b.n	800652c <HAL_UART_MspInit+0x31c>
 8006492:	bf00      	nop
 8006494:	40004c00 	.word	0x40004c00
 8006498:	40023800 	.word	0x40023800
 800649c:	40020000 	.word	0x40020000
 80064a0:	20000210 	.word	0x20000210
 80064a4:	40026040 	.word	0x40026040
 80064a8:	20005e00 	.word	0x20005e00
 80064ac:	40026070 	.word	0x40026070
 80064b0:	40005000 	.word	0x40005000
 80064b4:	40021000 	.word	0x40021000
 80064b8:	20005da0 	.word	0x20005da0
 80064bc:	40026010 	.word	0x40026010
 80064c0:	20005e60 	.word	0x20005e60
 80064c4:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART3)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <HAL_UART_MspInit+0x324>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d12c      	bne.n	800652c <HAL_UART_MspInit+0x31c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	4b18      	ldr	r3, [pc, #96]	; (8006538 <HAL_UART_MspInit+0x328>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <HAL_UART_MspInit+0x328>)
 80064dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40
 80064e2:	4b15      	ldr	r3, [pc, #84]	; (8006538 <HAL_UART_MspInit+0x328>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	4b11      	ldr	r3, [pc, #68]	; (8006538 <HAL_UART_MspInit+0x328>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	4a10      	ldr	r2, [pc, #64]	; (8006538 <HAL_UART_MspInit+0x328>)
 80064f8:	f043 0308 	orr.w	r3, r3, #8
 80064fc:	6313      	str	r3, [r2, #48]	; 0x30
 80064fe:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <HAL_UART_MspInit+0x328>)
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800650a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006510:	2302      	movs	r3, #2
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006514:	2300      	movs	r3, #0
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006518:	2303      	movs	r3, #3
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800651c:	2307      	movs	r3, #7
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006524:	4619      	mov	r1, r3
 8006526:	4805      	ldr	r0, [pc, #20]	; (800653c <HAL_UART_MspInit+0x32c>)
 8006528:	f7fb fa94 	bl	8001a54 <HAL_GPIO_Init>
}
 800652c:	bf00      	nop
 800652e:	3738      	adds	r7, #56	; 0x38
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40004800 	.word	0x40004800
 8006538:	40023800 	.word	0x40023800
 800653c:	40020c00 	.word	0x40020c00

08006540 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006548:	f107 0314 	add.w	r3, r7, #20
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006560:	d13f      	bne.n	80065e2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006562:	2300      	movs	r3, #0
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	4b21      	ldr	r3, [pc, #132]	; (80065ec <HAL_PCD_MspInit+0xac>)
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	4a20      	ldr	r2, [pc, #128]	; (80065ec <HAL_PCD_MspInit+0xac>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6313      	str	r3, [r2, #48]	; 0x30
 8006572:	4b1e      	ldr	r3, [pc, #120]	; (80065ec <HAL_PCD_MspInit+0xac>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800657e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006584:	2302      	movs	r3, #2
 8006586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800658c:	2303      	movs	r3, #3
 800658e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006590:	230a      	movs	r3, #10
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006594:	f107 0314 	add.w	r3, r7, #20
 8006598:	4619      	mov	r1, r3
 800659a:	4815      	ldr	r0, [pc, #84]	; (80065f0 <HAL_PCD_MspInit+0xb0>)
 800659c:	f7fb fa5a 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80065a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80065ae:	f107 0314 	add.w	r3, r7, #20
 80065b2:	4619      	mov	r1, r3
 80065b4:	480e      	ldr	r0, [pc, #56]	; (80065f0 <HAL_PCD_MspInit+0xb0>)
 80065b6:	f7fb fa4d 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <HAL_PCD_MspInit+0xac>)
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	4a0b      	ldr	r2, [pc, #44]	; (80065ec <HAL_PCD_MspInit+0xac>)
 80065c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c4:	6353      	str	r3, [r2, #52]	; 0x34
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	4b08      	ldr	r3, [pc, #32]	; (80065ec <HAL_PCD_MspInit+0xac>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	4a07      	ldr	r2, [pc, #28]	; (80065ec <HAL_PCD_MspInit+0xac>)
 80065d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d4:	6453      	str	r3, [r2, #68]	; 0x44
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <HAL_PCD_MspInit+0xac>)
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80065e2:	bf00      	nop
 80065e4:	3728      	adds	r7, #40	; 0x28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40023800 	.word	0x40023800
 80065f0:	40020000 	.word	0x40020000

080065f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80065f8:	bf00      	nop
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006602:	b480      	push	{r7}
 8006604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006606:	e7fe      	b.n	8006606 <HardFault_Handler+0x4>

08006608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800660c:	e7fe      	b.n	800660c <MemManage_Handler+0x4>

0800660e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800660e:	b480      	push	{r7}
 8006610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006612:	e7fe      	b.n	8006612 <BusFault_Handler+0x4>

08006614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006618:	e7fe      	b.n	8006618 <UsageFault_Handler+0x4>

0800661a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800662c:	bf00      	nop
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006636:	b480      	push	{r7}
 8006638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800663a:	bf00      	nop
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006648:	f7fa fd20 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800664c:	bf00      	nop
 800664e:	bd80      	pop	{r7, pc}

08006650 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006654:	4802      	ldr	r0, [pc, #8]	; (8006660 <DMA1_Stream0_IRQHandler+0x10>)
 8006656:	f7fa ff95 	bl	8001584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20005da0 	.word	0x20005da0

08006664 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006668:	4802      	ldr	r0, [pc, #8]	; (8006674 <DMA1_Stream2_IRQHandler+0x10>)
 800666a:	f7fa ff8b 	bl	8001584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000210 	.word	0x20000210

08006678 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800667c:	4802      	ldr	r0, [pc, #8]	; (8006688 <DMA1_Stream4_IRQHandler+0x10>)
 800667e:	f7fa ff81 	bl	8001584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */
  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006682:	bf00      	nop
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20005e00 	.word	0x20005e00

0800668c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006690:	4802      	ldr	r0, [pc, #8]	; (800669c <TIM3_IRQHandler+0x10>)
 8006692:	f7fc fd60 	bl	8003156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006696:	bf00      	nop
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20005750 	.word	0x20005750

080066a0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80066a4:	4802      	ldr	r0, [pc, #8]	; (80066b0 <DMA1_Stream7_IRQHandler+0x10>)
 80066a6:	f7fa ff6d 	bl	8001584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80066aa:	bf00      	nop
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20005e60 	.word	0x20005e60

080066b4 <UART4_IRQHandler>:
  * with such transmission. One solution is to declare a buffer that became
  * full with probability less than assumed value. The another solution is to
  * exploit an IDLE mechanism.
  */
void UART4_IRQHandler(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80066ba:	480e      	ldr	r0, [pc, #56]	; (80066f4 <UART4_IRQHandler+0x40>)
 80066bc:	f7fd fa36 	bl	8003b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE)) {
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <UART4_IRQHandler+0x40>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b10      	cmp	r3, #16
 80066cc:	d10d      	bne.n	80066ea <UART4_IRQHandler+0x36>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80066ce:	2300      	movs	r3, #0
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <UART4_IRQHandler+0x40>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <UART4_IRQHandler+0x40>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
	  HAL_UART_RxCpltCallback(&huart4);
 80066e4:	4803      	ldr	r0, [pc, #12]	; (80066f4 <UART4_IRQHandler+0x40>)
 80066e6:	f000 f849 	bl	800677c <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END UART4_IRQn 1 */
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	200058c0 	.word	0x200058c0

080066f8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80066fe:	480e      	ldr	r0, [pc, #56]	; (8006738 <UART5_IRQHandler+0x40>)
 8006700:	f7fd fa14 	bl	8003b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE)) {
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <UART5_IRQHandler+0x40>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b10      	cmp	r3, #16
 8006710:	d10d      	bne.n	800672e <UART5_IRQHandler+0x36>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8006712:	2300      	movs	r3, #0
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <UART5_IRQHandler+0x40>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <UART5_IRQHandler+0x40>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	607b      	str	r3, [r7, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
	  HAL_UART_RxCpltCallback(&huart5);
 8006728:	4803      	ldr	r0, [pc, #12]	; (8006738 <UART5_IRQHandler+0x40>)
 800672a:	f000 f827 	bl	800677c <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END UART5_IRQn 1 */
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20005790 	.word	0x20005790

0800673c <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 1 */

/**
  * @brief This function handles UART sending transfer complete callback
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a08      	ldr	r2, [pc, #32]	; (800676c <HAL_UART_TxCpltCallback+0x30>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d102      	bne.n	8006754 <HAL_UART_TxCpltCallback+0x18>
		uart_dma_tx_handler(&huart_dma_1);
 800674e:	4808      	ldr	r0, [pc, #32]	; (8006770 <HAL_UART_TxCpltCallback+0x34>)
 8006750:	f000 f9a0 	bl	8006a94 <uart_dma_tx_handler>
	}
	if (huart->Instance == UART5) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a06      	ldr	r2, [pc, #24]	; (8006774 <HAL_UART_TxCpltCallback+0x38>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d102      	bne.n	8006764 <HAL_UART_TxCpltCallback+0x28>
		uart_dma_tx_handler(&huart_dma_2);
 800675e:	4806      	ldr	r0, [pc, #24]	; (8006778 <HAL_UART_TxCpltCallback+0x3c>)
 8006760:	f000 f998 	bl	8006a94 <uart_dma_tx_handler>
	}
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40004c00 	.word	0x40004c00
 8006770:	20002f04 	.word	0x20002f04
 8006774:	40005000 	.word	0x40005000
 8006778:	20000270 	.word	0x20000270

0800677c <HAL_UART_RxCpltCallback>:

/**
  * @brief This function handles UART receiving transfer complete callback
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <HAL_UART_RxCpltCallback+0x38>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d102      	bne.n	8006794 <HAL_UART_RxCpltCallback+0x18>
		uart_dma_rx_handler(&huart_dma_1);
 800678e:	480a      	ldr	r0, [pc, #40]	; (80067b8 <HAL_UART_RxCpltCallback+0x3c>)
 8006790:	f000 f9b7 	bl	8006b02 <uart_dma_rx_handler>
	}
	if (huart->Instance == UART5) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a08      	ldr	r2, [pc, #32]	; (80067bc <HAL_UART_RxCpltCallback+0x40>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d105      	bne.n	80067aa <HAL_UART_RxCpltCallback+0x2e>
		uart_dma_rx_handler(&huart_dma_2);
 800679e:	4808      	ldr	r0, [pc, #32]	; (80067c0 <HAL_UART_RxCpltCallback+0x44>)
 80067a0:	f000 f9af 	bl	8006b02 <uart_dma_rx_handler>
		blue_parser_recv_handler(&hblue);
 80067a4:	4807      	ldr	r0, [pc, #28]	; (80067c4 <HAL_UART_RxCpltCallback+0x48>)
 80067a6:	f7fe fb4f 	bl	8004e48 <blue_parser_recv_handler>
	}
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40004c00 	.word	0x40004c00
 80067b8:	20002f04 	.word	0x20002f04
 80067bc:	40005000 	.word	0x40005000
 80067c0:	20000270 	.word	0x20000270
 80067c4:	20005900 	.word	0x20005900

080067c8 <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief This function handles TIM3 period elapsed callback
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM3) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a04      	ldr	r2, [pc, #16]	; (80067e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d102      	bne.n	80067e0 <HAL_TIM_PeriodElapsedCallback+0x18>
	 gps_rcv_handler(&hgps);
 80067da:	4804      	ldr	r0, [pc, #16]	; (80067ec <HAL_TIM_PeriodElapsedCallback+0x24>)
 80067dc:	f7fe ff1a 	bl	8005614 <gps_rcv_handler>
 }
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40000400 	.word	0x40000400
 80067ec:	200057d0 	.word	0x200057d0

080067f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <_sbrk+0x50>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <_sbrk+0x16>
		heap_end = &end;
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <_sbrk+0x50>)
 8006802:	4a10      	ldr	r2, [pc, #64]	; (8006844 <_sbrk+0x54>)
 8006804:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006806:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <_sbrk+0x50>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800680c:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <_sbrk+0x50>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4413      	add	r3, r2
 8006814:	466a      	mov	r2, sp
 8006816:	4293      	cmp	r3, r2
 8006818:	d907      	bls.n	800682a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800681a:	f000 f9a7 	bl	8006b6c <__errno>
 800681e:	4602      	mov	r2, r0
 8006820:	230c      	movs	r3, #12
 8006822:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	e006      	b.n	8006838 <_sbrk+0x48>
	}

	heap_end += incr;
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <_sbrk+0x50>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	4a03      	ldr	r2, [pc, #12]	; (8006840 <_sbrk+0x50>)
 8006834:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006836:	68fb      	ldr	r3, [r7, #12]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	200001fc 	.word	0x200001fc
 8006844:	20005ec8 	.word	0x20005ec8

08006848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <SystemInit+0x28>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	4a07      	ldr	r2, [pc, #28]	; (8006870 <SystemInit+0x28>)
 8006854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <SystemInit+0x28>)
 800685e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006862:	609a      	str	r2, [r3, #8]
#endif
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	e000ed00 	.word	0xe000ed00

08006874 <uart_process_data>:
 * Data are written to RX ringbuffer for application processing at latter stage
 * \param[in]		huart_dma: Handle to __UART_DMA_HandleTypeDef structure
 * \param[in]       data: Data to process
 * \param[in]       len: Length in units of bytes
 */
static void uart_process_data(UART_DMA_HandleTypeDef *huart_dma, const void* data, size_t len) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
    ringbuff_write(&(huart_dma->usart_rx_buff), data, len);  /* Write data to receive buffer */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fbe2 	bl	8005054 <ringbuff_write>
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <uart_rx_check>:

/**
 * \brief           Check for new data received with DMA
 * \param[in]		huart_dma: Handle to __UART_DMA_HandleTypeDef structure
 */
static void uart_rx_check(UART_DMA_HandleTypeDef *huart_dma) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	size_t pos;

	/* Calculate current position in buffer */
	pos = ARRAY_LEN(huart_dma->uart_rx_raw_data) - __HAL_DMA_GET_COUNTER(huart_dma->hdma_rx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80068a6:	3308      	adds	r3, #8
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80068b2:	60fb      	str	r3, [r7, #12]
	if (pos != huart_dma->usart_dma_rx_ptr) {		 /* Check change in received data */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068ba:	333c      	adds	r3, #60	; 0x3c
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d040      	beq.n	8006946 <uart_rx_check+0xae>
		if (pos > huart_dma->usart_dma_rx_ptr) {	 /* Current position is over previous one */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068ca:	333c      	adds	r3, #60	; 0x3c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d916      	bls.n	8006902 <uart_rx_check+0x6a>
			/* We are in "linear" mode */
			/* Process data directly by subtracting "pointers" */
			uart_process_data(huart_dma, &huart_dma->uart_rx_raw_data[huart_dma->usart_dma_rx_ptr], pos - huart_dma->usart_dma_rx_ptr);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068da:	333c      	adds	r3, #60	; 0x3c
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80068e2:	3308      	adds	r3, #8
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	4413      	add	r3, r2
 80068e8:	1d19      	adds	r1, r3, #4
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068f0:	333c      	adds	r3, #60	; 0x3c
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ffba 	bl	8006874 <uart_process_data>
 8006900:	e021      	b.n	8006946 <uart_rx_check+0xae>
		} else {
			/* We are in "overflow" mode */
			/* First process data to the end of buffer */
			uart_process_data(huart_dma, &huart_dma->uart_rx_raw_data[huart_dma->usart_dma_rx_ptr], ARRAY_LEN(huart_dma->uart_rx_raw_data) - huart_dma->usart_dma_rx_ptr);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006908:	333c      	adds	r3, #60	; 0x3c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006910:	3308      	adds	r3, #8
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	4413      	add	r3, r2
 8006916:	1d19      	adds	r1, r3, #4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800691e:	333c      	adds	r3, #60	; 0x3c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8006926:	461a      	mov	r2, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ffa3 	bl	8006874 <uart_process_data>
			/* Check and continue with beginning of buffer */
			 if (pos > 0) {
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <uart_rx_check+0xae>
				 uart_process_data(huart_dma, &huart_dma->uart_rx_raw_data[0], pos);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800693a:	330c      	adds	r3, #12
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ff97 	bl	8006874 <uart_process_data>
			 }
		}
	}
	huart_dma->usart_dma_rx_ptr = pos;               /* Save current position as old */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800694c:	333c      	adds	r3, #60	; 0x3c
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	601a      	str	r2, [r3, #0]

	/* Check and manually update if we reached end of buffer */
	if (huart_dma->usart_dma_rx_ptr == ARRAY_LEN(huart_dma->uart_rx_raw_data)) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006958:	333c      	adds	r3, #60	; 0x3c
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006960:	d105      	bne.n	800696e <uart_rx_check+0xd6>
		huart_dma->usart_dma_rx_ptr = 0;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006968:	333c      	adds	r3, #60	; 0x3c
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
	}
}
 800696e:	bf00      	nop
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <uart_start_tx_dma>:

/**
 * \brief           Check if DMA is active and if not try to send data
 * \param[in]		huart_dma: Handle to __UART_DMA_HandleTypeDef structure
 */
static void uart_start_tx_dma(UART_DMA_HandleTypeDef *huart_dma) {
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
    /* If length > 0, DMA transfer is on-going */
    if (huart_dma->usart_dma_tx_len > 0) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006984:	331c      	adds	r3, #28
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d124      	bne.n	80069d6 <uart_start_tx_dma+0x60>
        return;
    }

    /* Check if something to send  */
    huart_dma->usart_dma_tx_len = ringbuff_get_linear_block_read_length(&(huart_dma->usart_tx_buff));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fd18 	bl	80053c4 <ringbuff_get_linear_block_read_length>
 8006994:	4602      	mov	r2, r0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699c:	331c      	adds	r3, #28
 800699e:	601a      	str	r2, [r3, #0]
    if (huart_dma->usart_dma_tx_len > 0) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a6:	331c      	adds	r3, #28
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d014      	beq.n	80069d8 <uart_start_tx_dma+0x62>
    	uint8_t* data = ringbuff_get_linear_block_read_address(&(huart_dma->usart_tx_buff));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fcdd 	bl	8005370 <ringbuff_get_linear_block_read_address>
 80069b6:	60f8      	str	r0, [r7, #12]
    	HAL_UART_Transmit_DMA(huart_dma->huart, data, huart_dma->usart_dma_tx_len); /* Start DMA transfer */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c6:	331c      	adds	r3, #28
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	f7fc ffc0 	bl	8003954 <HAL_UART_Transmit_DMA>
 80069d4:	e000      	b.n	80069d8 <uart_start_tx_dma+0x62>
        return;
 80069d6:	bf00      	nop
    }
}
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <uart_dma_init>:
 * \param[in]
 * \param[in]
 * \param[in]
 * \param[in]
 */
void uart_dma_init(UART_DMA_HandleTypeDef *huart_dma, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma_tx, DMA_HandleTypeDef *hdma_rx) {
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
	huart_dma->huart 	= huart;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	601a      	str	r2, [r3, #0]
	huart_dma->hdma_tx	= hdma_tx;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80069fc:	3304      	adds	r3, #4
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	601a      	str	r2, [r3, #0]
	huart_dma->hdma_rx	= hdma_rx;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006a08:	3308      	adds	r3, #8
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	601a      	str	r2, [r3, #0]

	ringbuff_init(&(huart_dma->usart_tx_buff), huart_dma->usart_tx_buff_data, sizeof(huart_dma->usart_tx_buff_data));
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	331c      	adds	r3, #28
 8006a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f7fe faef 	bl	8004ffc <ringbuff_init>
	ringbuff_init(&(huart_dma->usart_rx_buff), huart_dma->usart_rx_buff_data, sizeof(huart_dma->usart_rx_buff_data));
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a2a:	331c      	adds	r3, #28
 8006a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a30:	4619      	mov	r1, r3
 8006a32:	f7fe fae3 	bl	8004ffc <ringbuff_init>

	__HAL_UART_ENABLE_IT(huart_dma->huart, UART_IT_IDLE); /* Enable UART IDLE interrupt*/
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0210 	orr.w	r2, r2, #16
 8006a50:	60da      	str	r2, [r3, #12]

	__HAL_DMA_ENABLE_IT(hdma_rx, DMA_IT_HT); /* Enable Half-Transfer complete interrupt for RX*/
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0208 	orr.w	r2, r2, #8
 8006a60:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(hdma_rx, DMA_IT_TC); /* Enable Whole-Transfer complete interrupt for RX*/
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0210 	orr.w	r2, r2, #16
 8006a70:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huart_dma->huart, huart_dma->uart_rx_raw_data, sizeof(huart_dma->uart_rx_raw_data));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006a80:	330c      	adds	r3, #12
 8006a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a86:	4619      	mov	r1, r3
 8006a88:	f7fc ffd0 	bl	8003a2c <HAL_UART_Receive_DMA>
}
 8006a8c:	bf00      	nop
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <uart_dma_tx_handler>:

/**
 * \brief           DMA channel interrupt handler for UART TX
 * \param[in]		huart_dma: Handle to __UART_DMA_HandleTypeDef structure
 */
void uart_dma_tx_handler(UART_DMA_HandleTypeDef *huart_dma) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(huart_dma->huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); 	/* Disable TXEIE and TCIE interrupts */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ab6:	60da      	str	r2, [r3, #12]
    huart_dma->huart->gState = HAL_UART_STATE_READY; 									/* Tx process is ended, restore huart->gState to Ready */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    if(huart_dma->usart_dma_tx_len > 0) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006acc:	331c      	adds	r3, #28
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d012      	beq.n	8006afa <uart_dma_tx_handler+0x66>
    		ringbuff_skip(&(huart_dma->usart_tx_buff), huart_dma->usart_dma_tx_len);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006adc:	331c      	adds	r3, #28
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7fe fcb0 	bl	8005448 <ringbuff_skip>
    		huart_dma->usart_dma_tx_len = 0;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aee:	331c      	adds	r3, #28
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
    		uart_start_tx_dma(huart_dma);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ff3e 	bl	8006976 <uart_start_tx_dma>
    }
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <uart_dma_rx_handler>:

/**
 * \brief           DMA channel interrupt handler for UART RX
 * \param[in]		huart_dma: Handle to __UART_DMA_HandleTypeDef structure
 */
void uart_dma_rx_handler(UART_DMA_HandleTypeDef *huart_dma) {
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
	uart_rx_check(huart_dma);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fec4 	bl	8006898 <uart_rx_check>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b1e:	e003      	b.n	8006b28 <LoopCopyDataInit>

08006b20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b26:	3104      	adds	r1, #4

08006b28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b28:	480b      	ldr	r0, [pc, #44]	; (8006b58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b30:	d3f6      	bcc.n	8006b20 <CopyDataInit>
  ldr  r2, =_sbss
 8006b32:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b34:	e002      	b.n	8006b3c <LoopFillZerobss>

08006b36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b38:	f842 3b04 	str.w	r3, [r2], #4

08006b3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b40:	d3f9      	bcc.n	8006b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b42:	f7ff fe81 	bl	8006848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b46:	f000 f817 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b4a:	f7ff f837 	bl	8005bbc <main>
  bx  lr    
 8006b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006b54:	0800b25c 	.word	0x0800b25c
  ldr  r0, =_sdata
 8006b58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b5c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006b60:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006b64:	20005ec4 	.word	0x20005ec4

08006b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b68:	e7fe      	b.n	8006b68 <ADC_IRQHandler>
	...

08006b6c <__errno>:
 8006b6c:	4b01      	ldr	r3, [pc, #4]	; (8006b74 <__errno+0x8>)
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	2000000c 	.word	0x2000000c

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4e0d      	ldr	r6, [pc, #52]	; (8006bb0 <__libc_init_array+0x38>)
 8006b7c:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <__libc_init_array+0x3c>)
 8006b7e:	1ba4      	subs	r4, r4, r6
 8006b80:	10a4      	asrs	r4, r4, #2
 8006b82:	2500      	movs	r5, #0
 8006b84:	42a5      	cmp	r5, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	4e0b      	ldr	r6, [pc, #44]	; (8006bb8 <__libc_init_array+0x40>)
 8006b8a:	4c0c      	ldr	r4, [pc, #48]	; (8006bbc <__libc_init_array+0x44>)
 8006b8c:	f004 f98c 	bl	800aea8 <_init>
 8006b90:	1ba4      	subs	r4, r4, r6
 8006b92:	10a4      	asrs	r4, r4, #2
 8006b94:	2500      	movs	r5, #0
 8006b96:	42a5      	cmp	r5, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ba0:	4798      	blx	r3
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006baa:	4798      	blx	r3
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	0800b254 	.word	0x0800b254
 8006bb4:	0800b254 	.word	0x0800b254
 8006bb8:	0800b254 	.word	0x0800b254
 8006bbc:	0800b258 	.word	0x0800b258

08006bc0 <memcpy>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	1e43      	subs	r3, r0, #1
 8006bc4:	440a      	add	r2, r1
 8006bc6:	4291      	cmp	r1, r2
 8006bc8:	d100      	bne.n	8006bcc <memcpy+0xc>
 8006bca:	bd10      	pop	{r4, pc}
 8006bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd4:	e7f7      	b.n	8006bc6 <memcpy+0x6>

08006bd6 <memset>:
 8006bd6:	4402      	add	r2, r0
 8006bd8:	4603      	mov	r3, r0
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d100      	bne.n	8006be0 <memset+0xa>
 8006bde:	4770      	bx	lr
 8006be0:	f803 1b01 	strb.w	r1, [r3], #1
 8006be4:	e7f9      	b.n	8006bda <memset+0x4>

08006be6 <__cvt>:
 8006be6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bea:	ec55 4b10 	vmov	r4, r5, d0
 8006bee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006bf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bf4:	2d00      	cmp	r5, #0
 8006bf6:	460e      	mov	r6, r1
 8006bf8:	4691      	mov	r9, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	bfb8      	it	lt
 8006bfe:	4622      	movlt	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	f027 0720 	bic.w	r7, r7, #32
 8006c06:	bfbb      	ittet	lt
 8006c08:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c0c:	461d      	movlt	r5, r3
 8006c0e:	2300      	movge	r3, #0
 8006c10:	232d      	movlt	r3, #45	; 0x2d
 8006c12:	bfb8      	it	lt
 8006c14:	4614      	movlt	r4, r2
 8006c16:	2f46      	cmp	r7, #70	; 0x46
 8006c18:	700b      	strb	r3, [r1, #0]
 8006c1a:	d004      	beq.n	8006c26 <__cvt+0x40>
 8006c1c:	2f45      	cmp	r7, #69	; 0x45
 8006c1e:	d100      	bne.n	8006c22 <__cvt+0x3c>
 8006c20:	3601      	adds	r6, #1
 8006c22:	2102      	movs	r1, #2
 8006c24:	e000      	b.n	8006c28 <__cvt+0x42>
 8006c26:	2103      	movs	r1, #3
 8006c28:	ab03      	add	r3, sp, #12
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	ab02      	add	r3, sp, #8
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4632      	mov	r2, r6
 8006c32:	4653      	mov	r3, sl
 8006c34:	ec45 4b10 	vmov	d0, r4, r5
 8006c38:	f001 fda2 	bl	8008780 <_dtoa_r>
 8006c3c:	2f47      	cmp	r7, #71	; 0x47
 8006c3e:	4680      	mov	r8, r0
 8006c40:	d102      	bne.n	8006c48 <__cvt+0x62>
 8006c42:	f019 0f01 	tst.w	r9, #1
 8006c46:	d026      	beq.n	8006c96 <__cvt+0xb0>
 8006c48:	2f46      	cmp	r7, #70	; 0x46
 8006c4a:	eb08 0906 	add.w	r9, r8, r6
 8006c4e:	d111      	bne.n	8006c74 <__cvt+0x8e>
 8006c50:	f898 3000 	ldrb.w	r3, [r8]
 8006c54:	2b30      	cmp	r3, #48	; 0x30
 8006c56:	d10a      	bne.n	8006c6e <__cvt+0x88>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 ff62 	bl	8000b28 <__aeabi_dcmpeq>
 8006c64:	b918      	cbnz	r0, 8006c6e <__cvt+0x88>
 8006c66:	f1c6 0601 	rsb	r6, r6, #1
 8006c6a:	f8ca 6000 	str.w	r6, [sl]
 8006c6e:	f8da 3000 	ldr.w	r3, [sl]
 8006c72:	4499      	add	r9, r3
 8006c74:	2200      	movs	r2, #0
 8006c76:	2300      	movs	r3, #0
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	f7f9 ff54 	bl	8000b28 <__aeabi_dcmpeq>
 8006c80:	b938      	cbnz	r0, 8006c92 <__cvt+0xac>
 8006c82:	2230      	movs	r2, #48	; 0x30
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	454b      	cmp	r3, r9
 8006c88:	d205      	bcs.n	8006c96 <__cvt+0xb0>
 8006c8a:	1c59      	adds	r1, r3, #1
 8006c8c:	9103      	str	r1, [sp, #12]
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	e7f8      	b.n	8006c84 <__cvt+0x9e>
 8006c92:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c9a:	eba3 0308 	sub.w	r3, r3, r8
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	b004      	add	sp, #16
 8006ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006ca8 <__exponent>:
 8006ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006caa:	2900      	cmp	r1, #0
 8006cac:	4604      	mov	r4, r0
 8006cae:	bfba      	itte	lt
 8006cb0:	4249      	neglt	r1, r1
 8006cb2:	232d      	movlt	r3, #45	; 0x2d
 8006cb4:	232b      	movge	r3, #43	; 0x2b
 8006cb6:	2909      	cmp	r1, #9
 8006cb8:	f804 2b02 	strb.w	r2, [r4], #2
 8006cbc:	7043      	strb	r3, [r0, #1]
 8006cbe:	dd20      	ble.n	8006d02 <__exponent+0x5a>
 8006cc0:	f10d 0307 	add.w	r3, sp, #7
 8006cc4:	461f      	mov	r7, r3
 8006cc6:	260a      	movs	r6, #10
 8006cc8:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ccc:	fb06 1115 	mls	r1, r6, r5, r1
 8006cd0:	3130      	adds	r1, #48	; 0x30
 8006cd2:	2d09      	cmp	r5, #9
 8006cd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006cd8:	f103 32ff 	add.w	r2, r3, #4294967295
 8006cdc:	4629      	mov	r1, r5
 8006cde:	dc09      	bgt.n	8006cf4 <__exponent+0x4c>
 8006ce0:	3130      	adds	r1, #48	; 0x30
 8006ce2:	3b02      	subs	r3, #2
 8006ce4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ce8:	42bb      	cmp	r3, r7
 8006cea:	4622      	mov	r2, r4
 8006cec:	d304      	bcc.n	8006cf8 <__exponent+0x50>
 8006cee:	1a10      	subs	r0, r2, r0
 8006cf0:	b003      	add	sp, #12
 8006cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	e7e7      	b.n	8006cc8 <__exponent+0x20>
 8006cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cfc:	f804 2b01 	strb.w	r2, [r4], #1
 8006d00:	e7f2      	b.n	8006ce8 <__exponent+0x40>
 8006d02:	2330      	movs	r3, #48	; 0x30
 8006d04:	4419      	add	r1, r3
 8006d06:	7083      	strb	r3, [r0, #2]
 8006d08:	1d02      	adds	r2, r0, #4
 8006d0a:	70c1      	strb	r1, [r0, #3]
 8006d0c:	e7ef      	b.n	8006cee <__exponent+0x46>
	...

08006d10 <_printf_float>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	b08d      	sub	sp, #52	; 0x34
 8006d16:	460c      	mov	r4, r1
 8006d18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	461f      	mov	r7, r3
 8006d20:	4605      	mov	r5, r0
 8006d22:	f002 fe1f 	bl	8009964 <_localeconv_r>
 8006d26:	6803      	ldr	r3, [r0, #0]
 8006d28:	9304      	str	r3, [sp, #16]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fa7a 	bl	8000224 <strlen>
 8006d30:	2300      	movs	r3, #0
 8006d32:	930a      	str	r3, [sp, #40]	; 0x28
 8006d34:	f8d8 3000 	ldr.w	r3, [r8]
 8006d38:	9005      	str	r0, [sp, #20]
 8006d3a:	3307      	adds	r3, #7
 8006d3c:	f023 0307 	bic.w	r3, r3, #7
 8006d40:	f103 0208 	add.w	r2, r3, #8
 8006d44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d48:	f8d4 b000 	ldr.w	fp, [r4]
 8006d4c:	f8c8 2000 	str.w	r2, [r8]
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d60:	9307      	str	r3, [sp, #28]
 8006d62:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d66:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6a:	4ba7      	ldr	r3, [pc, #668]	; (8007008 <_printf_float+0x2f8>)
 8006d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d70:	f7f9 ff0c 	bl	8000b8c <__aeabi_dcmpun>
 8006d74:	bb70      	cbnz	r0, 8006dd4 <_printf_float+0xc4>
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7a:	4ba3      	ldr	r3, [pc, #652]	; (8007008 <_printf_float+0x2f8>)
 8006d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d80:	f7f9 fee6 	bl	8000b50 <__aeabi_dcmple>
 8006d84:	bb30      	cbnz	r0, 8006dd4 <_printf_float+0xc4>
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	f7f9 fed5 	bl	8000b3c <__aeabi_dcmplt>
 8006d92:	b110      	cbz	r0, 8006d9a <_printf_float+0x8a>
 8006d94:	232d      	movs	r3, #45	; 0x2d
 8006d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d9a:	4a9c      	ldr	r2, [pc, #624]	; (800700c <_printf_float+0x2fc>)
 8006d9c:	4b9c      	ldr	r3, [pc, #624]	; (8007010 <_printf_float+0x300>)
 8006d9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006da2:	bf8c      	ite	hi
 8006da4:	4690      	movhi	r8, r2
 8006da6:	4698      	movls	r8, r3
 8006da8:	2303      	movs	r3, #3
 8006daa:	f02b 0204 	bic.w	r2, fp, #4
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	6022      	str	r2, [r4, #0]
 8006db2:	f04f 0900 	mov.w	r9, #0
 8006db6:	9700      	str	r7, [sp, #0]
 8006db8:	4633      	mov	r3, r6
 8006dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 f9e6 	bl	8007190 <_printf_common>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f040 808d 	bne.w	8006ee4 <_printf_float+0x1d4>
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295
 8006dce:	b00d      	add	sp, #52	; 0x34
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4649      	mov	r1, r9
 8006ddc:	f7f9 fed6 	bl	8000b8c <__aeabi_dcmpun>
 8006de0:	b110      	cbz	r0, 8006de8 <_printf_float+0xd8>
 8006de2:	4a8c      	ldr	r2, [pc, #560]	; (8007014 <_printf_float+0x304>)
 8006de4:	4b8c      	ldr	r3, [pc, #560]	; (8007018 <_printf_float+0x308>)
 8006de6:	e7da      	b.n	8006d9e <_printf_float+0x8e>
 8006de8:	6861      	ldr	r1, [r4, #4]
 8006dea:	1c4b      	adds	r3, r1, #1
 8006dec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006df0:	a80a      	add	r0, sp, #40	; 0x28
 8006df2:	d13e      	bne.n	8006e72 <_printf_float+0x162>
 8006df4:	2306      	movs	r3, #6
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006dfe:	ab09      	add	r3, sp, #36	; 0x24
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	ec49 8b10 	vmov	d0, r8, r9
 8006e06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	f8cd a004 	str.w	sl, [sp, #4]
 8006e10:	6861      	ldr	r1, [r4, #4]
 8006e12:	4628      	mov	r0, r5
 8006e14:	f7ff fee7 	bl	8006be6 <__cvt>
 8006e18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006e1c:	2b47      	cmp	r3, #71	; 0x47
 8006e1e:	4680      	mov	r8, r0
 8006e20:	d109      	bne.n	8006e36 <_printf_float+0x126>
 8006e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e24:	1cd8      	adds	r0, r3, #3
 8006e26:	db02      	blt.n	8006e2e <_printf_float+0x11e>
 8006e28:	6862      	ldr	r2, [r4, #4]
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	dd47      	ble.n	8006ebe <_printf_float+0x1ae>
 8006e2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e32:	fa5f fa8a 	uxtb.w	sl, sl
 8006e36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006e3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e3c:	d824      	bhi.n	8006e88 <_printf_float+0x178>
 8006e3e:	3901      	subs	r1, #1
 8006e40:	4652      	mov	r2, sl
 8006e42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e46:	9109      	str	r1, [sp, #36]	; 0x24
 8006e48:	f7ff ff2e 	bl	8006ca8 <__exponent>
 8006e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e4e:	1813      	adds	r3, r2, r0
 8006e50:	2a01      	cmp	r2, #1
 8006e52:	4681      	mov	r9, r0
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	dc02      	bgt.n	8006e5e <_printf_float+0x14e>
 8006e58:	6822      	ldr	r2, [r4, #0]
 8006e5a:	07d1      	lsls	r1, r2, #31
 8006e5c:	d501      	bpl.n	8006e62 <_printf_float+0x152>
 8006e5e:	3301      	adds	r3, #1
 8006e60:	6123      	str	r3, [r4, #16]
 8006e62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0a5      	beq.n	8006db6 <_printf_float+0xa6>
 8006e6a:	232d      	movs	r3, #45	; 0x2d
 8006e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e70:	e7a1      	b.n	8006db6 <_printf_float+0xa6>
 8006e72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006e76:	f000 8177 	beq.w	8007168 <_printf_float+0x458>
 8006e7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006e7e:	d1bb      	bne.n	8006df8 <_printf_float+0xe8>
 8006e80:	2900      	cmp	r1, #0
 8006e82:	d1b9      	bne.n	8006df8 <_printf_float+0xe8>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e7b6      	b.n	8006df6 <_printf_float+0xe6>
 8006e88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006e8c:	d119      	bne.n	8006ec2 <_printf_float+0x1b2>
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	6863      	ldr	r3, [r4, #4]
 8006e92:	dd0c      	ble.n	8006eae <_printf_float+0x19e>
 8006e94:	6121      	str	r1, [r4, #16]
 8006e96:	b913      	cbnz	r3, 8006e9e <_printf_float+0x18e>
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	07d2      	lsls	r2, r2, #31
 8006e9c:	d502      	bpl.n	8006ea4 <_printf_float+0x194>
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	440b      	add	r3, r1
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea6:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ea8:	f04f 0900 	mov.w	r9, #0
 8006eac:	e7d9      	b.n	8006e62 <_printf_float+0x152>
 8006eae:	b913      	cbnz	r3, 8006eb6 <_printf_float+0x1a6>
 8006eb0:	6822      	ldr	r2, [r4, #0]
 8006eb2:	07d0      	lsls	r0, r2, #31
 8006eb4:	d501      	bpl.n	8006eba <_printf_float+0x1aa>
 8006eb6:	3302      	adds	r3, #2
 8006eb8:	e7f3      	b.n	8006ea2 <_printf_float+0x192>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e7f1      	b.n	8006ea2 <_printf_float+0x192>
 8006ebe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006ec2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	db05      	blt.n	8006ed6 <_printf_float+0x1c6>
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	07d1      	lsls	r1, r2, #31
 8006ed0:	d5e8      	bpl.n	8006ea4 <_printf_float+0x194>
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	e7e5      	b.n	8006ea2 <_printf_float+0x192>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bfd4      	ite	le
 8006eda:	f1c3 0302 	rsble	r3, r3, #2
 8006ede:	2301      	movgt	r3, #1
 8006ee0:	4413      	add	r3, r2
 8006ee2:	e7de      	b.n	8006ea2 <_printf_float+0x192>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	055a      	lsls	r2, r3, #21
 8006ee8:	d407      	bmi.n	8006efa <_printf_float+0x1ea>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	4642      	mov	r2, r8
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d12b      	bne.n	8006f50 <_printf_float+0x240>
 8006ef8:	e767      	b.n	8006dca <_printf_float+0xba>
 8006efa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006efe:	f240 80dc 	bls.w	80070ba <_printf_float+0x3aa>
 8006f02:	2200      	movs	r2, #0
 8006f04:	2300      	movs	r3, #0
 8006f06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f0a:	f7f9 fe0d 	bl	8000b28 <__aeabi_dcmpeq>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d033      	beq.n	8006f7a <_printf_float+0x26a>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4a41      	ldr	r2, [pc, #260]	; (800701c <_printf_float+0x30c>)
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f af54 	beq.w	8006dca <_printf_float+0xba>
 8006f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f26:	429a      	cmp	r2, r3
 8006f28:	db02      	blt.n	8006f30 <_printf_float+0x220>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	07d8      	lsls	r0, r3, #31
 8006f2e:	d50f      	bpl.n	8006f50 <_printf_float+0x240>
 8006f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f af45 	beq.w	8006dca <_printf_float+0xba>
 8006f40:	f04f 0800 	mov.w	r8, #0
 8006f44:	f104 091a 	add.w	r9, r4, #26
 8006f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	dc09      	bgt.n	8006f64 <_printf_float+0x254>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	079b      	lsls	r3, r3, #30
 8006f54:	f100 8103 	bmi.w	800715e <_printf_float+0x44e>
 8006f58:	68e0      	ldr	r0, [r4, #12]
 8006f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f5c:	4298      	cmp	r0, r3
 8006f5e:	bfb8      	it	lt
 8006f60:	4618      	movlt	r0, r3
 8006f62:	e734      	b.n	8006dce <_printf_float+0xbe>
 8006f64:	2301      	movs	r3, #1
 8006f66:	464a      	mov	r2, r9
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f43f af2b 	beq.w	8006dca <_printf_float+0xba>
 8006f74:	f108 0801 	add.w	r8, r8, #1
 8006f78:	e7e6      	b.n	8006f48 <_printf_float+0x238>
 8006f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dc2b      	bgt.n	8006fd8 <_printf_float+0x2c8>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4a26      	ldr	r2, [pc, #152]	; (800701c <_printf_float+0x30c>)
 8006f84:	4631      	mov	r1, r6
 8006f86:	4628      	mov	r0, r5
 8006f88:	47b8      	blx	r7
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f43f af1d 	beq.w	8006dca <_printf_float+0xba>
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	b923      	cbnz	r3, 8006f9e <_printf_float+0x28e>
 8006f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f96:	b913      	cbnz	r3, 8006f9e <_printf_float+0x28e>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	07d9      	lsls	r1, r3, #31
 8006f9c:	d5d8      	bpl.n	8006f50 <_printf_float+0x240>
 8006f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f43f af0e 	beq.w	8006dca <_printf_float+0xba>
 8006fae:	f04f 0900 	mov.w	r9, #0
 8006fb2:	f104 0a1a 	add.w	sl, r4, #26
 8006fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb8:	425b      	negs	r3, r3
 8006fba:	454b      	cmp	r3, r9
 8006fbc:	dc01      	bgt.n	8006fc2 <_printf_float+0x2b2>
 8006fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc0:	e794      	b.n	8006eec <_printf_float+0x1dc>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4652      	mov	r2, sl
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f43f aefc 	beq.w	8006dca <_printf_float+0xba>
 8006fd2:	f109 0901 	add.w	r9, r9, #1
 8006fd6:	e7ee      	b.n	8006fb6 <_printf_float+0x2a6>
 8006fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	bfa8      	it	ge
 8006fe0:	461a      	movge	r2, r3
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	4691      	mov	r9, r2
 8006fe6:	dd07      	ble.n	8006ff8 <_printf_float+0x2e8>
 8006fe8:	4613      	mov	r3, r2
 8006fea:	4631      	mov	r1, r6
 8006fec:	4642      	mov	r2, r8
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f43f aee9 	beq.w	8006dca <_printf_float+0xba>
 8006ff8:	f104 031a 	add.w	r3, r4, #26
 8006ffc:	f04f 0b00 	mov.w	fp, #0
 8007000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007004:	9306      	str	r3, [sp, #24]
 8007006:	e015      	b.n	8007034 <_printf_float+0x324>
 8007008:	7fefffff 	.word	0x7fefffff
 800700c:	0800af20 	.word	0x0800af20
 8007010:	0800af1c 	.word	0x0800af1c
 8007014:	0800af28 	.word	0x0800af28
 8007018:	0800af24 	.word	0x0800af24
 800701c:	0800b0e3 	.word	0x0800b0e3
 8007020:	2301      	movs	r3, #1
 8007022:	9a06      	ldr	r2, [sp, #24]
 8007024:	4631      	mov	r1, r6
 8007026:	4628      	mov	r0, r5
 8007028:	47b8      	blx	r7
 800702a:	3001      	adds	r0, #1
 800702c:	f43f aecd 	beq.w	8006dca <_printf_float+0xba>
 8007030:	f10b 0b01 	add.w	fp, fp, #1
 8007034:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007038:	ebaa 0309 	sub.w	r3, sl, r9
 800703c:	455b      	cmp	r3, fp
 800703e:	dcef      	bgt.n	8007020 <_printf_float+0x310>
 8007040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007044:	429a      	cmp	r2, r3
 8007046:	44d0      	add	r8, sl
 8007048:	db15      	blt.n	8007076 <_printf_float+0x366>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	07da      	lsls	r2, r3, #31
 800704e:	d412      	bmi.n	8007076 <_printf_float+0x366>
 8007050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007052:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007054:	eba3 020a 	sub.w	r2, r3, sl
 8007058:	eba3 0a01 	sub.w	sl, r3, r1
 800705c:	4592      	cmp	sl, r2
 800705e:	bfa8      	it	ge
 8007060:	4692      	movge	sl, r2
 8007062:	f1ba 0f00 	cmp.w	sl, #0
 8007066:	dc0e      	bgt.n	8007086 <_printf_float+0x376>
 8007068:	f04f 0800 	mov.w	r8, #0
 800706c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007070:	f104 091a 	add.w	r9, r4, #26
 8007074:	e019      	b.n	80070aa <_printf_float+0x39a>
 8007076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	d1e5      	bne.n	8007050 <_printf_float+0x340>
 8007084:	e6a1      	b.n	8006dca <_printf_float+0xba>
 8007086:	4653      	mov	r3, sl
 8007088:	4642      	mov	r2, r8
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	d1e9      	bne.n	8007068 <_printf_float+0x358>
 8007094:	e699      	b.n	8006dca <_printf_float+0xba>
 8007096:	2301      	movs	r3, #1
 8007098:	464a      	mov	r2, r9
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f ae92 	beq.w	8006dca <_printf_float+0xba>
 80070a6:	f108 0801 	add.w	r8, r8, #1
 80070aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	eba3 030a 	sub.w	r3, r3, sl
 80070b4:	4543      	cmp	r3, r8
 80070b6:	dcee      	bgt.n	8007096 <_printf_float+0x386>
 80070b8:	e74a      	b.n	8006f50 <_printf_float+0x240>
 80070ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070bc:	2a01      	cmp	r2, #1
 80070be:	dc01      	bgt.n	80070c4 <_printf_float+0x3b4>
 80070c0:	07db      	lsls	r3, r3, #31
 80070c2:	d53a      	bpl.n	800713a <_printf_float+0x42a>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4642      	mov	r2, r8
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f ae7b 	beq.w	8006dca <_printf_float+0xba>
 80070d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f108 0801 	add.w	r8, r8, #1
 80070e4:	f43f ae71 	beq.w	8006dca <_printf_float+0xba>
 80070e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ea:	2200      	movs	r2, #0
 80070ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80070f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070f4:	2300      	movs	r3, #0
 80070f6:	f7f9 fd17 	bl	8000b28 <__aeabi_dcmpeq>
 80070fa:	b9c8      	cbnz	r0, 8007130 <_printf_float+0x420>
 80070fc:	4653      	mov	r3, sl
 80070fe:	4642      	mov	r2, r8
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	d10e      	bne.n	8007128 <_printf_float+0x418>
 800710a:	e65e      	b.n	8006dca <_printf_float+0xba>
 800710c:	2301      	movs	r3, #1
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f ae57 	beq.w	8006dca <_printf_float+0xba>
 800711c:	f108 0801 	add.w	r8, r8, #1
 8007120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007122:	3b01      	subs	r3, #1
 8007124:	4543      	cmp	r3, r8
 8007126:	dcf1      	bgt.n	800710c <_printf_float+0x3fc>
 8007128:	464b      	mov	r3, r9
 800712a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800712e:	e6de      	b.n	8006eee <_printf_float+0x1de>
 8007130:	f04f 0800 	mov.w	r8, #0
 8007134:	f104 0a1a 	add.w	sl, r4, #26
 8007138:	e7f2      	b.n	8007120 <_printf_float+0x410>
 800713a:	2301      	movs	r3, #1
 800713c:	e7df      	b.n	80070fe <_printf_float+0x3ee>
 800713e:	2301      	movs	r3, #1
 8007140:	464a      	mov	r2, r9
 8007142:	4631      	mov	r1, r6
 8007144:	4628      	mov	r0, r5
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	f43f ae3e 	beq.w	8006dca <_printf_float+0xba>
 800714e:	f108 0801 	add.w	r8, r8, #1
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	4543      	cmp	r3, r8
 800715a:	dcf0      	bgt.n	800713e <_printf_float+0x42e>
 800715c:	e6fc      	b.n	8006f58 <_printf_float+0x248>
 800715e:	f04f 0800 	mov.w	r8, #0
 8007162:	f104 0919 	add.w	r9, r4, #25
 8007166:	e7f4      	b.n	8007152 <_printf_float+0x442>
 8007168:	2900      	cmp	r1, #0
 800716a:	f43f ae8b 	beq.w	8006e84 <_printf_float+0x174>
 800716e:	2300      	movs	r3, #0
 8007170:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007174:	ab09      	add	r3, sp, #36	; 0x24
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	ec49 8b10 	vmov	d0, r8, r9
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	f8cd a004 	str.w	sl, [sp, #4]
 8007182:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007186:	4628      	mov	r0, r5
 8007188:	f7ff fd2d 	bl	8006be6 <__cvt>
 800718c:	4680      	mov	r8, r0
 800718e:	e648      	b.n	8006e22 <_printf_float+0x112>

08007190 <_printf_common>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	4691      	mov	r9, r2
 8007196:	461f      	mov	r7, r3
 8007198:	688a      	ldr	r2, [r1, #8]
 800719a:	690b      	ldr	r3, [r1, #16]
 800719c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	bfb8      	it	lt
 80071a4:	4613      	movlt	r3, r2
 80071a6:	f8c9 3000 	str.w	r3, [r9]
 80071aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071ae:	4606      	mov	r6, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	b112      	cbz	r2, 80071ba <_printf_common+0x2a>
 80071b4:	3301      	adds	r3, #1
 80071b6:	f8c9 3000 	str.w	r3, [r9]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80071c4:	3302      	addmi	r3, #2
 80071c6:	f8c9 3000 	strmi.w	r3, [r9]
 80071ca:	6825      	ldr	r5, [r4, #0]
 80071cc:	f015 0506 	ands.w	r5, r5, #6
 80071d0:	d107      	bne.n	80071e2 <_printf_common+0x52>
 80071d2:	f104 0a19 	add.w	sl, r4, #25
 80071d6:	68e3      	ldr	r3, [r4, #12]
 80071d8:	f8d9 2000 	ldr.w	r2, [r9]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	42ab      	cmp	r3, r5
 80071e0:	dc28      	bgt.n	8007234 <_printf_common+0xa4>
 80071e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	3300      	adds	r3, #0
 80071ea:	bf18      	it	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	0692      	lsls	r2, r2, #26
 80071f0:	d42d      	bmi.n	800724e <_printf_common+0xbe>
 80071f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f6:	4639      	mov	r1, r7
 80071f8:	4630      	mov	r0, r6
 80071fa:	47c0      	blx	r8
 80071fc:	3001      	adds	r0, #1
 80071fe:	d020      	beq.n	8007242 <_printf_common+0xb2>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	68e5      	ldr	r5, [r4, #12]
 8007204:	f8d9 2000 	ldr.w	r2, [r9]
 8007208:	f003 0306 	and.w	r3, r3, #6
 800720c:	2b04      	cmp	r3, #4
 800720e:	bf08      	it	eq
 8007210:	1aad      	subeq	r5, r5, r2
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	6922      	ldr	r2, [r4, #16]
 8007216:	bf0c      	ite	eq
 8007218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800721c:	2500      	movne	r5, #0
 800721e:	4293      	cmp	r3, r2
 8007220:	bfc4      	itt	gt
 8007222:	1a9b      	subgt	r3, r3, r2
 8007224:	18ed      	addgt	r5, r5, r3
 8007226:	f04f 0900 	mov.w	r9, #0
 800722a:	341a      	adds	r4, #26
 800722c:	454d      	cmp	r5, r9
 800722e:	d11a      	bne.n	8007266 <_printf_common+0xd6>
 8007230:	2000      	movs	r0, #0
 8007232:	e008      	b.n	8007246 <_printf_common+0xb6>
 8007234:	2301      	movs	r3, #1
 8007236:	4652      	mov	r2, sl
 8007238:	4639      	mov	r1, r7
 800723a:	4630      	mov	r0, r6
 800723c:	47c0      	blx	r8
 800723e:	3001      	adds	r0, #1
 8007240:	d103      	bne.n	800724a <_printf_common+0xba>
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	3501      	adds	r5, #1
 800724c:	e7c3      	b.n	80071d6 <_printf_common+0x46>
 800724e:	18e1      	adds	r1, r4, r3
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	2030      	movs	r0, #48	; 0x30
 8007254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007258:	4422      	add	r2, r4
 800725a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800725e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007262:	3302      	adds	r3, #2
 8007264:	e7c5      	b.n	80071f2 <_printf_common+0x62>
 8007266:	2301      	movs	r3, #1
 8007268:	4622      	mov	r2, r4
 800726a:	4639      	mov	r1, r7
 800726c:	4630      	mov	r0, r6
 800726e:	47c0      	blx	r8
 8007270:	3001      	adds	r0, #1
 8007272:	d0e6      	beq.n	8007242 <_printf_common+0xb2>
 8007274:	f109 0901 	add.w	r9, r9, #1
 8007278:	e7d8      	b.n	800722c <_printf_common+0x9c>
	...

0800727c <_printf_i>:
 800727c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007284:	460c      	mov	r4, r1
 8007286:	7e09      	ldrb	r1, [r1, #24]
 8007288:	b085      	sub	sp, #20
 800728a:	296e      	cmp	r1, #110	; 0x6e
 800728c:	4617      	mov	r7, r2
 800728e:	4606      	mov	r6, r0
 8007290:	4698      	mov	r8, r3
 8007292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007294:	f000 80b3 	beq.w	80073fe <_printf_i+0x182>
 8007298:	d822      	bhi.n	80072e0 <_printf_i+0x64>
 800729a:	2963      	cmp	r1, #99	; 0x63
 800729c:	d036      	beq.n	800730c <_printf_i+0x90>
 800729e:	d80a      	bhi.n	80072b6 <_printf_i+0x3a>
 80072a0:	2900      	cmp	r1, #0
 80072a2:	f000 80b9 	beq.w	8007418 <_printf_i+0x19c>
 80072a6:	2958      	cmp	r1, #88	; 0x58
 80072a8:	f000 8083 	beq.w	80073b2 <_printf_i+0x136>
 80072ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80072b4:	e032      	b.n	800731c <_printf_i+0xa0>
 80072b6:	2964      	cmp	r1, #100	; 0x64
 80072b8:	d001      	beq.n	80072be <_printf_i+0x42>
 80072ba:	2969      	cmp	r1, #105	; 0x69
 80072bc:	d1f6      	bne.n	80072ac <_printf_i+0x30>
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	6813      	ldr	r3, [r2, #0]
 80072c2:	0605      	lsls	r5, r0, #24
 80072c4:	f103 0104 	add.w	r1, r3, #4
 80072c8:	d52a      	bpl.n	8007320 <_printf_i+0xa4>
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6011      	str	r1, [r2, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da03      	bge.n	80072da <_printf_i+0x5e>
 80072d2:	222d      	movs	r2, #45	; 0x2d
 80072d4:	425b      	negs	r3, r3
 80072d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80072da:	486f      	ldr	r0, [pc, #444]	; (8007498 <_printf_i+0x21c>)
 80072dc:	220a      	movs	r2, #10
 80072de:	e039      	b.n	8007354 <_printf_i+0xd8>
 80072e0:	2973      	cmp	r1, #115	; 0x73
 80072e2:	f000 809d 	beq.w	8007420 <_printf_i+0x1a4>
 80072e6:	d808      	bhi.n	80072fa <_printf_i+0x7e>
 80072e8:	296f      	cmp	r1, #111	; 0x6f
 80072ea:	d020      	beq.n	800732e <_printf_i+0xb2>
 80072ec:	2970      	cmp	r1, #112	; 0x70
 80072ee:	d1dd      	bne.n	80072ac <_printf_i+0x30>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	f043 0320 	orr.w	r3, r3, #32
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	e003      	b.n	8007302 <_printf_i+0x86>
 80072fa:	2975      	cmp	r1, #117	; 0x75
 80072fc:	d017      	beq.n	800732e <_printf_i+0xb2>
 80072fe:	2978      	cmp	r1, #120	; 0x78
 8007300:	d1d4      	bne.n	80072ac <_printf_i+0x30>
 8007302:	2378      	movs	r3, #120	; 0x78
 8007304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007308:	4864      	ldr	r0, [pc, #400]	; (800749c <_printf_i+0x220>)
 800730a:	e055      	b.n	80073b8 <_printf_i+0x13c>
 800730c:	6813      	ldr	r3, [r2, #0]
 800730e:	1d19      	adds	r1, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6011      	str	r1, [r2, #0]
 8007314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800731c:	2301      	movs	r3, #1
 800731e:	e08c      	b.n	800743a <_printf_i+0x1be>
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6011      	str	r1, [r2, #0]
 8007324:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007328:	bf18      	it	ne
 800732a:	b21b      	sxthne	r3, r3
 800732c:	e7cf      	b.n	80072ce <_printf_i+0x52>
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	6825      	ldr	r5, [r4, #0]
 8007332:	1d18      	adds	r0, r3, #4
 8007334:	6010      	str	r0, [r2, #0]
 8007336:	0628      	lsls	r0, r5, #24
 8007338:	d501      	bpl.n	800733e <_printf_i+0xc2>
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	e002      	b.n	8007344 <_printf_i+0xc8>
 800733e:	0668      	lsls	r0, r5, #25
 8007340:	d5fb      	bpl.n	800733a <_printf_i+0xbe>
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	4854      	ldr	r0, [pc, #336]	; (8007498 <_printf_i+0x21c>)
 8007346:	296f      	cmp	r1, #111	; 0x6f
 8007348:	bf14      	ite	ne
 800734a:	220a      	movne	r2, #10
 800734c:	2208      	moveq	r2, #8
 800734e:	2100      	movs	r1, #0
 8007350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007354:	6865      	ldr	r5, [r4, #4]
 8007356:	60a5      	str	r5, [r4, #8]
 8007358:	2d00      	cmp	r5, #0
 800735a:	f2c0 8095 	blt.w	8007488 <_printf_i+0x20c>
 800735e:	6821      	ldr	r1, [r4, #0]
 8007360:	f021 0104 	bic.w	r1, r1, #4
 8007364:	6021      	str	r1, [r4, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d13d      	bne.n	80073e6 <_printf_i+0x16a>
 800736a:	2d00      	cmp	r5, #0
 800736c:	f040 808e 	bne.w	800748c <_printf_i+0x210>
 8007370:	4665      	mov	r5, ip
 8007372:	2a08      	cmp	r2, #8
 8007374:	d10b      	bne.n	800738e <_printf_i+0x112>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	07db      	lsls	r3, r3, #31
 800737a:	d508      	bpl.n	800738e <_printf_i+0x112>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	6862      	ldr	r2, [r4, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	bfde      	ittt	le
 8007384:	2330      	movle	r3, #48	; 0x30
 8007386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800738a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800738e:	ebac 0305 	sub.w	r3, ip, r5
 8007392:	6123      	str	r3, [r4, #16]
 8007394:	f8cd 8000 	str.w	r8, [sp]
 8007398:	463b      	mov	r3, r7
 800739a:	aa03      	add	r2, sp, #12
 800739c:	4621      	mov	r1, r4
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff fef6 	bl	8007190 <_printf_common>
 80073a4:	3001      	adds	r0, #1
 80073a6:	d14d      	bne.n	8007444 <_printf_i+0x1c8>
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	b005      	add	sp, #20
 80073ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073b2:	4839      	ldr	r0, [pc, #228]	; (8007498 <_printf_i+0x21c>)
 80073b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	6821      	ldr	r1, [r4, #0]
 80073bc:	1d1d      	adds	r5, r3, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6015      	str	r5, [r2, #0]
 80073c2:	060a      	lsls	r2, r1, #24
 80073c4:	d50b      	bpl.n	80073de <_printf_i+0x162>
 80073c6:	07ca      	lsls	r2, r1, #31
 80073c8:	bf44      	itt	mi
 80073ca:	f041 0120 	orrmi.w	r1, r1, #32
 80073ce:	6021      	strmi	r1, [r4, #0]
 80073d0:	b91b      	cbnz	r3, 80073da <_printf_i+0x15e>
 80073d2:	6822      	ldr	r2, [r4, #0]
 80073d4:	f022 0220 	bic.w	r2, r2, #32
 80073d8:	6022      	str	r2, [r4, #0]
 80073da:	2210      	movs	r2, #16
 80073dc:	e7b7      	b.n	800734e <_printf_i+0xd2>
 80073de:	064d      	lsls	r5, r1, #25
 80073e0:	bf48      	it	mi
 80073e2:	b29b      	uxthmi	r3, r3
 80073e4:	e7ef      	b.n	80073c6 <_printf_i+0x14a>
 80073e6:	4665      	mov	r5, ip
 80073e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80073ec:	fb02 3311 	mls	r3, r2, r1, r3
 80073f0:	5cc3      	ldrb	r3, [r0, r3]
 80073f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80073f6:	460b      	mov	r3, r1
 80073f8:	2900      	cmp	r1, #0
 80073fa:	d1f5      	bne.n	80073e8 <_printf_i+0x16c>
 80073fc:	e7b9      	b.n	8007372 <_printf_i+0xf6>
 80073fe:	6813      	ldr	r3, [r2, #0]
 8007400:	6825      	ldr	r5, [r4, #0]
 8007402:	6961      	ldr	r1, [r4, #20]
 8007404:	1d18      	adds	r0, r3, #4
 8007406:	6010      	str	r0, [r2, #0]
 8007408:	0628      	lsls	r0, r5, #24
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	d501      	bpl.n	8007412 <_printf_i+0x196>
 800740e:	6019      	str	r1, [r3, #0]
 8007410:	e002      	b.n	8007418 <_printf_i+0x19c>
 8007412:	066a      	lsls	r2, r5, #25
 8007414:	d5fb      	bpl.n	800740e <_printf_i+0x192>
 8007416:	8019      	strh	r1, [r3, #0]
 8007418:	2300      	movs	r3, #0
 800741a:	6123      	str	r3, [r4, #16]
 800741c:	4665      	mov	r5, ip
 800741e:	e7b9      	b.n	8007394 <_printf_i+0x118>
 8007420:	6813      	ldr	r3, [r2, #0]
 8007422:	1d19      	adds	r1, r3, #4
 8007424:	6011      	str	r1, [r2, #0]
 8007426:	681d      	ldr	r5, [r3, #0]
 8007428:	6862      	ldr	r2, [r4, #4]
 800742a:	2100      	movs	r1, #0
 800742c:	4628      	mov	r0, r5
 800742e:	f7f8 ff07 	bl	8000240 <memchr>
 8007432:	b108      	cbz	r0, 8007438 <_printf_i+0x1bc>
 8007434:	1b40      	subs	r0, r0, r5
 8007436:	6060      	str	r0, [r4, #4]
 8007438:	6863      	ldr	r3, [r4, #4]
 800743a:	6123      	str	r3, [r4, #16]
 800743c:	2300      	movs	r3, #0
 800743e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007442:	e7a7      	b.n	8007394 <_printf_i+0x118>
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	462a      	mov	r2, r5
 8007448:	4639      	mov	r1, r7
 800744a:	4630      	mov	r0, r6
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d0aa      	beq.n	80073a8 <_printf_i+0x12c>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	079b      	lsls	r3, r3, #30
 8007456:	d413      	bmi.n	8007480 <_printf_i+0x204>
 8007458:	68e0      	ldr	r0, [r4, #12]
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	4298      	cmp	r0, r3
 800745e:	bfb8      	it	lt
 8007460:	4618      	movlt	r0, r3
 8007462:	e7a3      	b.n	80073ac <_printf_i+0x130>
 8007464:	2301      	movs	r3, #1
 8007466:	464a      	mov	r2, r9
 8007468:	4639      	mov	r1, r7
 800746a:	4630      	mov	r0, r6
 800746c:	47c0      	blx	r8
 800746e:	3001      	adds	r0, #1
 8007470:	d09a      	beq.n	80073a8 <_printf_i+0x12c>
 8007472:	3501      	adds	r5, #1
 8007474:	68e3      	ldr	r3, [r4, #12]
 8007476:	9a03      	ldr	r2, [sp, #12]
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	42ab      	cmp	r3, r5
 800747c:	dcf2      	bgt.n	8007464 <_printf_i+0x1e8>
 800747e:	e7eb      	b.n	8007458 <_printf_i+0x1dc>
 8007480:	2500      	movs	r5, #0
 8007482:	f104 0919 	add.w	r9, r4, #25
 8007486:	e7f5      	b.n	8007474 <_printf_i+0x1f8>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1ac      	bne.n	80073e6 <_printf_i+0x16a>
 800748c:	7803      	ldrb	r3, [r0, #0]
 800748e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007496:	e76c      	b.n	8007372 <_printf_i+0xf6>
 8007498:	0800af2c 	.word	0x0800af2c
 800749c:	0800af3d 	.word	0x0800af3d

080074a0 <_scanf_float>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	469a      	mov	sl, r3
 80074a6:	688b      	ldr	r3, [r1, #8]
 80074a8:	4616      	mov	r6, r2
 80074aa:	1e5a      	subs	r2, r3, #1
 80074ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80074b0:	b087      	sub	sp, #28
 80074b2:	bf83      	ittte	hi
 80074b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80074b8:	189b      	addhi	r3, r3, r2
 80074ba:	9301      	strhi	r3, [sp, #4]
 80074bc:	2300      	movls	r3, #0
 80074be:	bf86      	itte	hi
 80074c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80074c4:	608b      	strhi	r3, [r1, #8]
 80074c6:	9301      	strls	r3, [sp, #4]
 80074c8:	680b      	ldr	r3, [r1, #0]
 80074ca:	4688      	mov	r8, r1
 80074cc:	f04f 0b00 	mov.w	fp, #0
 80074d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80074d4:	f848 3b1c 	str.w	r3, [r8], #28
 80074d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80074dc:	4607      	mov	r7, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	4645      	mov	r5, r8
 80074e2:	465a      	mov	r2, fp
 80074e4:	46d9      	mov	r9, fp
 80074e6:	f8cd b008 	str.w	fp, [sp, #8]
 80074ea:	68a1      	ldr	r1, [r4, #8]
 80074ec:	b181      	cbz	r1, 8007510 <_scanf_float+0x70>
 80074ee:	6833      	ldr	r3, [r6, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b49      	cmp	r3, #73	; 0x49
 80074f4:	d071      	beq.n	80075da <_scanf_float+0x13a>
 80074f6:	d84d      	bhi.n	8007594 <_scanf_float+0xf4>
 80074f8:	2b39      	cmp	r3, #57	; 0x39
 80074fa:	d840      	bhi.n	800757e <_scanf_float+0xde>
 80074fc:	2b31      	cmp	r3, #49	; 0x31
 80074fe:	f080 8088 	bcs.w	8007612 <_scanf_float+0x172>
 8007502:	2b2d      	cmp	r3, #45	; 0x2d
 8007504:	f000 8090 	beq.w	8007628 <_scanf_float+0x188>
 8007508:	d815      	bhi.n	8007536 <_scanf_float+0x96>
 800750a:	2b2b      	cmp	r3, #43	; 0x2b
 800750c:	f000 808c 	beq.w	8007628 <_scanf_float+0x188>
 8007510:	f1b9 0f00 	cmp.w	r9, #0
 8007514:	d003      	beq.n	800751e <_scanf_float+0x7e>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	3a01      	subs	r2, #1
 8007520:	2a01      	cmp	r2, #1
 8007522:	f200 80ea 	bhi.w	80076fa <_scanf_float+0x25a>
 8007526:	4545      	cmp	r5, r8
 8007528:	f200 80dc 	bhi.w	80076e4 <_scanf_float+0x244>
 800752c:	2601      	movs	r6, #1
 800752e:	4630      	mov	r0, r6
 8007530:	b007      	add	sp, #28
 8007532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007536:	2b2e      	cmp	r3, #46	; 0x2e
 8007538:	f000 809f 	beq.w	800767a <_scanf_float+0x1da>
 800753c:	2b30      	cmp	r3, #48	; 0x30
 800753e:	d1e7      	bne.n	8007510 <_scanf_float+0x70>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007546:	d064      	beq.n	8007612 <_scanf_float+0x172>
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	f109 0901 	add.w	r9, r9, #1
 8007554:	b11b      	cbz	r3, 800755e <_scanf_float+0xbe>
 8007556:	3b01      	subs	r3, #1
 8007558:	3101      	adds	r1, #1
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	60a1      	str	r1, [r4, #8]
 800755e:	68a3      	ldr	r3, [r4, #8]
 8007560:	3b01      	subs	r3, #1
 8007562:	60a3      	str	r3, [r4, #8]
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	3301      	adds	r3, #1
 8007568:	6123      	str	r3, [r4, #16]
 800756a:	6873      	ldr	r3, [r6, #4]
 800756c:	3b01      	subs	r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	6073      	str	r3, [r6, #4]
 8007572:	f340 80ac 	ble.w	80076ce <_scanf_float+0x22e>
 8007576:	6833      	ldr	r3, [r6, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	e7b5      	b.n	80074ea <_scanf_float+0x4a>
 800757e:	2b45      	cmp	r3, #69	; 0x45
 8007580:	f000 8085 	beq.w	800768e <_scanf_float+0x1ee>
 8007584:	2b46      	cmp	r3, #70	; 0x46
 8007586:	d06a      	beq.n	800765e <_scanf_float+0x1be>
 8007588:	2b41      	cmp	r3, #65	; 0x41
 800758a:	d1c1      	bne.n	8007510 <_scanf_float+0x70>
 800758c:	2a01      	cmp	r2, #1
 800758e:	d1bf      	bne.n	8007510 <_scanf_float+0x70>
 8007590:	2202      	movs	r2, #2
 8007592:	e046      	b.n	8007622 <_scanf_float+0x182>
 8007594:	2b65      	cmp	r3, #101	; 0x65
 8007596:	d07a      	beq.n	800768e <_scanf_float+0x1ee>
 8007598:	d818      	bhi.n	80075cc <_scanf_float+0x12c>
 800759a:	2b54      	cmp	r3, #84	; 0x54
 800759c:	d066      	beq.n	800766c <_scanf_float+0x1cc>
 800759e:	d811      	bhi.n	80075c4 <_scanf_float+0x124>
 80075a0:	2b4e      	cmp	r3, #78	; 0x4e
 80075a2:	d1b5      	bne.n	8007510 <_scanf_float+0x70>
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	d146      	bne.n	8007636 <_scanf_float+0x196>
 80075a8:	f1b9 0f00 	cmp.w	r9, #0
 80075ac:	d145      	bne.n	800763a <_scanf_float+0x19a>
 80075ae:	6821      	ldr	r1, [r4, #0]
 80075b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80075b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80075b8:	d13f      	bne.n	800763a <_scanf_float+0x19a>
 80075ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80075be:	6021      	str	r1, [r4, #0]
 80075c0:	2201      	movs	r2, #1
 80075c2:	e02e      	b.n	8007622 <_scanf_float+0x182>
 80075c4:	2b59      	cmp	r3, #89	; 0x59
 80075c6:	d01e      	beq.n	8007606 <_scanf_float+0x166>
 80075c8:	2b61      	cmp	r3, #97	; 0x61
 80075ca:	e7de      	b.n	800758a <_scanf_float+0xea>
 80075cc:	2b6e      	cmp	r3, #110	; 0x6e
 80075ce:	d0e9      	beq.n	80075a4 <_scanf_float+0x104>
 80075d0:	d815      	bhi.n	80075fe <_scanf_float+0x15e>
 80075d2:	2b66      	cmp	r3, #102	; 0x66
 80075d4:	d043      	beq.n	800765e <_scanf_float+0x1be>
 80075d6:	2b69      	cmp	r3, #105	; 0x69
 80075d8:	d19a      	bne.n	8007510 <_scanf_float+0x70>
 80075da:	f1bb 0f00 	cmp.w	fp, #0
 80075de:	d138      	bne.n	8007652 <_scanf_float+0x1b2>
 80075e0:	f1b9 0f00 	cmp.w	r9, #0
 80075e4:	d197      	bne.n	8007516 <_scanf_float+0x76>
 80075e6:	6821      	ldr	r1, [r4, #0]
 80075e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80075ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80075f0:	d195      	bne.n	800751e <_scanf_float+0x7e>
 80075f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80075f6:	6021      	str	r1, [r4, #0]
 80075f8:	f04f 0b01 	mov.w	fp, #1
 80075fc:	e011      	b.n	8007622 <_scanf_float+0x182>
 80075fe:	2b74      	cmp	r3, #116	; 0x74
 8007600:	d034      	beq.n	800766c <_scanf_float+0x1cc>
 8007602:	2b79      	cmp	r3, #121	; 0x79
 8007604:	d184      	bne.n	8007510 <_scanf_float+0x70>
 8007606:	f1bb 0f07 	cmp.w	fp, #7
 800760a:	d181      	bne.n	8007510 <_scanf_float+0x70>
 800760c:	f04f 0b08 	mov.w	fp, #8
 8007610:	e007      	b.n	8007622 <_scanf_float+0x182>
 8007612:	eb12 0f0b 	cmn.w	r2, fp
 8007616:	f47f af7b 	bne.w	8007510 <_scanf_float+0x70>
 800761a:	6821      	ldr	r1, [r4, #0]
 800761c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007620:	6021      	str	r1, [r4, #0]
 8007622:	702b      	strb	r3, [r5, #0]
 8007624:	3501      	adds	r5, #1
 8007626:	e79a      	b.n	800755e <_scanf_float+0xbe>
 8007628:	6821      	ldr	r1, [r4, #0]
 800762a:	0608      	lsls	r0, r1, #24
 800762c:	f57f af70 	bpl.w	8007510 <_scanf_float+0x70>
 8007630:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007634:	e7f4      	b.n	8007620 <_scanf_float+0x180>
 8007636:	2a02      	cmp	r2, #2
 8007638:	d047      	beq.n	80076ca <_scanf_float+0x22a>
 800763a:	f1bb 0f01 	cmp.w	fp, #1
 800763e:	d003      	beq.n	8007648 <_scanf_float+0x1a8>
 8007640:	f1bb 0f04 	cmp.w	fp, #4
 8007644:	f47f af64 	bne.w	8007510 <_scanf_float+0x70>
 8007648:	f10b 0b01 	add.w	fp, fp, #1
 800764c:	fa5f fb8b 	uxtb.w	fp, fp
 8007650:	e7e7      	b.n	8007622 <_scanf_float+0x182>
 8007652:	f1bb 0f03 	cmp.w	fp, #3
 8007656:	d0f7      	beq.n	8007648 <_scanf_float+0x1a8>
 8007658:	f1bb 0f05 	cmp.w	fp, #5
 800765c:	e7f2      	b.n	8007644 <_scanf_float+0x1a4>
 800765e:	f1bb 0f02 	cmp.w	fp, #2
 8007662:	f47f af55 	bne.w	8007510 <_scanf_float+0x70>
 8007666:	f04f 0b03 	mov.w	fp, #3
 800766a:	e7da      	b.n	8007622 <_scanf_float+0x182>
 800766c:	f1bb 0f06 	cmp.w	fp, #6
 8007670:	f47f af4e 	bne.w	8007510 <_scanf_float+0x70>
 8007674:	f04f 0b07 	mov.w	fp, #7
 8007678:	e7d3      	b.n	8007622 <_scanf_float+0x182>
 800767a:	6821      	ldr	r1, [r4, #0]
 800767c:	0588      	lsls	r0, r1, #22
 800767e:	f57f af47 	bpl.w	8007510 <_scanf_float+0x70>
 8007682:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007686:	6021      	str	r1, [r4, #0]
 8007688:	f8cd 9008 	str.w	r9, [sp, #8]
 800768c:	e7c9      	b.n	8007622 <_scanf_float+0x182>
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007694:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007698:	d006      	beq.n	80076a8 <_scanf_float+0x208>
 800769a:	0548      	lsls	r0, r1, #21
 800769c:	f57f af38 	bpl.w	8007510 <_scanf_float+0x70>
 80076a0:	f1b9 0f00 	cmp.w	r9, #0
 80076a4:	f43f af3b 	beq.w	800751e <_scanf_float+0x7e>
 80076a8:	0588      	lsls	r0, r1, #22
 80076aa:	bf58      	it	pl
 80076ac:	9802      	ldrpl	r0, [sp, #8]
 80076ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80076b2:	bf58      	it	pl
 80076b4:	eba9 0000 	subpl.w	r0, r9, r0
 80076b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80076bc:	bf58      	it	pl
 80076be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80076c2:	6021      	str	r1, [r4, #0]
 80076c4:	f04f 0900 	mov.w	r9, #0
 80076c8:	e7ab      	b.n	8007622 <_scanf_float+0x182>
 80076ca:	2203      	movs	r2, #3
 80076cc:	e7a9      	b.n	8007622 <_scanf_float+0x182>
 80076ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80076d2:	9205      	str	r2, [sp, #20]
 80076d4:	4631      	mov	r1, r6
 80076d6:	4638      	mov	r0, r7
 80076d8:	4798      	blx	r3
 80076da:	9a05      	ldr	r2, [sp, #20]
 80076dc:	2800      	cmp	r0, #0
 80076de:	f43f af04 	beq.w	80074ea <_scanf_float+0x4a>
 80076e2:	e715      	b.n	8007510 <_scanf_float+0x70>
 80076e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80076ec:	4632      	mov	r2, r6
 80076ee:	4638      	mov	r0, r7
 80076f0:	4798      	blx	r3
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	6123      	str	r3, [r4, #16]
 80076f8:	e715      	b.n	8007526 <_scanf_float+0x86>
 80076fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d80a      	bhi.n	8007718 <_scanf_float+0x278>
 8007702:	f1bb 0f02 	cmp.w	fp, #2
 8007706:	d968      	bls.n	80077da <_scanf_float+0x33a>
 8007708:	f1ab 0b03 	sub.w	fp, fp, #3
 800770c:	fa5f fb8b 	uxtb.w	fp, fp
 8007710:	eba5 0b0b 	sub.w	fp, r5, fp
 8007714:	455d      	cmp	r5, fp
 8007716:	d14b      	bne.n	80077b0 <_scanf_float+0x310>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	05da      	lsls	r2, r3, #23
 800771c:	d51f      	bpl.n	800775e <_scanf_float+0x2be>
 800771e:	055b      	lsls	r3, r3, #21
 8007720:	d468      	bmi.n	80077f4 <_scanf_float+0x354>
 8007722:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	2965      	cmp	r1, #101	; 0x65
 800772a:	f103 33ff 	add.w	r3, r3, #4294967295
 800772e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007732:	6123      	str	r3, [r4, #16]
 8007734:	d00d      	beq.n	8007752 <_scanf_float+0x2b2>
 8007736:	2945      	cmp	r1, #69	; 0x45
 8007738:	d00b      	beq.n	8007752 <_scanf_float+0x2b2>
 800773a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800773e:	4632      	mov	r2, r6
 8007740:	4638      	mov	r0, r7
 8007742:	4798      	blx	r3
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800774a:	3b01      	subs	r3, #1
 800774c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007756:	4632      	mov	r2, r6
 8007758:	4638      	mov	r0, r7
 800775a:	4798      	blx	r3
 800775c:	465d      	mov	r5, fp
 800775e:	6826      	ldr	r6, [r4, #0]
 8007760:	f016 0610 	ands.w	r6, r6, #16
 8007764:	d17a      	bne.n	800785c <_scanf_float+0x3bc>
 8007766:	702e      	strb	r6, [r5, #0]
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007772:	d142      	bne.n	80077fa <_scanf_float+0x35a>
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	eba9 0303 	sub.w	r3, r9, r3
 800777a:	425a      	negs	r2, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d149      	bne.n	8007814 <_scanf_float+0x374>
 8007780:	2200      	movs	r2, #0
 8007782:	4641      	mov	r1, r8
 8007784:	4638      	mov	r0, r7
 8007786:	f000 fecf 	bl	8008528 <_strtod_r>
 800778a:	6825      	ldr	r5, [r4, #0]
 800778c:	f8da 3000 	ldr.w	r3, [sl]
 8007790:	f015 0f02 	tst.w	r5, #2
 8007794:	f103 0204 	add.w	r2, r3, #4
 8007798:	ec59 8b10 	vmov	r8, r9, d0
 800779c:	f8ca 2000 	str.w	r2, [sl]
 80077a0:	d043      	beq.n	800782a <_scanf_float+0x38a>
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	e9c3 8900 	strd	r8, r9, [r3]
 80077a8:	68e3      	ldr	r3, [r4, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	60e3      	str	r3, [r4, #12]
 80077ae:	e6be      	b.n	800752e <_scanf_float+0x8e>
 80077b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80077b8:	4632      	mov	r2, r6
 80077ba:	4638      	mov	r0, r7
 80077bc:	4798      	blx	r3
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	e7a6      	b.n	8007714 <_scanf_float+0x274>
 80077c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80077ce:	4632      	mov	r2, r6
 80077d0:	4638      	mov	r0, r7
 80077d2:	4798      	blx	r3
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	4545      	cmp	r5, r8
 80077dc:	d8f3      	bhi.n	80077c6 <_scanf_float+0x326>
 80077de:	e6a5      	b.n	800752c <_scanf_float+0x8c>
 80077e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80077e8:	4632      	mov	r2, r6
 80077ea:	4638      	mov	r0, r7
 80077ec:	4798      	blx	r3
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	6123      	str	r3, [r4, #16]
 80077f4:	4545      	cmp	r5, r8
 80077f6:	d8f3      	bhi.n	80077e0 <_scanf_float+0x340>
 80077f8:	e698      	b.n	800752c <_scanf_float+0x8c>
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0bf      	beq.n	8007780 <_scanf_float+0x2e0>
 8007800:	9904      	ldr	r1, [sp, #16]
 8007802:	230a      	movs	r3, #10
 8007804:	4632      	mov	r2, r6
 8007806:	3101      	adds	r1, #1
 8007808:	4638      	mov	r0, r7
 800780a:	f000 ff19 	bl	8008640 <_strtol_r>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	9d04      	ldr	r5, [sp, #16]
 8007812:	1ac2      	subs	r2, r0, r3
 8007814:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007818:	429d      	cmp	r5, r3
 800781a:	bf28      	it	cs
 800781c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007820:	490f      	ldr	r1, [pc, #60]	; (8007860 <_scanf_float+0x3c0>)
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f824 	bl	8007870 <siprintf>
 8007828:	e7aa      	b.n	8007780 <_scanf_float+0x2e0>
 800782a:	f015 0504 	ands.w	r5, r5, #4
 800782e:	d1b8      	bne.n	80077a2 <_scanf_float+0x302>
 8007830:	681f      	ldr	r7, [r3, #0]
 8007832:	ee10 2a10 	vmov	r2, s0
 8007836:	464b      	mov	r3, r9
 8007838:	ee10 0a10 	vmov	r0, s0
 800783c:	4649      	mov	r1, r9
 800783e:	f7f9 f9a5 	bl	8000b8c <__aeabi_dcmpun>
 8007842:	b128      	cbz	r0, 8007850 <_scanf_float+0x3b0>
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f80d 	bl	8007864 <nanf>
 800784a:	ed87 0a00 	vstr	s0, [r7]
 800784e:	e7ab      	b.n	80077a8 <_scanf_float+0x308>
 8007850:	4640      	mov	r0, r8
 8007852:	4649      	mov	r1, r9
 8007854:	f7f9 f9f8 	bl	8000c48 <__aeabi_d2f>
 8007858:	6038      	str	r0, [r7, #0]
 800785a:	e7a5      	b.n	80077a8 <_scanf_float+0x308>
 800785c:	2600      	movs	r6, #0
 800785e:	e666      	b.n	800752e <_scanf_float+0x8e>
 8007860:	0800af4e 	.word	0x0800af4e

08007864 <nanf>:
 8007864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800786c <nanf+0x8>
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	7fc00000 	.word	0x7fc00000

08007870 <siprintf>:
 8007870:	b40e      	push	{r1, r2, r3}
 8007872:	b500      	push	{lr}
 8007874:	b09c      	sub	sp, #112	; 0x70
 8007876:	ab1d      	add	r3, sp, #116	; 0x74
 8007878:	9002      	str	r0, [sp, #8]
 800787a:	9006      	str	r0, [sp, #24]
 800787c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007880:	4809      	ldr	r0, [pc, #36]	; (80078a8 <siprintf+0x38>)
 8007882:	9107      	str	r1, [sp, #28]
 8007884:	9104      	str	r1, [sp, #16]
 8007886:	4909      	ldr	r1, [pc, #36]	; (80078ac <siprintf+0x3c>)
 8007888:	f853 2b04 	ldr.w	r2, [r3], #4
 800788c:	9105      	str	r1, [sp, #20]
 800788e:	6800      	ldr	r0, [r0, #0]
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	a902      	add	r1, sp, #8
 8007894:	f002 fd9e 	bl	800a3d4 <_svfiprintf_r>
 8007898:	9b02      	ldr	r3, [sp, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	b01c      	add	sp, #112	; 0x70
 80078a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a4:	b003      	add	sp, #12
 80078a6:	4770      	bx	lr
 80078a8:	2000000c 	.word	0x2000000c
 80078ac:	ffff0208 	.word	0xffff0208

080078b0 <siscanf>:
 80078b0:	b40e      	push	{r1, r2, r3}
 80078b2:	b530      	push	{r4, r5, lr}
 80078b4:	b09c      	sub	sp, #112	; 0x70
 80078b6:	ac1f      	add	r4, sp, #124	; 0x7c
 80078b8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80078bc:	f854 5b04 	ldr.w	r5, [r4], #4
 80078c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80078c4:	9002      	str	r0, [sp, #8]
 80078c6:	9006      	str	r0, [sp, #24]
 80078c8:	f7f8 fcac 	bl	8000224 <strlen>
 80078cc:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <siscanf+0x4c>)
 80078ce:	9003      	str	r0, [sp, #12]
 80078d0:	9007      	str	r0, [sp, #28]
 80078d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078d4:	480a      	ldr	r0, [pc, #40]	; (8007900 <siscanf+0x50>)
 80078d6:	9401      	str	r4, [sp, #4]
 80078d8:	2300      	movs	r3, #0
 80078da:	930f      	str	r3, [sp, #60]	; 0x3c
 80078dc:	9314      	str	r3, [sp, #80]	; 0x50
 80078de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078e6:	462a      	mov	r2, r5
 80078e8:	4623      	mov	r3, r4
 80078ea:	a902      	add	r1, sp, #8
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f002 fec3 	bl	800a678 <__ssvfiscanf_r>
 80078f2:	b01c      	add	sp, #112	; 0x70
 80078f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078f8:	b003      	add	sp, #12
 80078fa:	4770      	bx	lr
 80078fc:	08007905 	.word	0x08007905
 8007900:	2000000c 	.word	0x2000000c

08007904 <__seofread>:
 8007904:	2000      	movs	r0, #0
 8007906:	4770      	bx	lr

08007908 <sulp>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	460d      	mov	r5, r1
 800790e:	ec45 4b10 	vmov	d0, r4, r5
 8007912:	4616      	mov	r6, r2
 8007914:	f002 fb1a 	bl	8009f4c <__ulp>
 8007918:	ec51 0b10 	vmov	r0, r1, d0
 800791c:	b17e      	cbz	r6, 800793e <sulp+0x36>
 800791e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007922:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd09      	ble.n	800793e <sulp+0x36>
 800792a:	051b      	lsls	r3, r3, #20
 800792c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007930:	2400      	movs	r4, #0
 8007932:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007936:	4622      	mov	r2, r4
 8007938:	462b      	mov	r3, r5
 800793a:	f7f8 fe8d 	bl	8000658 <__aeabi_dmul>
 800793e:	bd70      	pop	{r4, r5, r6, pc}

08007940 <_strtod_l>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	461f      	mov	r7, r3
 8007946:	b0a1      	sub	sp, #132	; 0x84
 8007948:	2300      	movs	r3, #0
 800794a:	4681      	mov	r9, r0
 800794c:	4638      	mov	r0, r7
 800794e:	460e      	mov	r6, r1
 8007950:	9217      	str	r2, [sp, #92]	; 0x5c
 8007952:	931c      	str	r3, [sp, #112]	; 0x70
 8007954:	f002 f804 	bl	8009960 <__localeconv_l>
 8007958:	4680      	mov	r8, r0
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	f7f8 fc62 	bl	8000224 <strlen>
 8007960:	f04f 0a00 	mov.w	sl, #0
 8007964:	4604      	mov	r4, r0
 8007966:	f04f 0b00 	mov.w	fp, #0
 800796a:	961b      	str	r6, [sp, #108]	; 0x6c
 800796c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	2a0d      	cmp	r2, #13
 8007972:	d832      	bhi.n	80079da <_strtod_l+0x9a>
 8007974:	2a09      	cmp	r2, #9
 8007976:	d236      	bcs.n	80079e6 <_strtod_l+0xa6>
 8007978:	2a00      	cmp	r2, #0
 800797a:	d03e      	beq.n	80079fa <_strtod_l+0xba>
 800797c:	2300      	movs	r3, #0
 800797e:	930d      	str	r3, [sp, #52]	; 0x34
 8007980:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007982:	782b      	ldrb	r3, [r5, #0]
 8007984:	2b30      	cmp	r3, #48	; 0x30
 8007986:	f040 80ac 	bne.w	8007ae2 <_strtod_l+0x1a2>
 800798a:	786b      	ldrb	r3, [r5, #1]
 800798c:	2b58      	cmp	r3, #88	; 0x58
 800798e:	d001      	beq.n	8007994 <_strtod_l+0x54>
 8007990:	2b78      	cmp	r3, #120	; 0x78
 8007992:	d167      	bne.n	8007a64 <_strtod_l+0x124>
 8007994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	ab1c      	add	r3, sp, #112	; 0x70
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	9702      	str	r7, [sp, #8]
 800799e:	ab1d      	add	r3, sp, #116	; 0x74
 80079a0:	4a88      	ldr	r2, [pc, #544]	; (8007bc4 <_strtod_l+0x284>)
 80079a2:	a91b      	add	r1, sp, #108	; 0x6c
 80079a4:	4648      	mov	r0, r9
 80079a6:	f001 fcf2 	bl	800938e <__gethex>
 80079aa:	f010 0407 	ands.w	r4, r0, #7
 80079ae:	4606      	mov	r6, r0
 80079b0:	d005      	beq.n	80079be <_strtod_l+0x7e>
 80079b2:	2c06      	cmp	r4, #6
 80079b4:	d12b      	bne.n	8007a0e <_strtod_l+0xce>
 80079b6:	3501      	adds	r5, #1
 80079b8:	2300      	movs	r3, #0
 80079ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80079bc:	930d      	str	r3, [sp, #52]	; 0x34
 80079be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 859a 	bne.w	80084fa <_strtod_l+0xbba>
 80079c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c8:	b1e3      	cbz	r3, 8007a04 <_strtod_l+0xc4>
 80079ca:	4652      	mov	r2, sl
 80079cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079d0:	ec43 2b10 	vmov	d0, r2, r3
 80079d4:	b021      	add	sp, #132	; 0x84
 80079d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079da:	2a2b      	cmp	r2, #43	; 0x2b
 80079dc:	d015      	beq.n	8007a0a <_strtod_l+0xca>
 80079de:	2a2d      	cmp	r2, #45	; 0x2d
 80079e0:	d004      	beq.n	80079ec <_strtod_l+0xac>
 80079e2:	2a20      	cmp	r2, #32
 80079e4:	d1ca      	bne.n	800797c <_strtod_l+0x3c>
 80079e6:	3301      	adds	r3, #1
 80079e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80079ea:	e7bf      	b.n	800796c <_strtod_l+0x2c>
 80079ec:	2201      	movs	r2, #1
 80079ee:	920d      	str	r2, [sp, #52]	; 0x34
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1c2      	bne.n	8007980 <_strtod_l+0x40>
 80079fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 8579 	bne.w	80084f6 <_strtod_l+0xbb6>
 8007a04:	4652      	mov	r2, sl
 8007a06:	465b      	mov	r3, fp
 8007a08:	e7e2      	b.n	80079d0 <_strtod_l+0x90>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	e7ef      	b.n	80079ee <_strtod_l+0xae>
 8007a0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a10:	b13a      	cbz	r2, 8007a22 <_strtod_l+0xe2>
 8007a12:	2135      	movs	r1, #53	; 0x35
 8007a14:	a81e      	add	r0, sp, #120	; 0x78
 8007a16:	f002 fb91 	bl	800a13c <__copybits>
 8007a1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a1c:	4648      	mov	r0, r9
 8007a1e:	f001 fffd 	bl	8009a1c <_Bfree>
 8007a22:	3c01      	subs	r4, #1
 8007a24:	2c04      	cmp	r4, #4
 8007a26:	d806      	bhi.n	8007a36 <_strtod_l+0xf6>
 8007a28:	e8df f004 	tbb	[pc, r4]
 8007a2c:	1714030a 	.word	0x1714030a
 8007a30:	0a          	.byte	0x0a
 8007a31:	00          	.byte	0x00
 8007a32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007a36:	0730      	lsls	r0, r6, #28
 8007a38:	d5c1      	bpl.n	80079be <_strtod_l+0x7e>
 8007a3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007a3e:	e7be      	b.n	80079be <_strtod_l+0x7e>
 8007a40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007a44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007a46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a52:	e7f0      	b.n	8007a36 <_strtod_l+0xf6>
 8007a54:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007bc8 <_strtod_l+0x288>
 8007a58:	e7ed      	b.n	8007a36 <_strtod_l+0xf6>
 8007a5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007a5e:	f04f 3aff 	mov.w	sl, #4294967295
 8007a62:	e7e8      	b.n	8007a36 <_strtod_l+0xf6>
 8007a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	d0f9      	beq.n	8007a64 <_strtod_l+0x124>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0a4      	beq.n	80079be <_strtod_l+0x7e>
 8007a74:	2301      	movs	r3, #1
 8007a76:	2500      	movs	r5, #0
 8007a78:	9306      	str	r3, [sp, #24]
 8007a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	9507      	str	r5, [sp, #28]
 8007a80:	9505      	str	r5, [sp, #20]
 8007a82:	220a      	movs	r2, #10
 8007a84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007a86:	7807      	ldrb	r7, [r0, #0]
 8007a88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007a8c:	b2d9      	uxtb	r1, r3
 8007a8e:	2909      	cmp	r1, #9
 8007a90:	d929      	bls.n	8007ae6 <_strtod_l+0x1a6>
 8007a92:	4622      	mov	r2, r4
 8007a94:	f8d8 1000 	ldr.w	r1, [r8]
 8007a98:	f003 f8d8 	bl	800ac4c <strncmp>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d031      	beq.n	8007b04 <_strtod_l+0x1c4>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	9c05      	ldr	r4, [sp, #20]
 8007aa4:	9004      	str	r0, [sp, #16]
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	2b65      	cmp	r3, #101	; 0x65
 8007aac:	d001      	beq.n	8007ab2 <_strtod_l+0x172>
 8007aae:	2b45      	cmp	r3, #69	; 0x45
 8007ab0:	d114      	bne.n	8007adc <_strtod_l+0x19c>
 8007ab2:	b924      	cbnz	r4, 8007abe <_strtod_l+0x17e>
 8007ab4:	b910      	cbnz	r0, 8007abc <_strtod_l+0x17c>
 8007ab6:	9b06      	ldr	r3, [sp, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d09e      	beq.n	80079fa <_strtod_l+0xba>
 8007abc:	2400      	movs	r4, #0
 8007abe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007ac0:	1c73      	adds	r3, r6, #1
 8007ac2:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ac4:	7873      	ldrb	r3, [r6, #1]
 8007ac6:	2b2b      	cmp	r3, #43	; 0x2b
 8007ac8:	d078      	beq.n	8007bbc <_strtod_l+0x27c>
 8007aca:	2b2d      	cmp	r3, #45	; 0x2d
 8007acc:	d070      	beq.n	8007bb0 <_strtod_l+0x270>
 8007ace:	f04f 0c00 	mov.w	ip, #0
 8007ad2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007ad6:	2f09      	cmp	r7, #9
 8007ad8:	d97c      	bls.n	8007bd4 <_strtod_l+0x294>
 8007ada:	961b      	str	r6, [sp, #108]	; 0x6c
 8007adc:	f04f 0e00 	mov.w	lr, #0
 8007ae0:	e09a      	b.n	8007c18 <_strtod_l+0x2d8>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e7c7      	b.n	8007a76 <_strtod_l+0x136>
 8007ae6:	9905      	ldr	r1, [sp, #20]
 8007ae8:	2908      	cmp	r1, #8
 8007aea:	bfdd      	ittte	le
 8007aec:	9907      	ldrle	r1, [sp, #28]
 8007aee:	fb02 3301 	mlale	r3, r2, r1, r3
 8007af2:	9307      	strle	r3, [sp, #28]
 8007af4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007af8:	9b05      	ldr	r3, [sp, #20]
 8007afa:	3001      	adds	r0, #1
 8007afc:	3301      	adds	r3, #1
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	901b      	str	r0, [sp, #108]	; 0x6c
 8007b02:	e7bf      	b.n	8007a84 <_strtod_l+0x144>
 8007b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b06:	191a      	adds	r2, r3, r4
 8007b08:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b0a:	9a05      	ldr	r2, [sp, #20]
 8007b0c:	5d1b      	ldrb	r3, [r3, r4]
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d037      	beq.n	8007b82 <_strtod_l+0x242>
 8007b12:	9c05      	ldr	r4, [sp, #20]
 8007b14:	4602      	mov	r2, r0
 8007b16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007b1a:	2909      	cmp	r1, #9
 8007b1c:	d913      	bls.n	8007b46 <_strtod_l+0x206>
 8007b1e:	2101      	movs	r1, #1
 8007b20:	9104      	str	r1, [sp, #16]
 8007b22:	e7c2      	b.n	8007aaa <_strtod_l+0x16a>
 8007b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	2b30      	cmp	r3, #48	; 0x30
 8007b30:	d0f8      	beq.n	8007b24 <_strtod_l+0x1e4>
 8007b32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007b36:	2a08      	cmp	r2, #8
 8007b38:	f200 84e4 	bhi.w	8008504 <_strtod_l+0xbc4>
 8007b3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b3e:	9208      	str	r2, [sp, #32]
 8007b40:	4602      	mov	r2, r0
 8007b42:	2000      	movs	r0, #0
 8007b44:	4604      	mov	r4, r0
 8007b46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007b4a:	f100 0101 	add.w	r1, r0, #1
 8007b4e:	d012      	beq.n	8007b76 <_strtod_l+0x236>
 8007b50:	440a      	add	r2, r1
 8007b52:	eb00 0c04 	add.w	ip, r0, r4
 8007b56:	4621      	mov	r1, r4
 8007b58:	270a      	movs	r7, #10
 8007b5a:	458c      	cmp	ip, r1
 8007b5c:	d113      	bne.n	8007b86 <_strtod_l+0x246>
 8007b5e:	1821      	adds	r1, r4, r0
 8007b60:	2908      	cmp	r1, #8
 8007b62:	f104 0401 	add.w	r4, r4, #1
 8007b66:	4404      	add	r4, r0
 8007b68:	dc19      	bgt.n	8007b9e <_strtod_l+0x25e>
 8007b6a:	9b07      	ldr	r3, [sp, #28]
 8007b6c:	210a      	movs	r1, #10
 8007b6e:	fb01 e303 	mla	r3, r1, r3, lr
 8007b72:	9307      	str	r3, [sp, #28]
 8007b74:	2100      	movs	r1, #0
 8007b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b78:	1c58      	adds	r0, r3, #1
 8007b7a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	e7c9      	b.n	8007b16 <_strtod_l+0x1d6>
 8007b82:	9805      	ldr	r0, [sp, #20]
 8007b84:	e7d3      	b.n	8007b2e <_strtod_l+0x1ee>
 8007b86:	2908      	cmp	r1, #8
 8007b88:	f101 0101 	add.w	r1, r1, #1
 8007b8c:	dc03      	bgt.n	8007b96 <_strtod_l+0x256>
 8007b8e:	9b07      	ldr	r3, [sp, #28]
 8007b90:	437b      	muls	r3, r7
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	e7e1      	b.n	8007b5a <_strtod_l+0x21a>
 8007b96:	2910      	cmp	r1, #16
 8007b98:	bfd8      	it	le
 8007b9a:	437d      	mulle	r5, r7
 8007b9c:	e7dd      	b.n	8007b5a <_strtod_l+0x21a>
 8007b9e:	2c10      	cmp	r4, #16
 8007ba0:	bfdc      	itt	le
 8007ba2:	210a      	movle	r1, #10
 8007ba4:	fb01 e505 	mlale	r5, r1, r5, lr
 8007ba8:	e7e4      	b.n	8007b74 <_strtod_l+0x234>
 8007baa:	2301      	movs	r3, #1
 8007bac:	9304      	str	r3, [sp, #16]
 8007bae:	e781      	b.n	8007ab4 <_strtod_l+0x174>
 8007bb0:	f04f 0c01 	mov.w	ip, #1
 8007bb4:	1cb3      	adds	r3, r6, #2
 8007bb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8007bb8:	78b3      	ldrb	r3, [r6, #2]
 8007bba:	e78a      	b.n	8007ad2 <_strtod_l+0x192>
 8007bbc:	f04f 0c00 	mov.w	ip, #0
 8007bc0:	e7f8      	b.n	8007bb4 <_strtod_l+0x274>
 8007bc2:	bf00      	nop
 8007bc4:	0800af54 	.word	0x0800af54
 8007bc8:	7ff00000 	.word	0x7ff00000
 8007bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bce:	1c5f      	adds	r7, r3, #1
 8007bd0:	971b      	str	r7, [sp, #108]	; 0x6c
 8007bd2:	785b      	ldrb	r3, [r3, #1]
 8007bd4:	2b30      	cmp	r3, #48	; 0x30
 8007bd6:	d0f9      	beq.n	8007bcc <_strtod_l+0x28c>
 8007bd8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007bdc:	2f08      	cmp	r7, #8
 8007bde:	f63f af7d 	bhi.w	8007adc <_strtod_l+0x19c>
 8007be2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007be6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007be8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bec:	1c5f      	adds	r7, r3, #1
 8007bee:	971b      	str	r7, [sp, #108]	; 0x6c
 8007bf0:	785b      	ldrb	r3, [r3, #1]
 8007bf2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007bf6:	f1b8 0f09 	cmp.w	r8, #9
 8007bfa:	d937      	bls.n	8007c6c <_strtod_l+0x32c>
 8007bfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007bfe:	1a7f      	subs	r7, r7, r1
 8007c00:	2f08      	cmp	r7, #8
 8007c02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007c06:	dc37      	bgt.n	8007c78 <_strtod_l+0x338>
 8007c08:	45be      	cmp	lr, r7
 8007c0a:	bfa8      	it	ge
 8007c0c:	46be      	movge	lr, r7
 8007c0e:	f1bc 0f00 	cmp.w	ip, #0
 8007c12:	d001      	beq.n	8007c18 <_strtod_l+0x2d8>
 8007c14:	f1ce 0e00 	rsb	lr, lr, #0
 8007c18:	2c00      	cmp	r4, #0
 8007c1a:	d151      	bne.n	8007cc0 <_strtod_l+0x380>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f47f aece 	bne.w	80079be <_strtod_l+0x7e>
 8007c22:	9a06      	ldr	r2, [sp, #24]
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	f47f aeca 	bne.w	80079be <_strtod_l+0x7e>
 8007c2a:	9a04      	ldr	r2, [sp, #16]
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	f47f aee4 	bne.w	80079fa <_strtod_l+0xba>
 8007c32:	2b4e      	cmp	r3, #78	; 0x4e
 8007c34:	d027      	beq.n	8007c86 <_strtod_l+0x346>
 8007c36:	dc21      	bgt.n	8007c7c <_strtod_l+0x33c>
 8007c38:	2b49      	cmp	r3, #73	; 0x49
 8007c3a:	f47f aede 	bne.w	80079fa <_strtod_l+0xba>
 8007c3e:	49a0      	ldr	r1, [pc, #640]	; (8007ec0 <_strtod_l+0x580>)
 8007c40:	a81b      	add	r0, sp, #108	; 0x6c
 8007c42:	f001 fdd7 	bl	80097f4 <__match>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f43f aed7 	beq.w	80079fa <_strtod_l+0xba>
 8007c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c4e:	499d      	ldr	r1, [pc, #628]	; (8007ec4 <_strtod_l+0x584>)
 8007c50:	3b01      	subs	r3, #1
 8007c52:	a81b      	add	r0, sp, #108	; 0x6c
 8007c54:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c56:	f001 fdcd 	bl	80097f4 <__match>
 8007c5a:	b910      	cbnz	r0, 8007c62 <_strtod_l+0x322>
 8007c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c5e:	3301      	adds	r3, #1
 8007c60:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c62:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007ed8 <_strtod_l+0x598>
 8007c66:	f04f 0a00 	mov.w	sl, #0
 8007c6a:	e6a8      	b.n	80079be <_strtod_l+0x7e>
 8007c6c:	210a      	movs	r1, #10
 8007c6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007c72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007c76:	e7b8      	b.n	8007bea <_strtod_l+0x2aa>
 8007c78:	46be      	mov	lr, r7
 8007c7a:	e7c8      	b.n	8007c0e <_strtod_l+0x2ce>
 8007c7c:	2b69      	cmp	r3, #105	; 0x69
 8007c7e:	d0de      	beq.n	8007c3e <_strtod_l+0x2fe>
 8007c80:	2b6e      	cmp	r3, #110	; 0x6e
 8007c82:	f47f aeba 	bne.w	80079fa <_strtod_l+0xba>
 8007c86:	4990      	ldr	r1, [pc, #576]	; (8007ec8 <_strtod_l+0x588>)
 8007c88:	a81b      	add	r0, sp, #108	; 0x6c
 8007c8a:	f001 fdb3 	bl	80097f4 <__match>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f43f aeb3 	beq.w	80079fa <_strtod_l+0xba>
 8007c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b28      	cmp	r3, #40	; 0x28
 8007c9a:	d10e      	bne.n	8007cba <_strtod_l+0x37a>
 8007c9c:	aa1e      	add	r2, sp, #120	; 0x78
 8007c9e:	498b      	ldr	r1, [pc, #556]	; (8007ecc <_strtod_l+0x58c>)
 8007ca0:	a81b      	add	r0, sp, #108	; 0x6c
 8007ca2:	f001 fdbb 	bl	800981c <__hexnan>
 8007ca6:	2805      	cmp	r0, #5
 8007ca8:	d107      	bne.n	8007cba <_strtod_l+0x37a>
 8007caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007cb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007cb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007cb8:	e681      	b.n	80079be <_strtod_l+0x7e>
 8007cba:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007ee0 <_strtod_l+0x5a0>
 8007cbe:	e7d2      	b.n	8007c66 <_strtod_l+0x326>
 8007cc0:	ebae 0302 	sub.w	r3, lr, r2
 8007cc4:	9306      	str	r3, [sp, #24]
 8007cc6:	9b05      	ldr	r3, [sp, #20]
 8007cc8:	9807      	ldr	r0, [sp, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf08      	it	eq
 8007cce:	4623      	moveq	r3, r4
 8007cd0:	2c10      	cmp	r4, #16
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	46a0      	mov	r8, r4
 8007cd6:	bfa8      	it	ge
 8007cd8:	f04f 0810 	movge.w	r8, #16
 8007cdc:	f7f8 fc42 	bl	8000564 <__aeabi_ui2d>
 8007ce0:	2c09      	cmp	r4, #9
 8007ce2:	4682      	mov	sl, r0
 8007ce4:	468b      	mov	fp, r1
 8007ce6:	dc13      	bgt.n	8007d10 <_strtod_l+0x3d0>
 8007ce8:	9b06      	ldr	r3, [sp, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f43f ae67 	beq.w	80079be <_strtod_l+0x7e>
 8007cf0:	9b06      	ldr	r3, [sp, #24]
 8007cf2:	dd7a      	ble.n	8007dea <_strtod_l+0x4aa>
 8007cf4:	2b16      	cmp	r3, #22
 8007cf6:	dc61      	bgt.n	8007dbc <_strtod_l+0x47c>
 8007cf8:	4a75      	ldr	r2, [pc, #468]	; (8007ed0 <_strtod_l+0x590>)
 8007cfa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007cfe:	e9de 0100 	ldrd	r0, r1, [lr]
 8007d02:	4652      	mov	r2, sl
 8007d04:	465b      	mov	r3, fp
 8007d06:	f7f8 fca7 	bl	8000658 <__aeabi_dmul>
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	468b      	mov	fp, r1
 8007d0e:	e656      	b.n	80079be <_strtod_l+0x7e>
 8007d10:	4b6f      	ldr	r3, [pc, #444]	; (8007ed0 <_strtod_l+0x590>)
 8007d12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d1a:	f7f8 fc9d 	bl	8000658 <__aeabi_dmul>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	4628      	mov	r0, r5
 8007d22:	460f      	mov	r7, r1
 8007d24:	f7f8 fc1e 	bl	8000564 <__aeabi_ui2d>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7f8 fadc 	bl	80002ec <__adddf3>
 8007d34:	2c0f      	cmp	r4, #15
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	ddd5      	ble.n	8007ce8 <_strtod_l+0x3a8>
 8007d3c:	9b06      	ldr	r3, [sp, #24]
 8007d3e:	eba4 0808 	sub.w	r8, r4, r8
 8007d42:	4498      	add	r8, r3
 8007d44:	f1b8 0f00 	cmp.w	r8, #0
 8007d48:	f340 8096 	ble.w	8007e78 <_strtod_l+0x538>
 8007d4c:	f018 030f 	ands.w	r3, r8, #15
 8007d50:	d00a      	beq.n	8007d68 <_strtod_l+0x428>
 8007d52:	495f      	ldr	r1, [pc, #380]	; (8007ed0 <_strtod_l+0x590>)
 8007d54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d58:	4652      	mov	r2, sl
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d60:	f7f8 fc7a 	bl	8000658 <__aeabi_dmul>
 8007d64:	4682      	mov	sl, r0
 8007d66:	468b      	mov	fp, r1
 8007d68:	f038 080f 	bics.w	r8, r8, #15
 8007d6c:	d073      	beq.n	8007e56 <_strtod_l+0x516>
 8007d6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007d72:	dd47      	ble.n	8007e04 <_strtod_l+0x4c4>
 8007d74:	2400      	movs	r4, #0
 8007d76:	46a0      	mov	r8, r4
 8007d78:	9407      	str	r4, [sp, #28]
 8007d7a:	9405      	str	r4, [sp, #20]
 8007d7c:	2322      	movs	r3, #34	; 0x22
 8007d7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007ed8 <_strtod_l+0x598>
 8007d82:	f8c9 3000 	str.w	r3, [r9]
 8007d86:	f04f 0a00 	mov.w	sl, #0
 8007d8a:	9b07      	ldr	r3, [sp, #28]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f43f ae16 	beq.w	80079be <_strtod_l+0x7e>
 8007d92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d94:	4648      	mov	r0, r9
 8007d96:	f001 fe41 	bl	8009a1c <_Bfree>
 8007d9a:	9905      	ldr	r1, [sp, #20]
 8007d9c:	4648      	mov	r0, r9
 8007d9e:	f001 fe3d 	bl	8009a1c <_Bfree>
 8007da2:	4641      	mov	r1, r8
 8007da4:	4648      	mov	r0, r9
 8007da6:	f001 fe39 	bl	8009a1c <_Bfree>
 8007daa:	9907      	ldr	r1, [sp, #28]
 8007dac:	4648      	mov	r0, r9
 8007dae:	f001 fe35 	bl	8009a1c <_Bfree>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4648      	mov	r0, r9
 8007db6:	f001 fe31 	bl	8009a1c <_Bfree>
 8007dba:	e600      	b.n	80079be <_strtod_l+0x7e>
 8007dbc:	9a06      	ldr	r2, [sp, #24]
 8007dbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	dbba      	blt.n	8007d3c <_strtod_l+0x3fc>
 8007dc6:	4d42      	ldr	r5, [pc, #264]	; (8007ed0 <_strtod_l+0x590>)
 8007dc8:	f1c4 040f 	rsb	r4, r4, #15
 8007dcc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007dd0:	4652      	mov	r2, sl
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd8:	f7f8 fc3e 	bl	8000658 <__aeabi_dmul>
 8007ddc:	9b06      	ldr	r3, [sp, #24]
 8007dde:	1b1c      	subs	r4, r3, r4
 8007de0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007de4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007de8:	e78d      	b.n	8007d06 <_strtod_l+0x3c6>
 8007dea:	f113 0f16 	cmn.w	r3, #22
 8007dee:	dba5      	blt.n	8007d3c <_strtod_l+0x3fc>
 8007df0:	4a37      	ldr	r2, [pc, #220]	; (8007ed0 <_strtod_l+0x590>)
 8007df2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007df6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	4659      	mov	r1, fp
 8007dfe:	f7f8 fd55 	bl	80008ac <__aeabi_ddiv>
 8007e02:	e782      	b.n	8007d0a <_strtod_l+0x3ca>
 8007e04:	2300      	movs	r3, #0
 8007e06:	4e33      	ldr	r6, [pc, #204]	; (8007ed4 <_strtod_l+0x594>)
 8007e08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007e0c:	4650      	mov	r0, sl
 8007e0e:	4659      	mov	r1, fp
 8007e10:	461d      	mov	r5, r3
 8007e12:	f1b8 0f01 	cmp.w	r8, #1
 8007e16:	dc21      	bgt.n	8007e5c <_strtod_l+0x51c>
 8007e18:	b10b      	cbz	r3, 8007e1e <_strtod_l+0x4de>
 8007e1a:	4682      	mov	sl, r0
 8007e1c:	468b      	mov	fp, r1
 8007e1e:	4b2d      	ldr	r3, [pc, #180]	; (8007ed4 <_strtod_l+0x594>)
 8007e20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007e24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007e28:	4652      	mov	r2, sl
 8007e2a:	465b      	mov	r3, fp
 8007e2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007e30:	f7f8 fc12 	bl	8000658 <__aeabi_dmul>
 8007e34:	4b28      	ldr	r3, [pc, #160]	; (8007ed8 <_strtod_l+0x598>)
 8007e36:	460a      	mov	r2, r1
 8007e38:	400b      	ands	r3, r1
 8007e3a:	4928      	ldr	r1, [pc, #160]	; (8007edc <_strtod_l+0x59c>)
 8007e3c:	428b      	cmp	r3, r1
 8007e3e:	4682      	mov	sl, r0
 8007e40:	d898      	bhi.n	8007d74 <_strtod_l+0x434>
 8007e42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e46:	428b      	cmp	r3, r1
 8007e48:	bf86      	itte	hi
 8007e4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007ee4 <_strtod_l+0x5a4>
 8007e4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007e56:	2300      	movs	r3, #0
 8007e58:	9304      	str	r3, [sp, #16]
 8007e5a:	e077      	b.n	8007f4c <_strtod_l+0x60c>
 8007e5c:	f018 0f01 	tst.w	r8, #1
 8007e60:	d006      	beq.n	8007e70 <_strtod_l+0x530>
 8007e62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 fbf5 	bl	8000658 <__aeabi_dmul>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	3501      	adds	r5, #1
 8007e72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e76:	e7cc      	b.n	8007e12 <_strtod_l+0x4d2>
 8007e78:	d0ed      	beq.n	8007e56 <_strtod_l+0x516>
 8007e7a:	f1c8 0800 	rsb	r8, r8, #0
 8007e7e:	f018 020f 	ands.w	r2, r8, #15
 8007e82:	d00a      	beq.n	8007e9a <_strtod_l+0x55a>
 8007e84:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <_strtod_l+0x590>)
 8007e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 fd0b 	bl	80008ac <__aeabi_ddiv>
 8007e96:	4682      	mov	sl, r0
 8007e98:	468b      	mov	fp, r1
 8007e9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007e9e:	d0da      	beq.n	8007e56 <_strtod_l+0x516>
 8007ea0:	f1b8 0f1f 	cmp.w	r8, #31
 8007ea4:	dd20      	ble.n	8007ee8 <_strtod_l+0x5a8>
 8007ea6:	2400      	movs	r4, #0
 8007ea8:	46a0      	mov	r8, r4
 8007eaa:	9407      	str	r4, [sp, #28]
 8007eac:	9405      	str	r4, [sp, #20]
 8007eae:	2322      	movs	r3, #34	; 0x22
 8007eb0:	f04f 0a00 	mov.w	sl, #0
 8007eb4:	f04f 0b00 	mov.w	fp, #0
 8007eb8:	f8c9 3000 	str.w	r3, [r9]
 8007ebc:	e765      	b.n	8007d8a <_strtod_l+0x44a>
 8007ebe:	bf00      	nop
 8007ec0:	0800af21 	.word	0x0800af21
 8007ec4:	0800afab 	.word	0x0800afab
 8007ec8:	0800af29 	.word	0x0800af29
 8007ecc:	0800af68 	.word	0x0800af68
 8007ed0:	0800afe8 	.word	0x0800afe8
 8007ed4:	0800afc0 	.word	0x0800afc0
 8007ed8:	7ff00000 	.word	0x7ff00000
 8007edc:	7ca00000 	.word	0x7ca00000
 8007ee0:	fff80000 	.word	0xfff80000
 8007ee4:	7fefffff 	.word	0x7fefffff
 8007ee8:	f018 0310 	ands.w	r3, r8, #16
 8007eec:	bf18      	it	ne
 8007eee:	236a      	movne	r3, #106	; 0x6a
 8007ef0:	4da0      	ldr	r5, [pc, #640]	; (8008174 <_strtod_l+0x834>)
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	4659      	mov	r1, fp
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f1b8 0f00 	cmp.w	r8, #0
 8007efe:	f300 810a 	bgt.w	8008116 <_strtod_l+0x7d6>
 8007f02:	b10b      	cbz	r3, 8007f08 <_strtod_l+0x5c8>
 8007f04:	4682      	mov	sl, r0
 8007f06:	468b      	mov	fp, r1
 8007f08:	9b04      	ldr	r3, [sp, #16]
 8007f0a:	b1bb      	cbz	r3, 8007f3c <_strtod_l+0x5fc>
 8007f0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007f10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	4659      	mov	r1, fp
 8007f18:	dd10      	ble.n	8007f3c <_strtod_l+0x5fc>
 8007f1a:	2b1f      	cmp	r3, #31
 8007f1c:	f340 8107 	ble.w	800812e <_strtod_l+0x7ee>
 8007f20:	2b34      	cmp	r3, #52	; 0x34
 8007f22:	bfde      	ittt	le
 8007f24:	3b20      	suble	r3, #32
 8007f26:	f04f 32ff 	movle.w	r2, #4294967295
 8007f2a:	fa02 f303 	lslle.w	r3, r2, r3
 8007f2e:	f04f 0a00 	mov.w	sl, #0
 8007f32:	bfcc      	ite	gt
 8007f34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007f38:	ea03 0b01 	andle.w	fp, r3, r1
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4650      	mov	r0, sl
 8007f42:	4659      	mov	r1, fp
 8007f44:	f7f8 fdf0 	bl	8000b28 <__aeabi_dcmpeq>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d1ac      	bne.n	8007ea6 <_strtod_l+0x566>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	9a05      	ldr	r2, [sp, #20]
 8007f52:	9908      	ldr	r1, [sp, #32]
 8007f54:	4623      	mov	r3, r4
 8007f56:	4648      	mov	r0, r9
 8007f58:	f001 fdb2 	bl	8009ac0 <__s2b>
 8007f5c:	9007      	str	r0, [sp, #28]
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f af08 	beq.w	8007d74 <_strtod_l+0x434>
 8007f64:	9a06      	ldr	r2, [sp, #24]
 8007f66:	9b06      	ldr	r3, [sp, #24]
 8007f68:	2a00      	cmp	r2, #0
 8007f6a:	f1c3 0300 	rsb	r3, r3, #0
 8007f6e:	bfa8      	it	ge
 8007f70:	2300      	movge	r3, #0
 8007f72:	930e      	str	r3, [sp, #56]	; 0x38
 8007f74:	2400      	movs	r4, #0
 8007f76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f7a:	9316      	str	r3, [sp, #88]	; 0x58
 8007f7c:	46a0      	mov	r8, r4
 8007f7e:	9b07      	ldr	r3, [sp, #28]
 8007f80:	4648      	mov	r0, r9
 8007f82:	6859      	ldr	r1, [r3, #4]
 8007f84:	f001 fd16 	bl	80099b4 <_Balloc>
 8007f88:	9005      	str	r0, [sp, #20]
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	f43f aef6 	beq.w	8007d7c <_strtod_l+0x43c>
 8007f90:	9b07      	ldr	r3, [sp, #28]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	3202      	adds	r2, #2
 8007f96:	f103 010c 	add.w	r1, r3, #12
 8007f9a:	0092      	lsls	r2, r2, #2
 8007f9c:	300c      	adds	r0, #12
 8007f9e:	f7fe fe0f 	bl	8006bc0 <memcpy>
 8007fa2:	aa1e      	add	r2, sp, #120	; 0x78
 8007fa4:	a91d      	add	r1, sp, #116	; 0x74
 8007fa6:	ec4b ab10 	vmov	d0, sl, fp
 8007faa:	4648      	mov	r0, r9
 8007fac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007fb0:	f002 f842 	bl	800a038 <__d2b>
 8007fb4:	901c      	str	r0, [sp, #112]	; 0x70
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f43f aee0 	beq.w	8007d7c <_strtod_l+0x43c>
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	4648      	mov	r0, r9
 8007fc0:	f001 fe0a 	bl	8009bd8 <__i2b>
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f43f aed8 	beq.w	8007d7c <_strtod_l+0x43c>
 8007fcc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007fce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007fd0:	2e00      	cmp	r6, #0
 8007fd2:	bfab      	itete	ge
 8007fd4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007fd6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007fd8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007fda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007fdc:	bfac      	ite	ge
 8007fde:	18f7      	addge	r7, r6, r3
 8007fe0:	1b9d      	sublt	r5, r3, r6
 8007fe2:	9b04      	ldr	r3, [sp, #16]
 8007fe4:	1af6      	subs	r6, r6, r3
 8007fe6:	4416      	add	r6, r2
 8007fe8:	4b63      	ldr	r3, [pc, #396]	; (8008178 <_strtod_l+0x838>)
 8007fea:	3e01      	subs	r6, #1
 8007fec:	429e      	cmp	r6, r3
 8007fee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ff2:	f280 80af 	bge.w	8008154 <_strtod_l+0x814>
 8007ff6:	1b9b      	subs	r3, r3, r6
 8007ff8:	2b1f      	cmp	r3, #31
 8007ffa:	eba2 0203 	sub.w	r2, r2, r3
 8007ffe:	f04f 0101 	mov.w	r1, #1
 8008002:	f300 809b 	bgt.w	800813c <_strtod_l+0x7fc>
 8008006:	fa01 f303 	lsl.w	r3, r1, r3
 800800a:	930f      	str	r3, [sp, #60]	; 0x3c
 800800c:	2300      	movs	r3, #0
 800800e:	930a      	str	r3, [sp, #40]	; 0x28
 8008010:	18be      	adds	r6, r7, r2
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	42b7      	cmp	r7, r6
 8008016:	4415      	add	r5, r2
 8008018:	441d      	add	r5, r3
 800801a:	463b      	mov	r3, r7
 800801c:	bfa8      	it	ge
 800801e:	4633      	movge	r3, r6
 8008020:	42ab      	cmp	r3, r5
 8008022:	bfa8      	it	ge
 8008024:	462b      	movge	r3, r5
 8008026:	2b00      	cmp	r3, #0
 8008028:	bfc2      	ittt	gt
 800802a:	1af6      	subgt	r6, r6, r3
 800802c:	1aed      	subgt	r5, r5, r3
 800802e:	1aff      	subgt	r7, r7, r3
 8008030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008032:	b1bb      	cbz	r3, 8008064 <_strtod_l+0x724>
 8008034:	4641      	mov	r1, r8
 8008036:	461a      	mov	r2, r3
 8008038:	4648      	mov	r0, r9
 800803a:	f001 fe6d 	bl	8009d18 <__pow5mult>
 800803e:	4680      	mov	r8, r0
 8008040:	2800      	cmp	r0, #0
 8008042:	f43f ae9b 	beq.w	8007d7c <_strtod_l+0x43c>
 8008046:	4601      	mov	r1, r0
 8008048:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800804a:	4648      	mov	r0, r9
 800804c:	f001 fdcd 	bl	8009bea <__multiply>
 8008050:	900c      	str	r0, [sp, #48]	; 0x30
 8008052:	2800      	cmp	r0, #0
 8008054:	f43f ae92 	beq.w	8007d7c <_strtod_l+0x43c>
 8008058:	991c      	ldr	r1, [sp, #112]	; 0x70
 800805a:	4648      	mov	r0, r9
 800805c:	f001 fcde 	bl	8009a1c <_Bfree>
 8008060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008062:	931c      	str	r3, [sp, #112]	; 0x70
 8008064:	2e00      	cmp	r6, #0
 8008066:	dc7a      	bgt.n	800815e <_strtod_l+0x81e>
 8008068:	9b06      	ldr	r3, [sp, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	dd08      	ble.n	8008080 <_strtod_l+0x740>
 800806e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008070:	9905      	ldr	r1, [sp, #20]
 8008072:	4648      	mov	r0, r9
 8008074:	f001 fe50 	bl	8009d18 <__pow5mult>
 8008078:	9005      	str	r0, [sp, #20]
 800807a:	2800      	cmp	r0, #0
 800807c:	f43f ae7e 	beq.w	8007d7c <_strtod_l+0x43c>
 8008080:	2d00      	cmp	r5, #0
 8008082:	dd08      	ble.n	8008096 <_strtod_l+0x756>
 8008084:	462a      	mov	r2, r5
 8008086:	9905      	ldr	r1, [sp, #20]
 8008088:	4648      	mov	r0, r9
 800808a:	f001 fe93 	bl	8009db4 <__lshift>
 800808e:	9005      	str	r0, [sp, #20]
 8008090:	2800      	cmp	r0, #0
 8008092:	f43f ae73 	beq.w	8007d7c <_strtod_l+0x43c>
 8008096:	2f00      	cmp	r7, #0
 8008098:	dd08      	ble.n	80080ac <_strtod_l+0x76c>
 800809a:	4641      	mov	r1, r8
 800809c:	463a      	mov	r2, r7
 800809e:	4648      	mov	r0, r9
 80080a0:	f001 fe88 	bl	8009db4 <__lshift>
 80080a4:	4680      	mov	r8, r0
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f43f ae68 	beq.w	8007d7c <_strtod_l+0x43c>
 80080ac:	9a05      	ldr	r2, [sp, #20]
 80080ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080b0:	4648      	mov	r0, r9
 80080b2:	f001 feed 	bl	8009e90 <__mdiff>
 80080b6:	4604      	mov	r4, r0
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f43f ae5f 	beq.w	8007d7c <_strtod_l+0x43c>
 80080be:	68c3      	ldr	r3, [r0, #12]
 80080c0:	930c      	str	r3, [sp, #48]	; 0x30
 80080c2:	2300      	movs	r3, #0
 80080c4:	60c3      	str	r3, [r0, #12]
 80080c6:	4641      	mov	r1, r8
 80080c8:	f001 fec8 	bl	8009e5c <__mcmp>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	da55      	bge.n	800817c <_strtod_l+0x83c>
 80080d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080d2:	b9e3      	cbnz	r3, 800810e <_strtod_l+0x7ce>
 80080d4:	f1ba 0f00 	cmp.w	sl, #0
 80080d8:	d119      	bne.n	800810e <_strtod_l+0x7ce>
 80080da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080de:	b9b3      	cbnz	r3, 800810e <_strtod_l+0x7ce>
 80080e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080e4:	0d1b      	lsrs	r3, r3, #20
 80080e6:	051b      	lsls	r3, r3, #20
 80080e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080ec:	d90f      	bls.n	800810e <_strtod_l+0x7ce>
 80080ee:	6963      	ldr	r3, [r4, #20]
 80080f0:	b913      	cbnz	r3, 80080f8 <_strtod_l+0x7b8>
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	dd0a      	ble.n	800810e <_strtod_l+0x7ce>
 80080f8:	4621      	mov	r1, r4
 80080fa:	2201      	movs	r2, #1
 80080fc:	4648      	mov	r0, r9
 80080fe:	f001 fe59 	bl	8009db4 <__lshift>
 8008102:	4641      	mov	r1, r8
 8008104:	4604      	mov	r4, r0
 8008106:	f001 fea9 	bl	8009e5c <__mcmp>
 800810a:	2800      	cmp	r0, #0
 800810c:	dc67      	bgt.n	80081de <_strtod_l+0x89e>
 800810e:	9b04      	ldr	r3, [sp, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d171      	bne.n	80081f8 <_strtod_l+0x8b8>
 8008114:	e63d      	b.n	8007d92 <_strtod_l+0x452>
 8008116:	f018 0f01 	tst.w	r8, #1
 800811a:	d004      	beq.n	8008126 <_strtod_l+0x7e6>
 800811c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008120:	f7f8 fa9a 	bl	8000658 <__aeabi_dmul>
 8008124:	2301      	movs	r3, #1
 8008126:	ea4f 0868 	mov.w	r8, r8, asr #1
 800812a:	3508      	adds	r5, #8
 800812c:	e6e5      	b.n	8007efa <_strtod_l+0x5ba>
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	ea03 0a0a 	and.w	sl, r3, sl
 800813a:	e6ff      	b.n	8007f3c <_strtod_l+0x5fc>
 800813c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008140:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008144:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008148:	36e2      	adds	r6, #226	; 0xe2
 800814a:	fa01 f306 	lsl.w	r3, r1, r6
 800814e:	930a      	str	r3, [sp, #40]	; 0x28
 8008150:	910f      	str	r1, [sp, #60]	; 0x3c
 8008152:	e75d      	b.n	8008010 <_strtod_l+0x6d0>
 8008154:	2300      	movs	r3, #0
 8008156:	930a      	str	r3, [sp, #40]	; 0x28
 8008158:	2301      	movs	r3, #1
 800815a:	930f      	str	r3, [sp, #60]	; 0x3c
 800815c:	e758      	b.n	8008010 <_strtod_l+0x6d0>
 800815e:	4632      	mov	r2, r6
 8008160:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008162:	4648      	mov	r0, r9
 8008164:	f001 fe26 	bl	8009db4 <__lshift>
 8008168:	901c      	str	r0, [sp, #112]	; 0x70
 800816a:	2800      	cmp	r0, #0
 800816c:	f47f af7c 	bne.w	8008068 <_strtod_l+0x728>
 8008170:	e604      	b.n	8007d7c <_strtod_l+0x43c>
 8008172:	bf00      	nop
 8008174:	0800af80 	.word	0x0800af80
 8008178:	fffffc02 	.word	0xfffffc02
 800817c:	465d      	mov	r5, fp
 800817e:	f040 8086 	bne.w	800828e <_strtod_l+0x94e>
 8008182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008188:	b32a      	cbz	r2, 80081d6 <_strtod_l+0x896>
 800818a:	4aaf      	ldr	r2, [pc, #700]	; (8008448 <_strtod_l+0xb08>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d153      	bne.n	8008238 <_strtod_l+0x8f8>
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	4650      	mov	r0, sl
 8008194:	b1d3      	cbz	r3, 80081cc <_strtod_l+0x88c>
 8008196:	4aad      	ldr	r2, [pc, #692]	; (800844c <_strtod_l+0xb0c>)
 8008198:	402a      	ands	r2, r5
 800819a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800819e:	f04f 31ff 	mov.w	r1, #4294967295
 80081a2:	d816      	bhi.n	80081d2 <_strtod_l+0x892>
 80081a4:	0d12      	lsrs	r2, r2, #20
 80081a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081aa:	fa01 f303 	lsl.w	r3, r1, r3
 80081ae:	4298      	cmp	r0, r3
 80081b0:	d142      	bne.n	8008238 <_strtod_l+0x8f8>
 80081b2:	4ba7      	ldr	r3, [pc, #668]	; (8008450 <_strtod_l+0xb10>)
 80081b4:	429d      	cmp	r5, r3
 80081b6:	d102      	bne.n	80081be <_strtod_l+0x87e>
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f addf 	beq.w	8007d7c <_strtod_l+0x43c>
 80081be:	4ba3      	ldr	r3, [pc, #652]	; (800844c <_strtod_l+0xb0c>)
 80081c0:	402b      	ands	r3, r5
 80081c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80081c6:	f04f 0a00 	mov.w	sl, #0
 80081ca:	e7a0      	b.n	800810e <_strtod_l+0x7ce>
 80081cc:	f04f 33ff 	mov.w	r3, #4294967295
 80081d0:	e7ed      	b.n	80081ae <_strtod_l+0x86e>
 80081d2:	460b      	mov	r3, r1
 80081d4:	e7eb      	b.n	80081ae <_strtod_l+0x86e>
 80081d6:	bb7b      	cbnz	r3, 8008238 <_strtod_l+0x8f8>
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	d12c      	bne.n	8008238 <_strtod_l+0x8f8>
 80081de:	9904      	ldr	r1, [sp, #16]
 80081e0:	4a9a      	ldr	r2, [pc, #616]	; (800844c <_strtod_l+0xb0c>)
 80081e2:	465b      	mov	r3, fp
 80081e4:	b1f1      	cbz	r1, 8008224 <_strtod_l+0x8e4>
 80081e6:	ea02 010b 	and.w	r1, r2, fp
 80081ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081ee:	dc19      	bgt.n	8008224 <_strtod_l+0x8e4>
 80081f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081f4:	f77f ae5b 	ble.w	8007eae <_strtod_l+0x56e>
 80081f8:	4a96      	ldr	r2, [pc, #600]	; (8008454 <_strtod_l+0xb14>)
 80081fa:	2300      	movs	r3, #0
 80081fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008200:	4650      	mov	r0, sl
 8008202:	4659      	mov	r1, fp
 8008204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008208:	f7f8 fa26 	bl	8000658 <__aeabi_dmul>
 800820c:	4682      	mov	sl, r0
 800820e:	468b      	mov	fp, r1
 8008210:	2900      	cmp	r1, #0
 8008212:	f47f adbe 	bne.w	8007d92 <_strtod_l+0x452>
 8008216:	2800      	cmp	r0, #0
 8008218:	f47f adbb 	bne.w	8007d92 <_strtod_l+0x452>
 800821c:	2322      	movs	r3, #34	; 0x22
 800821e:	f8c9 3000 	str.w	r3, [r9]
 8008222:	e5b6      	b.n	8007d92 <_strtod_l+0x452>
 8008224:	4013      	ands	r3, r2
 8008226:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800822a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800822e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008232:	f04f 3aff 	mov.w	sl, #4294967295
 8008236:	e76a      	b.n	800810e <_strtod_l+0x7ce>
 8008238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823a:	b193      	cbz	r3, 8008262 <_strtod_l+0x922>
 800823c:	422b      	tst	r3, r5
 800823e:	f43f af66 	beq.w	800810e <_strtod_l+0x7ce>
 8008242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008244:	9a04      	ldr	r2, [sp, #16]
 8008246:	4650      	mov	r0, sl
 8008248:	4659      	mov	r1, fp
 800824a:	b173      	cbz	r3, 800826a <_strtod_l+0x92a>
 800824c:	f7ff fb5c 	bl	8007908 <sulp>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008258:	f7f8 f848 	bl	80002ec <__adddf3>
 800825c:	4682      	mov	sl, r0
 800825e:	468b      	mov	fp, r1
 8008260:	e755      	b.n	800810e <_strtod_l+0x7ce>
 8008262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008264:	ea13 0f0a 	tst.w	r3, sl
 8008268:	e7e9      	b.n	800823e <_strtod_l+0x8fe>
 800826a:	f7ff fb4d 	bl	8007908 <sulp>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008276:	f7f8 f837 	bl	80002e8 <__aeabi_dsub>
 800827a:	2200      	movs	r2, #0
 800827c:	2300      	movs	r3, #0
 800827e:	4682      	mov	sl, r0
 8008280:	468b      	mov	fp, r1
 8008282:	f7f8 fc51 	bl	8000b28 <__aeabi_dcmpeq>
 8008286:	2800      	cmp	r0, #0
 8008288:	f47f ae11 	bne.w	8007eae <_strtod_l+0x56e>
 800828c:	e73f      	b.n	800810e <_strtod_l+0x7ce>
 800828e:	4641      	mov	r1, r8
 8008290:	4620      	mov	r0, r4
 8008292:	f001 ff20 	bl	800a0d6 <__ratio>
 8008296:	ec57 6b10 	vmov	r6, r7, d0
 800829a:	2200      	movs	r2, #0
 800829c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082a0:	ee10 0a10 	vmov	r0, s0
 80082a4:	4639      	mov	r1, r7
 80082a6:	f7f8 fc53 	bl	8000b50 <__aeabi_dcmple>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d077      	beq.n	800839e <_strtod_l+0xa5e>
 80082ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d04a      	beq.n	800834a <_strtod_l+0xa0a>
 80082b4:	4b68      	ldr	r3, [pc, #416]	; (8008458 <_strtod_l+0xb18>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082bc:	4f66      	ldr	r7, [pc, #408]	; (8008458 <_strtod_l+0xb18>)
 80082be:	2600      	movs	r6, #0
 80082c0:	4b62      	ldr	r3, [pc, #392]	; (800844c <_strtod_l+0xb0c>)
 80082c2:	402b      	ands	r3, r5
 80082c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082c8:	4b64      	ldr	r3, [pc, #400]	; (800845c <_strtod_l+0xb1c>)
 80082ca:	429a      	cmp	r2, r3
 80082cc:	f040 80ce 	bne.w	800846c <_strtod_l+0xb2c>
 80082d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80082dc:	ec4b ab10 	vmov	d0, sl, fp
 80082e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80082e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80082e8:	f001 fe30 	bl	8009f4c <__ulp>
 80082ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082f0:	ec53 2b10 	vmov	r2, r3, d0
 80082f4:	f7f8 f9b0 	bl	8000658 <__aeabi_dmul>
 80082f8:	4652      	mov	r2, sl
 80082fa:	465b      	mov	r3, fp
 80082fc:	f7f7 fff6 	bl	80002ec <__adddf3>
 8008300:	460b      	mov	r3, r1
 8008302:	4952      	ldr	r1, [pc, #328]	; (800844c <_strtod_l+0xb0c>)
 8008304:	4a56      	ldr	r2, [pc, #344]	; (8008460 <_strtod_l+0xb20>)
 8008306:	4019      	ands	r1, r3
 8008308:	4291      	cmp	r1, r2
 800830a:	4682      	mov	sl, r0
 800830c:	d95b      	bls.n	80083c6 <_strtod_l+0xa86>
 800830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008310:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008314:	4293      	cmp	r3, r2
 8008316:	d103      	bne.n	8008320 <_strtod_l+0x9e0>
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	3301      	adds	r3, #1
 800831c:	f43f ad2e 	beq.w	8007d7c <_strtod_l+0x43c>
 8008320:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008450 <_strtod_l+0xb10>
 8008324:	f04f 3aff 	mov.w	sl, #4294967295
 8008328:	991c      	ldr	r1, [sp, #112]	; 0x70
 800832a:	4648      	mov	r0, r9
 800832c:	f001 fb76 	bl	8009a1c <_Bfree>
 8008330:	9905      	ldr	r1, [sp, #20]
 8008332:	4648      	mov	r0, r9
 8008334:	f001 fb72 	bl	8009a1c <_Bfree>
 8008338:	4641      	mov	r1, r8
 800833a:	4648      	mov	r0, r9
 800833c:	f001 fb6e 	bl	8009a1c <_Bfree>
 8008340:	4621      	mov	r1, r4
 8008342:	4648      	mov	r0, r9
 8008344:	f001 fb6a 	bl	8009a1c <_Bfree>
 8008348:	e619      	b.n	8007f7e <_strtod_l+0x63e>
 800834a:	f1ba 0f00 	cmp.w	sl, #0
 800834e:	d11a      	bne.n	8008386 <_strtod_l+0xa46>
 8008350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008354:	b9eb      	cbnz	r3, 8008392 <_strtod_l+0xa52>
 8008356:	2200      	movs	r2, #0
 8008358:	4b3f      	ldr	r3, [pc, #252]	; (8008458 <_strtod_l+0xb18>)
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f8 fbed 	bl	8000b3c <__aeabi_dcmplt>
 8008362:	b9c8      	cbnz	r0, 8008398 <_strtod_l+0xa58>
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	2200      	movs	r2, #0
 800836a:	4b3e      	ldr	r3, [pc, #248]	; (8008464 <_strtod_l+0xb24>)
 800836c:	f7f8 f974 	bl	8000658 <__aeabi_dmul>
 8008370:	4606      	mov	r6, r0
 8008372:	460f      	mov	r7, r1
 8008374:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008378:	9618      	str	r6, [sp, #96]	; 0x60
 800837a:	9319      	str	r3, [sp, #100]	; 0x64
 800837c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008380:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008384:	e79c      	b.n	80082c0 <_strtod_l+0x980>
 8008386:	f1ba 0f01 	cmp.w	sl, #1
 800838a:	d102      	bne.n	8008392 <_strtod_l+0xa52>
 800838c:	2d00      	cmp	r5, #0
 800838e:	f43f ad8e 	beq.w	8007eae <_strtod_l+0x56e>
 8008392:	2200      	movs	r2, #0
 8008394:	4b34      	ldr	r3, [pc, #208]	; (8008468 <_strtod_l+0xb28>)
 8008396:	e78f      	b.n	80082b8 <_strtod_l+0x978>
 8008398:	2600      	movs	r6, #0
 800839a:	4f32      	ldr	r7, [pc, #200]	; (8008464 <_strtod_l+0xb24>)
 800839c:	e7ea      	b.n	8008374 <_strtod_l+0xa34>
 800839e:	4b31      	ldr	r3, [pc, #196]	; (8008464 <_strtod_l+0xb24>)
 80083a0:	4630      	mov	r0, r6
 80083a2:	4639      	mov	r1, r7
 80083a4:	2200      	movs	r2, #0
 80083a6:	f7f8 f957 	bl	8000658 <__aeabi_dmul>
 80083aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ac:	4606      	mov	r6, r0
 80083ae:	460f      	mov	r7, r1
 80083b0:	b933      	cbnz	r3, 80083c0 <_strtod_l+0xa80>
 80083b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083b6:	9010      	str	r0, [sp, #64]	; 0x40
 80083b8:	9311      	str	r3, [sp, #68]	; 0x44
 80083ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083be:	e7df      	b.n	8008380 <_strtod_l+0xa40>
 80083c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80083c4:	e7f9      	b.n	80083ba <_strtod_l+0xa7a>
 80083c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80083ca:	9b04      	ldr	r3, [sp, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1ab      	bne.n	8008328 <_strtod_l+0x9e8>
 80083d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083d4:	0d1b      	lsrs	r3, r3, #20
 80083d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083d8:	051b      	lsls	r3, r3, #20
 80083da:	429a      	cmp	r2, r3
 80083dc:	465d      	mov	r5, fp
 80083de:	d1a3      	bne.n	8008328 <_strtod_l+0x9e8>
 80083e0:	4639      	mov	r1, r7
 80083e2:	4630      	mov	r0, r6
 80083e4:	f7f8 fbe8 	bl	8000bb8 <__aeabi_d2iz>
 80083e8:	f7f8 f8cc 	bl	8000584 <__aeabi_i2d>
 80083ec:	460b      	mov	r3, r1
 80083ee:	4602      	mov	r2, r0
 80083f0:	4639      	mov	r1, r7
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7f7 ff78 	bl	80002e8 <__aeabi_dsub>
 80083f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	b933      	cbnz	r3, 800840e <_strtod_l+0xace>
 8008400:	f1ba 0f00 	cmp.w	sl, #0
 8008404:	d103      	bne.n	800840e <_strtod_l+0xace>
 8008406:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800840a:	2d00      	cmp	r5, #0
 800840c:	d06d      	beq.n	80084ea <_strtod_l+0xbaa>
 800840e:	a30a      	add	r3, pc, #40	; (adr r3, 8008438 <_strtod_l+0xaf8>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	4630      	mov	r0, r6
 8008416:	4639      	mov	r1, r7
 8008418:	f7f8 fb90 	bl	8000b3c <__aeabi_dcmplt>
 800841c:	2800      	cmp	r0, #0
 800841e:	f47f acb8 	bne.w	8007d92 <_strtod_l+0x452>
 8008422:	a307      	add	r3, pc, #28	; (adr r3, 8008440 <_strtod_l+0xb00>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f7f8 fba4 	bl	8000b78 <__aeabi_dcmpgt>
 8008430:	2800      	cmp	r0, #0
 8008432:	f43f af79 	beq.w	8008328 <_strtod_l+0x9e8>
 8008436:	e4ac      	b.n	8007d92 <_strtod_l+0x452>
 8008438:	94a03595 	.word	0x94a03595
 800843c:	3fdfffff 	.word	0x3fdfffff
 8008440:	35afe535 	.word	0x35afe535
 8008444:	3fe00000 	.word	0x3fe00000
 8008448:	000fffff 	.word	0x000fffff
 800844c:	7ff00000 	.word	0x7ff00000
 8008450:	7fefffff 	.word	0x7fefffff
 8008454:	39500000 	.word	0x39500000
 8008458:	3ff00000 	.word	0x3ff00000
 800845c:	7fe00000 	.word	0x7fe00000
 8008460:	7c9fffff 	.word	0x7c9fffff
 8008464:	3fe00000 	.word	0x3fe00000
 8008468:	bff00000 	.word	0xbff00000
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	b333      	cbz	r3, 80084be <_strtod_l+0xb7e>
 8008470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008472:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008476:	d822      	bhi.n	80084be <_strtod_l+0xb7e>
 8008478:	a327      	add	r3, pc, #156	; (adr r3, 8008518 <_strtod_l+0xbd8>)
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	4630      	mov	r0, r6
 8008480:	4639      	mov	r1, r7
 8008482:	f7f8 fb65 	bl	8000b50 <__aeabi_dcmple>
 8008486:	b1a0      	cbz	r0, 80084b2 <_strtod_l+0xb72>
 8008488:	4639      	mov	r1, r7
 800848a:	4630      	mov	r0, r6
 800848c:	f7f8 fbbc 	bl	8000c08 <__aeabi_d2uiz>
 8008490:	2800      	cmp	r0, #0
 8008492:	bf08      	it	eq
 8008494:	2001      	moveq	r0, #1
 8008496:	f7f8 f865 	bl	8000564 <__aeabi_ui2d>
 800849a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800849c:	4606      	mov	r6, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	bb03      	cbnz	r3, 80084e4 <_strtod_l+0xba4>
 80084a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084a6:	9012      	str	r0, [sp, #72]	; 0x48
 80084a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80084aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80084ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80084b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80084be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80084c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80084c6:	f001 fd41 	bl	8009f4c <__ulp>
 80084ca:	4650      	mov	r0, sl
 80084cc:	ec53 2b10 	vmov	r2, r3, d0
 80084d0:	4659      	mov	r1, fp
 80084d2:	f7f8 f8c1 	bl	8000658 <__aeabi_dmul>
 80084d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084da:	f7f7 ff07 	bl	80002ec <__adddf3>
 80084de:	4682      	mov	sl, r0
 80084e0:	468b      	mov	fp, r1
 80084e2:	e772      	b.n	80083ca <_strtod_l+0xa8a>
 80084e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80084e8:	e7df      	b.n	80084aa <_strtod_l+0xb6a>
 80084ea:	a30d      	add	r3, pc, #52	; (adr r3, 8008520 <_strtod_l+0xbe0>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f8 fb24 	bl	8000b3c <__aeabi_dcmplt>
 80084f4:	e79c      	b.n	8008430 <_strtod_l+0xaf0>
 80084f6:	2300      	movs	r3, #0
 80084f8:	930d      	str	r3, [sp, #52]	; 0x34
 80084fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	f7ff ba61 	b.w	80079c6 <_strtod_l+0x86>
 8008504:	2b65      	cmp	r3, #101	; 0x65
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f43f ab4e 	beq.w	8007baa <_strtod_l+0x26a>
 800850e:	2101      	movs	r1, #1
 8008510:	4614      	mov	r4, r2
 8008512:	9104      	str	r1, [sp, #16]
 8008514:	f7ff bacb 	b.w	8007aae <_strtod_l+0x16e>
 8008518:	ffc00000 	.word	0xffc00000
 800851c:	41dfffff 	.word	0x41dfffff
 8008520:	94a03595 	.word	0x94a03595
 8008524:	3fcfffff 	.word	0x3fcfffff

08008528 <_strtod_r>:
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <_strtod_r+0x18>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	b410      	push	{r4}
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	4c04      	ldr	r4, [pc, #16]	; (8008544 <_strtod_r+0x1c>)
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf08      	it	eq
 8008536:	4623      	moveq	r3, r4
 8008538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800853c:	f7ff ba00 	b.w	8007940 <_strtod_l>
 8008540:	2000000c 	.word	0x2000000c
 8008544:	20000070 	.word	0x20000070

08008548 <_strtol_l.isra.0>:
 8008548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854c:	4680      	mov	r8, r0
 800854e:	4689      	mov	r9, r1
 8008550:	4692      	mov	sl, r2
 8008552:	461e      	mov	r6, r3
 8008554:	460f      	mov	r7, r1
 8008556:	463d      	mov	r5, r7
 8008558:	9808      	ldr	r0, [sp, #32]
 800855a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800855e:	f001 f9ed 	bl	800993c <__locale_ctype_ptr_l>
 8008562:	4420      	add	r0, r4
 8008564:	7843      	ldrb	r3, [r0, #1]
 8008566:	f013 0308 	ands.w	r3, r3, #8
 800856a:	d132      	bne.n	80085d2 <_strtol_l.isra.0+0x8a>
 800856c:	2c2d      	cmp	r4, #45	; 0x2d
 800856e:	d132      	bne.n	80085d6 <_strtol_l.isra.0+0x8e>
 8008570:	787c      	ldrb	r4, [r7, #1]
 8008572:	1cbd      	adds	r5, r7, #2
 8008574:	2201      	movs	r2, #1
 8008576:	2e00      	cmp	r6, #0
 8008578:	d05d      	beq.n	8008636 <_strtol_l.isra.0+0xee>
 800857a:	2e10      	cmp	r6, #16
 800857c:	d109      	bne.n	8008592 <_strtol_l.isra.0+0x4a>
 800857e:	2c30      	cmp	r4, #48	; 0x30
 8008580:	d107      	bne.n	8008592 <_strtol_l.isra.0+0x4a>
 8008582:	782b      	ldrb	r3, [r5, #0]
 8008584:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008588:	2b58      	cmp	r3, #88	; 0x58
 800858a:	d14f      	bne.n	800862c <_strtol_l.isra.0+0xe4>
 800858c:	786c      	ldrb	r4, [r5, #1]
 800858e:	2610      	movs	r6, #16
 8008590:	3502      	adds	r5, #2
 8008592:	2a00      	cmp	r2, #0
 8008594:	bf14      	ite	ne
 8008596:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800859a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800859e:	2700      	movs	r7, #0
 80085a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80085a4:	4638      	mov	r0, r7
 80085a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80085aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80085ae:	2b09      	cmp	r3, #9
 80085b0:	d817      	bhi.n	80085e2 <_strtol_l.isra.0+0x9a>
 80085b2:	461c      	mov	r4, r3
 80085b4:	42a6      	cmp	r6, r4
 80085b6:	dd23      	ble.n	8008600 <_strtol_l.isra.0+0xb8>
 80085b8:	1c7b      	adds	r3, r7, #1
 80085ba:	d007      	beq.n	80085cc <_strtol_l.isra.0+0x84>
 80085bc:	4584      	cmp	ip, r0
 80085be:	d31c      	bcc.n	80085fa <_strtol_l.isra.0+0xb2>
 80085c0:	d101      	bne.n	80085c6 <_strtol_l.isra.0+0x7e>
 80085c2:	45a6      	cmp	lr, r4
 80085c4:	db19      	blt.n	80085fa <_strtol_l.isra.0+0xb2>
 80085c6:	fb00 4006 	mla	r0, r0, r6, r4
 80085ca:	2701      	movs	r7, #1
 80085cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085d0:	e7eb      	b.n	80085aa <_strtol_l.isra.0+0x62>
 80085d2:	462f      	mov	r7, r5
 80085d4:	e7bf      	b.n	8008556 <_strtol_l.isra.0+0xe>
 80085d6:	2c2b      	cmp	r4, #43	; 0x2b
 80085d8:	bf04      	itt	eq
 80085da:	1cbd      	addeq	r5, r7, #2
 80085dc:	787c      	ldrbeq	r4, [r7, #1]
 80085de:	461a      	mov	r2, r3
 80085e0:	e7c9      	b.n	8008576 <_strtol_l.isra.0+0x2e>
 80085e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80085e6:	2b19      	cmp	r3, #25
 80085e8:	d801      	bhi.n	80085ee <_strtol_l.isra.0+0xa6>
 80085ea:	3c37      	subs	r4, #55	; 0x37
 80085ec:	e7e2      	b.n	80085b4 <_strtol_l.isra.0+0x6c>
 80085ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80085f2:	2b19      	cmp	r3, #25
 80085f4:	d804      	bhi.n	8008600 <_strtol_l.isra.0+0xb8>
 80085f6:	3c57      	subs	r4, #87	; 0x57
 80085f8:	e7dc      	b.n	80085b4 <_strtol_l.isra.0+0x6c>
 80085fa:	f04f 37ff 	mov.w	r7, #4294967295
 80085fe:	e7e5      	b.n	80085cc <_strtol_l.isra.0+0x84>
 8008600:	1c7b      	adds	r3, r7, #1
 8008602:	d108      	bne.n	8008616 <_strtol_l.isra.0+0xce>
 8008604:	2322      	movs	r3, #34	; 0x22
 8008606:	f8c8 3000 	str.w	r3, [r8]
 800860a:	4608      	mov	r0, r1
 800860c:	f1ba 0f00 	cmp.w	sl, #0
 8008610:	d107      	bne.n	8008622 <_strtol_l.isra.0+0xda>
 8008612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008616:	b102      	cbz	r2, 800861a <_strtol_l.isra.0+0xd2>
 8008618:	4240      	negs	r0, r0
 800861a:	f1ba 0f00 	cmp.w	sl, #0
 800861e:	d0f8      	beq.n	8008612 <_strtol_l.isra.0+0xca>
 8008620:	b10f      	cbz	r7, 8008626 <_strtol_l.isra.0+0xde>
 8008622:	f105 39ff 	add.w	r9, r5, #4294967295
 8008626:	f8ca 9000 	str.w	r9, [sl]
 800862a:	e7f2      	b.n	8008612 <_strtol_l.isra.0+0xca>
 800862c:	2430      	movs	r4, #48	; 0x30
 800862e:	2e00      	cmp	r6, #0
 8008630:	d1af      	bne.n	8008592 <_strtol_l.isra.0+0x4a>
 8008632:	2608      	movs	r6, #8
 8008634:	e7ad      	b.n	8008592 <_strtol_l.isra.0+0x4a>
 8008636:	2c30      	cmp	r4, #48	; 0x30
 8008638:	d0a3      	beq.n	8008582 <_strtol_l.isra.0+0x3a>
 800863a:	260a      	movs	r6, #10
 800863c:	e7a9      	b.n	8008592 <_strtol_l.isra.0+0x4a>
	...

08008640 <_strtol_r>:
 8008640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008642:	4c06      	ldr	r4, [pc, #24]	; (800865c <_strtol_r+0x1c>)
 8008644:	4d06      	ldr	r5, [pc, #24]	; (8008660 <_strtol_r+0x20>)
 8008646:	6824      	ldr	r4, [r4, #0]
 8008648:	6a24      	ldr	r4, [r4, #32]
 800864a:	2c00      	cmp	r4, #0
 800864c:	bf08      	it	eq
 800864e:	462c      	moveq	r4, r5
 8008650:	9400      	str	r4, [sp, #0]
 8008652:	f7ff ff79 	bl	8008548 <_strtol_l.isra.0>
 8008656:	b003      	add	sp, #12
 8008658:	bd30      	pop	{r4, r5, pc}
 800865a:	bf00      	nop
 800865c:	2000000c 	.word	0x2000000c
 8008660:	20000070 	.word	0x20000070

08008664 <quorem>:
 8008664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	6903      	ldr	r3, [r0, #16]
 800866a:	690c      	ldr	r4, [r1, #16]
 800866c:	42a3      	cmp	r3, r4
 800866e:	4680      	mov	r8, r0
 8008670:	f2c0 8082 	blt.w	8008778 <quorem+0x114>
 8008674:	3c01      	subs	r4, #1
 8008676:	f101 0714 	add.w	r7, r1, #20
 800867a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800867e:	f100 0614 	add.w	r6, r0, #20
 8008682:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008686:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800868a:	eb06 030c 	add.w	r3, r6, ip
 800868e:	3501      	adds	r5, #1
 8008690:	eb07 090c 	add.w	r9, r7, ip
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	fbb0 f5f5 	udiv	r5, r0, r5
 800869a:	b395      	cbz	r5, 8008702 <quorem+0x9e>
 800869c:	f04f 0a00 	mov.w	sl, #0
 80086a0:	4638      	mov	r0, r7
 80086a2:	46b6      	mov	lr, r6
 80086a4:	46d3      	mov	fp, sl
 80086a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80086aa:	b293      	uxth	r3, r2
 80086ac:	fb05 a303 	mla	r3, r5, r3, sl
 80086b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	ebab 0303 	sub.w	r3, fp, r3
 80086ba:	0c12      	lsrs	r2, r2, #16
 80086bc:	f8de b000 	ldr.w	fp, [lr]
 80086c0:	fb05 a202 	mla	r2, r5, r2, sl
 80086c4:	fa13 f38b 	uxtah	r3, r3, fp
 80086c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80086cc:	fa1f fb82 	uxth.w	fp, r2
 80086d0:	f8de 2000 	ldr.w	r2, [lr]
 80086d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80086d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086dc:	b29b      	uxth	r3, r3
 80086de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e2:	4581      	cmp	r9, r0
 80086e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80086e8:	f84e 3b04 	str.w	r3, [lr], #4
 80086ec:	d2db      	bcs.n	80086a6 <quorem+0x42>
 80086ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80086f2:	b933      	cbnz	r3, 8008702 <quorem+0x9e>
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	3b04      	subs	r3, #4
 80086f8:	429e      	cmp	r6, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	d330      	bcc.n	8008760 <quorem+0xfc>
 80086fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8008702:	4640      	mov	r0, r8
 8008704:	f001 fbaa 	bl	8009e5c <__mcmp>
 8008708:	2800      	cmp	r0, #0
 800870a:	db25      	blt.n	8008758 <quorem+0xf4>
 800870c:	3501      	adds	r5, #1
 800870e:	4630      	mov	r0, r6
 8008710:	f04f 0c00 	mov.w	ip, #0
 8008714:	f857 2b04 	ldr.w	r2, [r7], #4
 8008718:	f8d0 e000 	ldr.w	lr, [r0]
 800871c:	b293      	uxth	r3, r2
 800871e:	ebac 0303 	sub.w	r3, ip, r3
 8008722:	0c12      	lsrs	r2, r2, #16
 8008724:	fa13 f38e 	uxtah	r3, r3, lr
 8008728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800872c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008730:	b29b      	uxth	r3, r3
 8008732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008736:	45b9      	cmp	r9, r7
 8008738:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800873c:	f840 3b04 	str.w	r3, [r0], #4
 8008740:	d2e8      	bcs.n	8008714 <quorem+0xb0>
 8008742:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008746:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800874a:	b92a      	cbnz	r2, 8008758 <quorem+0xf4>
 800874c:	3b04      	subs	r3, #4
 800874e:	429e      	cmp	r6, r3
 8008750:	461a      	mov	r2, r3
 8008752:	d30b      	bcc.n	800876c <quorem+0x108>
 8008754:	f8c8 4010 	str.w	r4, [r8, #16]
 8008758:	4628      	mov	r0, r5
 800875a:	b003      	add	sp, #12
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	3b04      	subs	r3, #4
 8008764:	2a00      	cmp	r2, #0
 8008766:	d1ca      	bne.n	80086fe <quorem+0x9a>
 8008768:	3c01      	subs	r4, #1
 800876a:	e7c5      	b.n	80086f8 <quorem+0x94>
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	3b04      	subs	r3, #4
 8008770:	2a00      	cmp	r2, #0
 8008772:	d1ef      	bne.n	8008754 <quorem+0xf0>
 8008774:	3c01      	subs	r4, #1
 8008776:	e7ea      	b.n	800874e <quorem+0xea>
 8008778:	2000      	movs	r0, #0
 800877a:	e7ee      	b.n	800875a <quorem+0xf6>
 800877c:	0000      	movs	r0, r0
	...

08008780 <_dtoa_r>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	ec57 6b10 	vmov	r6, r7, d0
 8008788:	b097      	sub	sp, #92	; 0x5c
 800878a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800878c:	9106      	str	r1, [sp, #24]
 800878e:	4604      	mov	r4, r0
 8008790:	920b      	str	r2, [sp, #44]	; 0x2c
 8008792:	9312      	str	r3, [sp, #72]	; 0x48
 8008794:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008798:	e9cd 6700 	strd	r6, r7, [sp]
 800879c:	b93d      	cbnz	r5, 80087ae <_dtoa_r+0x2e>
 800879e:	2010      	movs	r0, #16
 80087a0:	f001 f8ee 	bl	8009980 <malloc>
 80087a4:	6260      	str	r0, [r4, #36]	; 0x24
 80087a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087aa:	6005      	str	r5, [r0, #0]
 80087ac:	60c5      	str	r5, [r0, #12]
 80087ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	b151      	cbz	r1, 80087ca <_dtoa_r+0x4a>
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	604a      	str	r2, [r1, #4]
 80087b8:	2301      	movs	r3, #1
 80087ba:	4093      	lsls	r3, r2
 80087bc:	608b      	str	r3, [r1, #8]
 80087be:	4620      	mov	r0, r4
 80087c0:	f001 f92c 	bl	8009a1c <_Bfree>
 80087c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	1e3b      	subs	r3, r7, #0
 80087cc:	bfbb      	ittet	lt
 80087ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087d2:	9301      	strlt	r3, [sp, #4]
 80087d4:	2300      	movge	r3, #0
 80087d6:	2201      	movlt	r2, #1
 80087d8:	bfac      	ite	ge
 80087da:	f8c8 3000 	strge.w	r3, [r8]
 80087de:	f8c8 2000 	strlt.w	r2, [r8]
 80087e2:	4baf      	ldr	r3, [pc, #700]	; (8008aa0 <_dtoa_r+0x320>)
 80087e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087e8:	ea33 0308 	bics.w	r3, r3, r8
 80087ec:	d114      	bne.n	8008818 <_dtoa_r+0x98>
 80087ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	b923      	cbnz	r3, 8008804 <_dtoa_r+0x84>
 80087fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80087fe:	2800      	cmp	r0, #0
 8008800:	f000 8542 	beq.w	8009288 <_dtoa_r+0xb08>
 8008804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008806:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008ab4 <_dtoa_r+0x334>
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 8544 	beq.w	8009298 <_dtoa_r+0xb18>
 8008810:	f10b 0303 	add.w	r3, fp, #3
 8008814:	f000 bd3e 	b.w	8009294 <_dtoa_r+0xb14>
 8008818:	e9dd 6700 	ldrd	r6, r7, [sp]
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f8 f980 	bl	8000b28 <__aeabi_dcmpeq>
 8008828:	4681      	mov	r9, r0
 800882a:	b168      	cbz	r0, 8008848 <_dtoa_r+0xc8>
 800882c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800882e:	2301      	movs	r3, #1
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 8524 	beq.w	8009282 <_dtoa_r+0xb02>
 800883a:	4b9a      	ldr	r3, [pc, #616]	; (8008aa4 <_dtoa_r+0x324>)
 800883c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800883e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	f000 bd28 	b.w	8009298 <_dtoa_r+0xb18>
 8008848:	aa14      	add	r2, sp, #80	; 0x50
 800884a:	a915      	add	r1, sp, #84	; 0x54
 800884c:	ec47 6b10 	vmov	d0, r6, r7
 8008850:	4620      	mov	r0, r4
 8008852:	f001 fbf1 	bl	800a038 <__d2b>
 8008856:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800885a:	9004      	str	r0, [sp, #16]
 800885c:	2d00      	cmp	r5, #0
 800885e:	d07c      	beq.n	800895a <_dtoa_r+0x1da>
 8008860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008864:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008868:	46b2      	mov	sl, r6
 800886a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800886e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008872:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008876:	2200      	movs	r2, #0
 8008878:	4b8b      	ldr	r3, [pc, #556]	; (8008aa8 <_dtoa_r+0x328>)
 800887a:	4650      	mov	r0, sl
 800887c:	4659      	mov	r1, fp
 800887e:	f7f7 fd33 	bl	80002e8 <__aeabi_dsub>
 8008882:	a381      	add	r3, pc, #516	; (adr r3, 8008a88 <_dtoa_r+0x308>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fee6 	bl	8000658 <__aeabi_dmul>
 800888c:	a380      	add	r3, pc, #512	; (adr r3, 8008a90 <_dtoa_r+0x310>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f7f7 fd2b 	bl	80002ec <__adddf3>
 8008896:	4606      	mov	r6, r0
 8008898:	4628      	mov	r0, r5
 800889a:	460f      	mov	r7, r1
 800889c:	f7f7 fe72 	bl	8000584 <__aeabi_i2d>
 80088a0:	a37d      	add	r3, pc, #500	; (adr r3, 8008a98 <_dtoa_r+0x318>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fed7 	bl	8000658 <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4630      	mov	r0, r6
 80088b0:	4639      	mov	r1, r7
 80088b2:	f7f7 fd1b 	bl	80002ec <__adddf3>
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	f7f8 f97d 	bl	8000bb8 <__aeabi_d2iz>
 80088be:	2200      	movs	r2, #0
 80088c0:	4682      	mov	sl, r0
 80088c2:	2300      	movs	r3, #0
 80088c4:	4630      	mov	r0, r6
 80088c6:	4639      	mov	r1, r7
 80088c8:	f7f8 f938 	bl	8000b3c <__aeabi_dcmplt>
 80088cc:	b148      	cbz	r0, 80088e2 <_dtoa_r+0x162>
 80088ce:	4650      	mov	r0, sl
 80088d0:	f7f7 fe58 	bl	8000584 <__aeabi_i2d>
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	f7f8 f926 	bl	8000b28 <__aeabi_dcmpeq>
 80088dc:	b908      	cbnz	r0, 80088e2 <_dtoa_r+0x162>
 80088de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088e2:	f1ba 0f16 	cmp.w	sl, #22
 80088e6:	d859      	bhi.n	800899c <_dtoa_r+0x21c>
 80088e8:	4970      	ldr	r1, [pc, #448]	; (8008aac <_dtoa_r+0x32c>)
 80088ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80088ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f6:	f7f8 f93f 	bl	8000b78 <__aeabi_dcmpgt>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d050      	beq.n	80089a0 <_dtoa_r+0x220>
 80088fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008902:	2300      	movs	r3, #0
 8008904:	930f      	str	r3, [sp, #60]	; 0x3c
 8008906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008908:	1b5d      	subs	r5, r3, r5
 800890a:	f1b5 0801 	subs.w	r8, r5, #1
 800890e:	bf49      	itett	mi
 8008910:	f1c5 0301 	rsbmi	r3, r5, #1
 8008914:	2300      	movpl	r3, #0
 8008916:	9305      	strmi	r3, [sp, #20]
 8008918:	f04f 0800 	movmi.w	r8, #0
 800891c:	bf58      	it	pl
 800891e:	9305      	strpl	r3, [sp, #20]
 8008920:	f1ba 0f00 	cmp.w	sl, #0
 8008924:	db3e      	blt.n	80089a4 <_dtoa_r+0x224>
 8008926:	2300      	movs	r3, #0
 8008928:	44d0      	add	r8, sl
 800892a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	9b06      	ldr	r3, [sp, #24]
 8008932:	2b09      	cmp	r3, #9
 8008934:	f200 8090 	bhi.w	8008a58 <_dtoa_r+0x2d8>
 8008938:	2b05      	cmp	r3, #5
 800893a:	bfc4      	itt	gt
 800893c:	3b04      	subgt	r3, #4
 800893e:	9306      	strgt	r3, [sp, #24]
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	f1a3 0302 	sub.w	r3, r3, #2
 8008946:	bfcc      	ite	gt
 8008948:	2500      	movgt	r5, #0
 800894a:	2501      	movle	r5, #1
 800894c:	2b03      	cmp	r3, #3
 800894e:	f200 808f 	bhi.w	8008a70 <_dtoa_r+0x2f0>
 8008952:	e8df f003 	tbb	[pc, r3]
 8008956:	7f7d      	.short	0x7f7d
 8008958:	7131      	.short	0x7131
 800895a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800895e:	441d      	add	r5, r3
 8008960:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008964:	2820      	cmp	r0, #32
 8008966:	dd13      	ble.n	8008990 <_dtoa_r+0x210>
 8008968:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	fa08 f800 	lsl.w	r8, r8, r0
 8008972:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008976:	fa23 f000 	lsr.w	r0, r3, r0
 800897a:	ea48 0000 	orr.w	r0, r8, r0
 800897e:	f7f7 fdf1 	bl	8000564 <__aeabi_ui2d>
 8008982:	2301      	movs	r3, #1
 8008984:	4682      	mov	sl, r0
 8008986:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800898a:	3d01      	subs	r5, #1
 800898c:	9313      	str	r3, [sp, #76]	; 0x4c
 800898e:	e772      	b.n	8008876 <_dtoa_r+0xf6>
 8008990:	9b00      	ldr	r3, [sp, #0]
 8008992:	f1c0 0020 	rsb	r0, r0, #32
 8008996:	fa03 f000 	lsl.w	r0, r3, r0
 800899a:	e7f0      	b.n	800897e <_dtoa_r+0x1fe>
 800899c:	2301      	movs	r3, #1
 800899e:	e7b1      	b.n	8008904 <_dtoa_r+0x184>
 80089a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80089a2:	e7b0      	b.n	8008906 <_dtoa_r+0x186>
 80089a4:	9b05      	ldr	r3, [sp, #20]
 80089a6:	eba3 030a 	sub.w	r3, r3, sl
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	f1ca 0300 	rsb	r3, sl, #0
 80089b0:	9307      	str	r3, [sp, #28]
 80089b2:	2300      	movs	r3, #0
 80089b4:	930e      	str	r3, [sp, #56]	; 0x38
 80089b6:	e7bb      	b.n	8008930 <_dtoa_r+0x1b0>
 80089b8:	2301      	movs	r3, #1
 80089ba:	930a      	str	r3, [sp, #40]	; 0x28
 80089bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	dd59      	ble.n	8008a76 <_dtoa_r+0x2f6>
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	4699      	mov	r9, r3
 80089c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089c8:	2200      	movs	r2, #0
 80089ca:	6072      	str	r2, [r6, #4]
 80089cc:	2204      	movs	r2, #4
 80089ce:	f102 0014 	add.w	r0, r2, #20
 80089d2:	4298      	cmp	r0, r3
 80089d4:	6871      	ldr	r1, [r6, #4]
 80089d6:	d953      	bls.n	8008a80 <_dtoa_r+0x300>
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 ffeb 	bl	80099b4 <_Balloc>
 80089de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089e0:	6030      	str	r0, [r6, #0]
 80089e2:	f1b9 0f0e 	cmp.w	r9, #14
 80089e6:	f8d3 b000 	ldr.w	fp, [r3]
 80089ea:	f200 80e6 	bhi.w	8008bba <_dtoa_r+0x43a>
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	f000 80e3 	beq.w	8008bba <_dtoa_r+0x43a>
 80089f4:	ed9d 7b00 	vldr	d7, [sp]
 80089f8:	f1ba 0f00 	cmp.w	sl, #0
 80089fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008a00:	dd74      	ble.n	8008aec <_dtoa_r+0x36c>
 8008a02:	4a2a      	ldr	r2, [pc, #168]	; (8008aac <_dtoa_r+0x32c>)
 8008a04:	f00a 030f 	and.w	r3, sl, #15
 8008a08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a0c:	ed93 7b00 	vldr	d7, [r3]
 8008a10:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008a14:	06f0      	lsls	r0, r6, #27
 8008a16:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008a1a:	d565      	bpl.n	8008ae8 <_dtoa_r+0x368>
 8008a1c:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <_dtoa_r+0x330>)
 8008a1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a26:	f7f7 ff41 	bl	80008ac <__aeabi_ddiv>
 8008a2a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a2e:	f006 060f 	and.w	r6, r6, #15
 8008a32:	2503      	movs	r5, #3
 8008a34:	4f1e      	ldr	r7, [pc, #120]	; (8008ab0 <_dtoa_r+0x330>)
 8008a36:	e04c      	b.n	8008ad2 <_dtoa_r+0x352>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a3e:	4453      	add	r3, sl
 8008a40:	f103 0901 	add.w	r9, r3, #1
 8008a44:	9302      	str	r3, [sp, #8]
 8008a46:	464b      	mov	r3, r9
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	bfb8      	it	lt
 8008a4c:	2301      	movlt	r3, #1
 8008a4e:	e7ba      	b.n	80089c6 <_dtoa_r+0x246>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e7b2      	b.n	80089ba <_dtoa_r+0x23a>
 8008a54:	2300      	movs	r3, #0
 8008a56:	e7f0      	b.n	8008a3a <_dtoa_r+0x2ba>
 8008a58:	2501      	movs	r5, #1
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9306      	str	r3, [sp, #24]
 8008a5e:	950a      	str	r5, [sp, #40]	; 0x28
 8008a60:	f04f 33ff 	mov.w	r3, #4294967295
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	4699      	mov	r9, r3
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2312      	movs	r3, #18
 8008a6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a6e:	e7aa      	b.n	80089c6 <_dtoa_r+0x246>
 8008a70:	2301      	movs	r3, #1
 8008a72:	930a      	str	r3, [sp, #40]	; 0x28
 8008a74:	e7f4      	b.n	8008a60 <_dtoa_r+0x2e0>
 8008a76:	2301      	movs	r3, #1
 8008a78:	9302      	str	r3, [sp, #8]
 8008a7a:	4699      	mov	r9, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	e7f5      	b.n	8008a6c <_dtoa_r+0x2ec>
 8008a80:	3101      	adds	r1, #1
 8008a82:	6071      	str	r1, [r6, #4]
 8008a84:	0052      	lsls	r2, r2, #1
 8008a86:	e7a2      	b.n	80089ce <_dtoa_r+0x24e>
 8008a88:	636f4361 	.word	0x636f4361
 8008a8c:	3fd287a7 	.word	0x3fd287a7
 8008a90:	8b60c8b3 	.word	0x8b60c8b3
 8008a94:	3fc68a28 	.word	0x3fc68a28
 8008a98:	509f79fb 	.word	0x509f79fb
 8008a9c:	3fd34413 	.word	0x3fd34413
 8008aa0:	7ff00000 	.word	0x7ff00000
 8008aa4:	0800b0e4 	.word	0x0800b0e4
 8008aa8:	3ff80000 	.word	0x3ff80000
 8008aac:	0800afe8 	.word	0x0800afe8
 8008ab0:	0800afc0 	.word	0x0800afc0
 8008ab4:	0800afb1 	.word	0x0800afb1
 8008ab8:	07f1      	lsls	r1, r6, #31
 8008aba:	d508      	bpl.n	8008ace <_dtoa_r+0x34e>
 8008abc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac4:	f7f7 fdc8 	bl	8000658 <__aeabi_dmul>
 8008ac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008acc:	3501      	adds	r5, #1
 8008ace:	1076      	asrs	r6, r6, #1
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	d1f0      	bne.n	8008ab8 <_dtoa_r+0x338>
 8008ad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ada:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ade:	f7f7 fee5 	bl	80008ac <__aeabi_ddiv>
 8008ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ae6:	e01a      	b.n	8008b1e <_dtoa_r+0x39e>
 8008ae8:	2502      	movs	r5, #2
 8008aea:	e7a3      	b.n	8008a34 <_dtoa_r+0x2b4>
 8008aec:	f000 80a0 	beq.w	8008c30 <_dtoa_r+0x4b0>
 8008af0:	f1ca 0600 	rsb	r6, sl, #0
 8008af4:	4b9f      	ldr	r3, [pc, #636]	; (8008d74 <_dtoa_r+0x5f4>)
 8008af6:	4fa0      	ldr	r7, [pc, #640]	; (8008d78 <_dtoa_r+0x5f8>)
 8008af8:	f006 020f 	and.w	r2, r6, #15
 8008afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b08:	f7f7 fda6 	bl	8000658 <__aeabi_dmul>
 8008b0c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b10:	1136      	asrs	r6, r6, #4
 8008b12:	2300      	movs	r3, #0
 8008b14:	2502      	movs	r5, #2
 8008b16:	2e00      	cmp	r6, #0
 8008b18:	d17f      	bne.n	8008c1a <_dtoa_r+0x49a>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e1      	bne.n	8008ae2 <_dtoa_r+0x362>
 8008b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8087 	beq.w	8008c34 <_dtoa_r+0x4b4>
 8008b26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	4b93      	ldr	r3, [pc, #588]	; (8008d7c <_dtoa_r+0x5fc>)
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f8 f803 	bl	8000b3c <__aeabi_dcmplt>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d07c      	beq.n	8008c34 <_dtoa_r+0x4b4>
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d079      	beq.n	8008c34 <_dtoa_r+0x4b4>
 8008b40:	9b02      	ldr	r3, [sp, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dd35      	ble.n	8008bb2 <_dtoa_r+0x432>
 8008b46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b4a:	9308      	str	r3, [sp, #32]
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	2200      	movs	r2, #0
 8008b50:	4b8b      	ldr	r3, [pc, #556]	; (8008d80 <_dtoa_r+0x600>)
 8008b52:	4630      	mov	r0, r6
 8008b54:	f7f7 fd80 	bl	8000658 <__aeabi_dmul>
 8008b58:	e9cd 0100 	strd	r0, r1, [sp]
 8008b5c:	9f02      	ldr	r7, [sp, #8]
 8008b5e:	3501      	adds	r5, #1
 8008b60:	4628      	mov	r0, r5
 8008b62:	f7f7 fd0f 	bl	8000584 <__aeabi_i2d>
 8008b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b6a:	f7f7 fd75 	bl	8000658 <__aeabi_dmul>
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4b84      	ldr	r3, [pc, #528]	; (8008d84 <_dtoa_r+0x604>)
 8008b72:	f7f7 fbbb 	bl	80002ec <__adddf3>
 8008b76:	4605      	mov	r5, r0
 8008b78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	d15d      	bne.n	8008c3c <_dtoa_r+0x4bc>
 8008b80:	2200      	movs	r2, #0
 8008b82:	4b81      	ldr	r3, [pc, #516]	; (8008d88 <_dtoa_r+0x608>)
 8008b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b88:	f7f7 fbae 	bl	80002e8 <__aeabi_dsub>
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	4633      	mov	r3, r6
 8008b90:	e9cd 0100 	strd	r0, r1, [sp]
 8008b94:	f7f7 fff0 	bl	8000b78 <__aeabi_dcmpgt>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	f040 8288 	bne.w	80090ae <_dtoa_r+0x92e>
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ba8:	f7f7 ffc8 	bl	8000b3c <__aeabi_dcmplt>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	f040 827c 	bne.w	80090aa <_dtoa_r+0x92a>
 8008bb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8008bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f2c0 8150 	blt.w	8008e62 <_dtoa_r+0x6e2>
 8008bc2:	f1ba 0f0e 	cmp.w	sl, #14
 8008bc6:	f300 814c 	bgt.w	8008e62 <_dtoa_r+0x6e2>
 8008bca:	4b6a      	ldr	r3, [pc, #424]	; (8008d74 <_dtoa_r+0x5f4>)
 8008bcc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bd0:	ed93 7b00 	vldr	d7, [r3]
 8008bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008bdc:	f280 80d8 	bge.w	8008d90 <_dtoa_r+0x610>
 8008be0:	f1b9 0f00 	cmp.w	r9, #0
 8008be4:	f300 80d4 	bgt.w	8008d90 <_dtoa_r+0x610>
 8008be8:	f040 825e 	bne.w	80090a8 <_dtoa_r+0x928>
 8008bec:	2200      	movs	r2, #0
 8008bee:	4b66      	ldr	r3, [pc, #408]	; (8008d88 <_dtoa_r+0x608>)
 8008bf0:	ec51 0b17 	vmov	r0, r1, d7
 8008bf4:	f7f7 fd30 	bl	8000658 <__aeabi_dmul>
 8008bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bfc:	f7f7 ffb2 	bl	8000b64 <__aeabi_dcmpge>
 8008c00:	464f      	mov	r7, r9
 8008c02:	464e      	mov	r6, r9
 8008c04:	2800      	cmp	r0, #0
 8008c06:	f040 8234 	bne.w	8009072 <_dtoa_r+0x8f2>
 8008c0a:	2331      	movs	r3, #49	; 0x31
 8008c0c:	f10b 0501 	add.w	r5, fp, #1
 8008c10:	f88b 3000 	strb.w	r3, [fp]
 8008c14:	f10a 0a01 	add.w	sl, sl, #1
 8008c18:	e22f      	b.n	800907a <_dtoa_r+0x8fa>
 8008c1a:	07f2      	lsls	r2, r6, #31
 8008c1c:	d505      	bpl.n	8008c2a <_dtoa_r+0x4aa>
 8008c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c22:	f7f7 fd19 	bl	8000658 <__aeabi_dmul>
 8008c26:	3501      	adds	r5, #1
 8008c28:	2301      	movs	r3, #1
 8008c2a:	1076      	asrs	r6, r6, #1
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	e772      	b.n	8008b16 <_dtoa_r+0x396>
 8008c30:	2502      	movs	r5, #2
 8008c32:	e774      	b.n	8008b1e <_dtoa_r+0x39e>
 8008c34:	f8cd a020 	str.w	sl, [sp, #32]
 8008c38:	464f      	mov	r7, r9
 8008c3a:	e791      	b.n	8008b60 <_dtoa_r+0x3e0>
 8008c3c:	4b4d      	ldr	r3, [pc, #308]	; (8008d74 <_dtoa_r+0x5f4>)
 8008c3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d047      	beq.n	8008cdc <_dtoa_r+0x55c>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	2000      	movs	r0, #0
 8008c52:	494e      	ldr	r1, [pc, #312]	; (8008d8c <_dtoa_r+0x60c>)
 8008c54:	f7f7 fe2a 	bl	80008ac <__aeabi_ddiv>
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4633      	mov	r3, r6
 8008c5c:	f7f7 fb44 	bl	80002e8 <__aeabi_dsub>
 8008c60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c64:	465d      	mov	r5, fp
 8008c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c6a:	f7f7 ffa5 	bl	8000bb8 <__aeabi_d2iz>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	f7f7 fc88 	bl	8000584 <__aeabi_i2d>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c7c:	f7f7 fb34 	bl	80002e8 <__aeabi_dsub>
 8008c80:	3630      	adds	r6, #48	; 0x30
 8008c82:	f805 6b01 	strb.w	r6, [r5], #1
 8008c86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008c8e:	f7f7 ff55 	bl	8000b3c <__aeabi_dcmplt>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d163      	bne.n	8008d5e <_dtoa_r+0x5de>
 8008c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	4937      	ldr	r1, [pc, #220]	; (8008d7c <_dtoa_r+0x5fc>)
 8008c9e:	f7f7 fb23 	bl	80002e8 <__aeabi_dsub>
 8008ca2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ca6:	f7f7 ff49 	bl	8000b3c <__aeabi_dcmplt>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f040 80b7 	bne.w	8008e1e <_dtoa_r+0x69e>
 8008cb0:	eba5 030b 	sub.w	r3, r5, fp
 8008cb4:	429f      	cmp	r7, r3
 8008cb6:	f77f af7c 	ble.w	8008bb2 <_dtoa_r+0x432>
 8008cba:	2200      	movs	r2, #0
 8008cbc:	4b30      	ldr	r3, [pc, #192]	; (8008d80 <_dtoa_r+0x600>)
 8008cbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cc2:	f7f7 fcc9 	bl	8000658 <__aeabi_dmul>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ccc:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <_dtoa_r+0x600>)
 8008cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd2:	f7f7 fcc1 	bl	8000658 <__aeabi_dmul>
 8008cd6:	e9cd 0100 	strd	r0, r1, [sp]
 8008cda:	e7c4      	b.n	8008c66 <_dtoa_r+0x4e6>
 8008cdc:	462a      	mov	r2, r5
 8008cde:	4633      	mov	r3, r6
 8008ce0:	f7f7 fcba 	bl	8000658 <__aeabi_dmul>
 8008ce4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ce8:	eb0b 0507 	add.w	r5, fp, r7
 8008cec:	465e      	mov	r6, fp
 8008cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cf2:	f7f7 ff61 	bl	8000bb8 <__aeabi_d2iz>
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	f7f7 fc44 	bl	8000584 <__aeabi_i2d>
 8008cfc:	3730      	adds	r7, #48	; 0x30
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d06:	f7f7 faef 	bl	80002e8 <__aeabi_dsub>
 8008d0a:	f806 7b01 	strb.w	r7, [r6], #1
 8008d0e:	42ae      	cmp	r6, r5
 8008d10:	e9cd 0100 	strd	r0, r1, [sp]
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	d126      	bne.n	8008d68 <_dtoa_r+0x5e8>
 8008d1a:	4b1c      	ldr	r3, [pc, #112]	; (8008d8c <_dtoa_r+0x60c>)
 8008d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d20:	f7f7 fae4 	bl	80002ec <__adddf3>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d2c:	f7f7 ff24 	bl	8000b78 <__aeabi_dcmpgt>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d174      	bne.n	8008e1e <_dtoa_r+0x69e>
 8008d34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d38:	2000      	movs	r0, #0
 8008d3a:	4914      	ldr	r1, [pc, #80]	; (8008d8c <_dtoa_r+0x60c>)
 8008d3c:	f7f7 fad4 	bl	80002e8 <__aeabi_dsub>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d48:	f7f7 fef8 	bl	8000b3c <__aeabi_dcmplt>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f af30 	beq.w	8008bb2 <_dtoa_r+0x432>
 8008d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d56:	2b30      	cmp	r3, #48	; 0x30
 8008d58:	f105 32ff 	add.w	r2, r5, #4294967295
 8008d5c:	d002      	beq.n	8008d64 <_dtoa_r+0x5e4>
 8008d5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008d62:	e04a      	b.n	8008dfa <_dtoa_r+0x67a>
 8008d64:	4615      	mov	r5, r2
 8008d66:	e7f4      	b.n	8008d52 <_dtoa_r+0x5d2>
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <_dtoa_r+0x600>)
 8008d6a:	f7f7 fc75 	bl	8000658 <__aeabi_dmul>
 8008d6e:	e9cd 0100 	strd	r0, r1, [sp]
 8008d72:	e7bc      	b.n	8008cee <_dtoa_r+0x56e>
 8008d74:	0800afe8 	.word	0x0800afe8
 8008d78:	0800afc0 	.word	0x0800afc0
 8008d7c:	3ff00000 	.word	0x3ff00000
 8008d80:	40240000 	.word	0x40240000
 8008d84:	401c0000 	.word	0x401c0000
 8008d88:	40140000 	.word	0x40140000
 8008d8c:	3fe00000 	.word	0x3fe00000
 8008d90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d94:	465d      	mov	r5, fp
 8008d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fd85 	bl	80008ac <__aeabi_ddiv>
 8008da2:	f7f7 ff09 	bl	8000bb8 <__aeabi_d2iz>
 8008da6:	4680      	mov	r8, r0
 8008da8:	f7f7 fbec 	bl	8000584 <__aeabi_i2d>
 8008dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008db0:	f7f7 fc52 	bl	8000658 <__aeabi_dmul>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4630      	mov	r0, r6
 8008dba:	4639      	mov	r1, r7
 8008dbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008dc0:	f7f7 fa92 	bl	80002e8 <__aeabi_dsub>
 8008dc4:	f805 6b01 	strb.w	r6, [r5], #1
 8008dc8:	eba5 060b 	sub.w	r6, r5, fp
 8008dcc:	45b1      	cmp	r9, r6
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	d139      	bne.n	8008e48 <_dtoa_r+0x6c8>
 8008dd4:	f7f7 fa8a 	bl	80002ec <__adddf3>
 8008dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ddc:	4606      	mov	r6, r0
 8008dde:	460f      	mov	r7, r1
 8008de0:	f7f7 feca 	bl	8000b78 <__aeabi_dcmpgt>
 8008de4:	b9c8      	cbnz	r0, 8008e1a <_dtoa_r+0x69a>
 8008de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fe9b 	bl	8000b28 <__aeabi_dcmpeq>
 8008df2:	b110      	cbz	r0, 8008dfa <_dtoa_r+0x67a>
 8008df4:	f018 0f01 	tst.w	r8, #1
 8008df8:	d10f      	bne.n	8008e1a <_dtoa_r+0x69a>
 8008dfa:	9904      	ldr	r1, [sp, #16]
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fe0d 	bl	8009a1c <_Bfree>
 8008e02:	2300      	movs	r3, #0
 8008e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e06:	702b      	strb	r3, [r5, #0]
 8008e08:	f10a 0301 	add.w	r3, sl, #1
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8241 	beq.w	8009298 <_dtoa_r+0xb18>
 8008e16:	601d      	str	r5, [r3, #0]
 8008e18:	e23e      	b.n	8009298 <_dtoa_r+0xb18>
 8008e1a:	f8cd a020 	str.w	sl, [sp, #32]
 8008e1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e22:	2a39      	cmp	r2, #57	; 0x39
 8008e24:	f105 33ff 	add.w	r3, r5, #4294967295
 8008e28:	d108      	bne.n	8008e3c <_dtoa_r+0x6bc>
 8008e2a:	459b      	cmp	fp, r3
 8008e2c:	d10a      	bne.n	8008e44 <_dtoa_r+0x6c4>
 8008e2e:	9b08      	ldr	r3, [sp, #32]
 8008e30:	3301      	adds	r3, #1
 8008e32:	9308      	str	r3, [sp, #32]
 8008e34:	2330      	movs	r3, #48	; 0x30
 8008e36:	f88b 3000 	strb.w	r3, [fp]
 8008e3a:	465b      	mov	r3, fp
 8008e3c:	781a      	ldrb	r2, [r3, #0]
 8008e3e:	3201      	adds	r2, #1
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	e78c      	b.n	8008d5e <_dtoa_r+0x5de>
 8008e44:	461d      	mov	r5, r3
 8008e46:	e7ea      	b.n	8008e1e <_dtoa_r+0x69e>
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4b9b      	ldr	r3, [pc, #620]	; (80090b8 <_dtoa_r+0x938>)
 8008e4c:	f7f7 fc04 	bl	8000658 <__aeabi_dmul>
 8008e50:	2200      	movs	r2, #0
 8008e52:	2300      	movs	r3, #0
 8008e54:	4606      	mov	r6, r0
 8008e56:	460f      	mov	r7, r1
 8008e58:	f7f7 fe66 	bl	8000b28 <__aeabi_dcmpeq>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d09a      	beq.n	8008d96 <_dtoa_r+0x616>
 8008e60:	e7cb      	b.n	8008dfa <_dtoa_r+0x67a>
 8008e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e64:	2a00      	cmp	r2, #0
 8008e66:	f000 808b 	beq.w	8008f80 <_dtoa_r+0x800>
 8008e6a:	9a06      	ldr	r2, [sp, #24]
 8008e6c:	2a01      	cmp	r2, #1
 8008e6e:	dc6e      	bgt.n	8008f4e <_dtoa_r+0x7ce>
 8008e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	d067      	beq.n	8008f46 <_dtoa_r+0x7c6>
 8008e76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e7a:	9f07      	ldr	r7, [sp, #28]
 8008e7c:	9d05      	ldr	r5, [sp, #20]
 8008e7e:	9a05      	ldr	r2, [sp, #20]
 8008e80:	2101      	movs	r1, #1
 8008e82:	441a      	add	r2, r3
 8008e84:	4620      	mov	r0, r4
 8008e86:	9205      	str	r2, [sp, #20]
 8008e88:	4498      	add	r8, r3
 8008e8a:	f000 fea5 	bl	8009bd8 <__i2b>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	dd0c      	ble.n	8008eae <_dtoa_r+0x72e>
 8008e94:	f1b8 0f00 	cmp.w	r8, #0
 8008e98:	dd09      	ble.n	8008eae <_dtoa_r+0x72e>
 8008e9a:	4545      	cmp	r5, r8
 8008e9c:	9a05      	ldr	r2, [sp, #20]
 8008e9e:	462b      	mov	r3, r5
 8008ea0:	bfa8      	it	ge
 8008ea2:	4643      	movge	r3, r8
 8008ea4:	1ad2      	subs	r2, r2, r3
 8008ea6:	9205      	str	r2, [sp, #20]
 8008ea8:	1aed      	subs	r5, r5, r3
 8008eaa:	eba8 0803 	sub.w	r8, r8, r3
 8008eae:	9b07      	ldr	r3, [sp, #28]
 8008eb0:	b1eb      	cbz	r3, 8008eee <_dtoa_r+0x76e>
 8008eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d067      	beq.n	8008f88 <_dtoa_r+0x808>
 8008eb8:	b18f      	cbz	r7, 8008ede <_dtoa_r+0x75e>
 8008eba:	4631      	mov	r1, r6
 8008ebc:	463a      	mov	r2, r7
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 ff2a 	bl	8009d18 <__pow5mult>
 8008ec4:	9a04      	ldr	r2, [sp, #16]
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	4606      	mov	r6, r0
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fe8d 	bl	8009bea <__multiply>
 8008ed0:	9904      	ldr	r1, [sp, #16]
 8008ed2:	9008      	str	r0, [sp, #32]
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 fda1 	bl	8009a1c <_Bfree>
 8008eda:	9b08      	ldr	r3, [sp, #32]
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	9b07      	ldr	r3, [sp, #28]
 8008ee0:	1bda      	subs	r2, r3, r7
 8008ee2:	d004      	beq.n	8008eee <_dtoa_r+0x76e>
 8008ee4:	9904      	ldr	r1, [sp, #16]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f000 ff16 	bl	8009d18 <__pow5mult>
 8008eec:	9004      	str	r0, [sp, #16]
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fe71 	bl	8009bd8 <__i2b>
 8008ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef8:	4607      	mov	r7, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 81d0 	beq.w	80092a0 <_dtoa_r+0xb20>
 8008f00:	461a      	mov	r2, r3
 8008f02:	4601      	mov	r1, r0
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 ff07 	bl	8009d18 <__pow5mult>
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	4607      	mov	r7, r0
 8008f10:	dc40      	bgt.n	8008f94 <_dtoa_r+0x814>
 8008f12:	9b00      	ldr	r3, [sp, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d139      	bne.n	8008f8c <_dtoa_r+0x80c>
 8008f18:	9b01      	ldr	r3, [sp, #4]
 8008f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d136      	bne.n	8008f90 <_dtoa_r+0x810>
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f28:	0d1b      	lsrs	r3, r3, #20
 8008f2a:	051b      	lsls	r3, r3, #20
 8008f2c:	b12b      	cbz	r3, 8008f3a <_dtoa_r+0x7ba>
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	3301      	adds	r3, #1
 8008f32:	9305      	str	r3, [sp, #20]
 8008f34:	f108 0801 	add.w	r8, r8, #1
 8008f38:	2301      	movs	r3, #1
 8008f3a:	9307      	str	r3, [sp, #28]
 8008f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d12a      	bne.n	8008f98 <_dtoa_r+0x818>
 8008f42:	2001      	movs	r0, #1
 8008f44:	e030      	b.n	8008fa8 <_dtoa_r+0x828>
 8008f46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f4c:	e795      	b.n	8008e7a <_dtoa_r+0x6fa>
 8008f4e:	9b07      	ldr	r3, [sp, #28]
 8008f50:	f109 37ff 	add.w	r7, r9, #4294967295
 8008f54:	42bb      	cmp	r3, r7
 8008f56:	bfbf      	itttt	lt
 8008f58:	9b07      	ldrlt	r3, [sp, #28]
 8008f5a:	9707      	strlt	r7, [sp, #28]
 8008f5c:	1afa      	sublt	r2, r7, r3
 8008f5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008f60:	bfbb      	ittet	lt
 8008f62:	189b      	addlt	r3, r3, r2
 8008f64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008f66:	1bdf      	subge	r7, r3, r7
 8008f68:	2700      	movlt	r7, #0
 8008f6a:	f1b9 0f00 	cmp.w	r9, #0
 8008f6e:	bfb5      	itete	lt
 8008f70:	9b05      	ldrlt	r3, [sp, #20]
 8008f72:	9d05      	ldrge	r5, [sp, #20]
 8008f74:	eba3 0509 	sublt.w	r5, r3, r9
 8008f78:	464b      	movge	r3, r9
 8008f7a:	bfb8      	it	lt
 8008f7c:	2300      	movlt	r3, #0
 8008f7e:	e77e      	b.n	8008e7e <_dtoa_r+0x6fe>
 8008f80:	9f07      	ldr	r7, [sp, #28]
 8008f82:	9d05      	ldr	r5, [sp, #20]
 8008f84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f86:	e783      	b.n	8008e90 <_dtoa_r+0x710>
 8008f88:	9a07      	ldr	r2, [sp, #28]
 8008f8a:	e7ab      	b.n	8008ee4 <_dtoa_r+0x764>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e7d4      	b.n	8008f3a <_dtoa_r+0x7ba>
 8008f90:	9b00      	ldr	r3, [sp, #0]
 8008f92:	e7d2      	b.n	8008f3a <_dtoa_r+0x7ba>
 8008f94:	2300      	movs	r3, #0
 8008f96:	9307      	str	r3, [sp, #28]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008f9e:	6918      	ldr	r0, [r3, #16]
 8008fa0:	f000 fdcc 	bl	8009b3c <__hi0bits>
 8008fa4:	f1c0 0020 	rsb	r0, r0, #32
 8008fa8:	4440      	add	r0, r8
 8008faa:	f010 001f 	ands.w	r0, r0, #31
 8008fae:	d047      	beq.n	8009040 <_dtoa_r+0x8c0>
 8008fb0:	f1c0 0320 	rsb	r3, r0, #32
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	dd3b      	ble.n	8009030 <_dtoa_r+0x8b0>
 8008fb8:	9b05      	ldr	r3, [sp, #20]
 8008fba:	f1c0 001c 	rsb	r0, r0, #28
 8008fbe:	4403      	add	r3, r0
 8008fc0:	9305      	str	r3, [sp, #20]
 8008fc2:	4405      	add	r5, r0
 8008fc4:	4480      	add	r8, r0
 8008fc6:	9b05      	ldr	r3, [sp, #20]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dd05      	ble.n	8008fd8 <_dtoa_r+0x858>
 8008fcc:	461a      	mov	r2, r3
 8008fce:	9904      	ldr	r1, [sp, #16]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 feef 	bl	8009db4 <__lshift>
 8008fd6:	9004      	str	r0, [sp, #16]
 8008fd8:	f1b8 0f00 	cmp.w	r8, #0
 8008fdc:	dd05      	ble.n	8008fea <_dtoa_r+0x86a>
 8008fde:	4639      	mov	r1, r7
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fee6 	bl	8009db4 <__lshift>
 8008fe8:	4607      	mov	r7, r0
 8008fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fec:	b353      	cbz	r3, 8009044 <_dtoa_r+0x8c4>
 8008fee:	4639      	mov	r1, r7
 8008ff0:	9804      	ldr	r0, [sp, #16]
 8008ff2:	f000 ff33 	bl	8009e5c <__mcmp>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	da24      	bge.n	8009044 <_dtoa_r+0x8c4>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	220a      	movs	r2, #10
 8008ffe:	9904      	ldr	r1, [sp, #16]
 8009000:	4620      	mov	r0, r4
 8009002:	f000 fd22 	bl	8009a4a <__multadd>
 8009006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009008:	9004      	str	r0, [sp, #16]
 800900a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 814d 	beq.w	80092ae <_dtoa_r+0xb2e>
 8009014:	2300      	movs	r3, #0
 8009016:	4631      	mov	r1, r6
 8009018:	220a      	movs	r2, #10
 800901a:	4620      	mov	r0, r4
 800901c:	f000 fd15 	bl	8009a4a <__multadd>
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	4606      	mov	r6, r0
 8009026:	dc4f      	bgt.n	80090c8 <_dtoa_r+0x948>
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	2b02      	cmp	r3, #2
 800902c:	dd4c      	ble.n	80090c8 <_dtoa_r+0x948>
 800902e:	e011      	b.n	8009054 <_dtoa_r+0x8d4>
 8009030:	d0c9      	beq.n	8008fc6 <_dtoa_r+0x846>
 8009032:	9a05      	ldr	r2, [sp, #20]
 8009034:	331c      	adds	r3, #28
 8009036:	441a      	add	r2, r3
 8009038:	9205      	str	r2, [sp, #20]
 800903a:	441d      	add	r5, r3
 800903c:	4498      	add	r8, r3
 800903e:	e7c2      	b.n	8008fc6 <_dtoa_r+0x846>
 8009040:	4603      	mov	r3, r0
 8009042:	e7f6      	b.n	8009032 <_dtoa_r+0x8b2>
 8009044:	f1b9 0f00 	cmp.w	r9, #0
 8009048:	dc38      	bgt.n	80090bc <_dtoa_r+0x93c>
 800904a:	9b06      	ldr	r3, [sp, #24]
 800904c:	2b02      	cmp	r3, #2
 800904e:	dd35      	ble.n	80090bc <_dtoa_r+0x93c>
 8009050:	f8cd 9008 	str.w	r9, [sp, #8]
 8009054:	9b02      	ldr	r3, [sp, #8]
 8009056:	b963      	cbnz	r3, 8009072 <_dtoa_r+0x8f2>
 8009058:	4639      	mov	r1, r7
 800905a:	2205      	movs	r2, #5
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fcf4 	bl	8009a4a <__multadd>
 8009062:	4601      	mov	r1, r0
 8009064:	4607      	mov	r7, r0
 8009066:	9804      	ldr	r0, [sp, #16]
 8009068:	f000 fef8 	bl	8009e5c <__mcmp>
 800906c:	2800      	cmp	r0, #0
 800906e:	f73f adcc 	bgt.w	8008c0a <_dtoa_r+0x48a>
 8009072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009074:	465d      	mov	r5, fp
 8009076:	ea6f 0a03 	mvn.w	sl, r3
 800907a:	f04f 0900 	mov.w	r9, #0
 800907e:	4639      	mov	r1, r7
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fccb 	bl	8009a1c <_Bfree>
 8009086:	2e00      	cmp	r6, #0
 8009088:	f43f aeb7 	beq.w	8008dfa <_dtoa_r+0x67a>
 800908c:	f1b9 0f00 	cmp.w	r9, #0
 8009090:	d005      	beq.n	800909e <_dtoa_r+0x91e>
 8009092:	45b1      	cmp	r9, r6
 8009094:	d003      	beq.n	800909e <_dtoa_r+0x91e>
 8009096:	4649      	mov	r1, r9
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fcbf 	bl	8009a1c <_Bfree>
 800909e:	4631      	mov	r1, r6
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fcbb 	bl	8009a1c <_Bfree>
 80090a6:	e6a8      	b.n	8008dfa <_dtoa_r+0x67a>
 80090a8:	2700      	movs	r7, #0
 80090aa:	463e      	mov	r6, r7
 80090ac:	e7e1      	b.n	8009072 <_dtoa_r+0x8f2>
 80090ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80090b2:	463e      	mov	r6, r7
 80090b4:	e5a9      	b.n	8008c0a <_dtoa_r+0x48a>
 80090b6:	bf00      	nop
 80090b8:	40240000 	.word	0x40240000
 80090bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090be:	f8cd 9008 	str.w	r9, [sp, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 80fa 	beq.w	80092bc <_dtoa_r+0xb3c>
 80090c8:	2d00      	cmp	r5, #0
 80090ca:	dd05      	ble.n	80090d8 <_dtoa_r+0x958>
 80090cc:	4631      	mov	r1, r6
 80090ce:	462a      	mov	r2, r5
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fe6f 	bl	8009db4 <__lshift>
 80090d6:	4606      	mov	r6, r0
 80090d8:	9b07      	ldr	r3, [sp, #28]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d04c      	beq.n	8009178 <_dtoa_r+0x9f8>
 80090de:	6871      	ldr	r1, [r6, #4]
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fc67 	bl	80099b4 <_Balloc>
 80090e6:	6932      	ldr	r2, [r6, #16]
 80090e8:	3202      	adds	r2, #2
 80090ea:	4605      	mov	r5, r0
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	f106 010c 	add.w	r1, r6, #12
 80090f2:	300c      	adds	r0, #12
 80090f4:	f7fd fd64 	bl	8006bc0 <memcpy>
 80090f8:	2201      	movs	r2, #1
 80090fa:	4629      	mov	r1, r5
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fe59 	bl	8009db4 <__lshift>
 8009102:	9b00      	ldr	r3, [sp, #0]
 8009104:	f8cd b014 	str.w	fp, [sp, #20]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	46b1      	mov	r9, r6
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	4606      	mov	r6, r0
 8009112:	4639      	mov	r1, r7
 8009114:	9804      	ldr	r0, [sp, #16]
 8009116:	f7ff faa5 	bl	8008664 <quorem>
 800911a:	4649      	mov	r1, r9
 800911c:	4605      	mov	r5, r0
 800911e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009122:	9804      	ldr	r0, [sp, #16]
 8009124:	f000 fe9a 	bl	8009e5c <__mcmp>
 8009128:	4632      	mov	r2, r6
 800912a:	9000      	str	r0, [sp, #0]
 800912c:	4639      	mov	r1, r7
 800912e:	4620      	mov	r0, r4
 8009130:	f000 feae 	bl	8009e90 <__mdiff>
 8009134:	68c3      	ldr	r3, [r0, #12]
 8009136:	4602      	mov	r2, r0
 8009138:	bb03      	cbnz	r3, 800917c <_dtoa_r+0x9fc>
 800913a:	4601      	mov	r1, r0
 800913c:	9008      	str	r0, [sp, #32]
 800913e:	9804      	ldr	r0, [sp, #16]
 8009140:	f000 fe8c 	bl	8009e5c <__mcmp>
 8009144:	9a08      	ldr	r2, [sp, #32]
 8009146:	4603      	mov	r3, r0
 8009148:	4611      	mov	r1, r2
 800914a:	4620      	mov	r0, r4
 800914c:	9308      	str	r3, [sp, #32]
 800914e:	f000 fc65 	bl	8009a1c <_Bfree>
 8009152:	9b08      	ldr	r3, [sp, #32]
 8009154:	b9a3      	cbnz	r3, 8009180 <_dtoa_r+0xa00>
 8009156:	9a06      	ldr	r2, [sp, #24]
 8009158:	b992      	cbnz	r2, 8009180 <_dtoa_r+0xa00>
 800915a:	9a07      	ldr	r2, [sp, #28]
 800915c:	b982      	cbnz	r2, 8009180 <_dtoa_r+0xa00>
 800915e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009162:	d029      	beq.n	80091b8 <_dtoa_r+0xa38>
 8009164:	9b00      	ldr	r3, [sp, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	dd01      	ble.n	800916e <_dtoa_r+0x9ee>
 800916a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800916e:	9b05      	ldr	r3, [sp, #20]
 8009170:	1c5d      	adds	r5, r3, #1
 8009172:	f883 8000 	strb.w	r8, [r3]
 8009176:	e782      	b.n	800907e <_dtoa_r+0x8fe>
 8009178:	4630      	mov	r0, r6
 800917a:	e7c2      	b.n	8009102 <_dtoa_r+0x982>
 800917c:	2301      	movs	r3, #1
 800917e:	e7e3      	b.n	8009148 <_dtoa_r+0x9c8>
 8009180:	9a00      	ldr	r2, [sp, #0]
 8009182:	2a00      	cmp	r2, #0
 8009184:	db04      	blt.n	8009190 <_dtoa_r+0xa10>
 8009186:	d125      	bne.n	80091d4 <_dtoa_r+0xa54>
 8009188:	9a06      	ldr	r2, [sp, #24]
 800918a:	bb1a      	cbnz	r2, 80091d4 <_dtoa_r+0xa54>
 800918c:	9a07      	ldr	r2, [sp, #28]
 800918e:	bb0a      	cbnz	r2, 80091d4 <_dtoa_r+0xa54>
 8009190:	2b00      	cmp	r3, #0
 8009192:	ddec      	ble.n	800916e <_dtoa_r+0x9ee>
 8009194:	2201      	movs	r2, #1
 8009196:	9904      	ldr	r1, [sp, #16]
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fe0b 	bl	8009db4 <__lshift>
 800919e:	4639      	mov	r1, r7
 80091a0:	9004      	str	r0, [sp, #16]
 80091a2:	f000 fe5b 	bl	8009e5c <__mcmp>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	dc03      	bgt.n	80091b2 <_dtoa_r+0xa32>
 80091aa:	d1e0      	bne.n	800916e <_dtoa_r+0x9ee>
 80091ac:	f018 0f01 	tst.w	r8, #1
 80091b0:	d0dd      	beq.n	800916e <_dtoa_r+0x9ee>
 80091b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091b6:	d1d8      	bne.n	800916a <_dtoa_r+0x9ea>
 80091b8:	9b05      	ldr	r3, [sp, #20]
 80091ba:	9a05      	ldr	r2, [sp, #20]
 80091bc:	1c5d      	adds	r5, r3, #1
 80091be:	2339      	movs	r3, #57	; 0x39
 80091c0:	7013      	strb	r3, [r2, #0]
 80091c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091c6:	2b39      	cmp	r3, #57	; 0x39
 80091c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80091cc:	d04f      	beq.n	800926e <_dtoa_r+0xaee>
 80091ce:	3301      	adds	r3, #1
 80091d0:	7013      	strb	r3, [r2, #0]
 80091d2:	e754      	b.n	800907e <_dtoa_r+0x8fe>
 80091d4:	9a05      	ldr	r2, [sp, #20]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f102 0501 	add.w	r5, r2, #1
 80091dc:	dd06      	ble.n	80091ec <_dtoa_r+0xa6c>
 80091de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091e2:	d0e9      	beq.n	80091b8 <_dtoa_r+0xa38>
 80091e4:	f108 0801 	add.w	r8, r8, #1
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	e7c2      	b.n	8009172 <_dtoa_r+0x9f2>
 80091ec:	9a02      	ldr	r2, [sp, #8]
 80091ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80091f2:	eba5 030b 	sub.w	r3, r5, fp
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d021      	beq.n	800923e <_dtoa_r+0xabe>
 80091fa:	2300      	movs	r3, #0
 80091fc:	220a      	movs	r2, #10
 80091fe:	9904      	ldr	r1, [sp, #16]
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fc22 	bl	8009a4a <__multadd>
 8009206:	45b1      	cmp	r9, r6
 8009208:	9004      	str	r0, [sp, #16]
 800920a:	f04f 0300 	mov.w	r3, #0
 800920e:	f04f 020a 	mov.w	r2, #10
 8009212:	4649      	mov	r1, r9
 8009214:	4620      	mov	r0, r4
 8009216:	d105      	bne.n	8009224 <_dtoa_r+0xaa4>
 8009218:	f000 fc17 	bl	8009a4a <__multadd>
 800921c:	4681      	mov	r9, r0
 800921e:	4606      	mov	r6, r0
 8009220:	9505      	str	r5, [sp, #20]
 8009222:	e776      	b.n	8009112 <_dtoa_r+0x992>
 8009224:	f000 fc11 	bl	8009a4a <__multadd>
 8009228:	4631      	mov	r1, r6
 800922a:	4681      	mov	r9, r0
 800922c:	2300      	movs	r3, #0
 800922e:	220a      	movs	r2, #10
 8009230:	4620      	mov	r0, r4
 8009232:	f000 fc0a 	bl	8009a4a <__multadd>
 8009236:	4606      	mov	r6, r0
 8009238:	e7f2      	b.n	8009220 <_dtoa_r+0xaa0>
 800923a:	f04f 0900 	mov.w	r9, #0
 800923e:	2201      	movs	r2, #1
 8009240:	9904      	ldr	r1, [sp, #16]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fdb6 	bl	8009db4 <__lshift>
 8009248:	4639      	mov	r1, r7
 800924a:	9004      	str	r0, [sp, #16]
 800924c:	f000 fe06 	bl	8009e5c <__mcmp>
 8009250:	2800      	cmp	r0, #0
 8009252:	dcb6      	bgt.n	80091c2 <_dtoa_r+0xa42>
 8009254:	d102      	bne.n	800925c <_dtoa_r+0xadc>
 8009256:	f018 0f01 	tst.w	r8, #1
 800925a:	d1b2      	bne.n	80091c2 <_dtoa_r+0xa42>
 800925c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009260:	2b30      	cmp	r3, #48	; 0x30
 8009262:	f105 32ff 	add.w	r2, r5, #4294967295
 8009266:	f47f af0a 	bne.w	800907e <_dtoa_r+0x8fe>
 800926a:	4615      	mov	r5, r2
 800926c:	e7f6      	b.n	800925c <_dtoa_r+0xadc>
 800926e:	4593      	cmp	fp, r2
 8009270:	d105      	bne.n	800927e <_dtoa_r+0xafe>
 8009272:	2331      	movs	r3, #49	; 0x31
 8009274:	f10a 0a01 	add.w	sl, sl, #1
 8009278:	f88b 3000 	strb.w	r3, [fp]
 800927c:	e6ff      	b.n	800907e <_dtoa_r+0x8fe>
 800927e:	4615      	mov	r5, r2
 8009280:	e79f      	b.n	80091c2 <_dtoa_r+0xa42>
 8009282:	f8df b064 	ldr.w	fp, [pc, #100]	; 80092e8 <_dtoa_r+0xb68>
 8009286:	e007      	b.n	8009298 <_dtoa_r+0xb18>
 8009288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800928a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80092ec <_dtoa_r+0xb6c>
 800928e:	b11b      	cbz	r3, 8009298 <_dtoa_r+0xb18>
 8009290:	f10b 0308 	add.w	r3, fp, #8
 8009294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	4658      	mov	r0, fp
 800929a:	b017      	add	sp, #92	; 0x5c
 800929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a0:	9b06      	ldr	r3, [sp, #24]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	f77f ae35 	ble.w	8008f12 <_dtoa_r+0x792>
 80092a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092aa:	9307      	str	r3, [sp, #28]
 80092ac:	e649      	b.n	8008f42 <_dtoa_r+0x7c2>
 80092ae:	9b02      	ldr	r3, [sp, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc03      	bgt.n	80092bc <_dtoa_r+0xb3c>
 80092b4:	9b06      	ldr	r3, [sp, #24]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	f73f aecc 	bgt.w	8009054 <_dtoa_r+0x8d4>
 80092bc:	465d      	mov	r5, fp
 80092be:	4639      	mov	r1, r7
 80092c0:	9804      	ldr	r0, [sp, #16]
 80092c2:	f7ff f9cf 	bl	8008664 <quorem>
 80092c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80092ca:	f805 8b01 	strb.w	r8, [r5], #1
 80092ce:	9a02      	ldr	r2, [sp, #8]
 80092d0:	eba5 030b 	sub.w	r3, r5, fp
 80092d4:	429a      	cmp	r2, r3
 80092d6:	ddb0      	ble.n	800923a <_dtoa_r+0xaba>
 80092d8:	2300      	movs	r3, #0
 80092da:	220a      	movs	r2, #10
 80092dc:	9904      	ldr	r1, [sp, #16]
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 fbb3 	bl	8009a4a <__multadd>
 80092e4:	9004      	str	r0, [sp, #16]
 80092e6:	e7ea      	b.n	80092be <_dtoa_r+0xb3e>
 80092e8:	0800b0e3 	.word	0x0800b0e3
 80092ec:	0800afa8 	.word	0x0800afa8

080092f0 <rshift>:
 80092f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f2:	6906      	ldr	r6, [r0, #16]
 80092f4:	114b      	asrs	r3, r1, #5
 80092f6:	429e      	cmp	r6, r3
 80092f8:	f100 0414 	add.w	r4, r0, #20
 80092fc:	dd30      	ble.n	8009360 <rshift+0x70>
 80092fe:	f011 011f 	ands.w	r1, r1, #31
 8009302:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009306:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800930a:	d108      	bne.n	800931e <rshift+0x2e>
 800930c:	4621      	mov	r1, r4
 800930e:	42b2      	cmp	r2, r6
 8009310:	460b      	mov	r3, r1
 8009312:	d211      	bcs.n	8009338 <rshift+0x48>
 8009314:	f852 3b04 	ldr.w	r3, [r2], #4
 8009318:	f841 3b04 	str.w	r3, [r1], #4
 800931c:	e7f7      	b.n	800930e <rshift+0x1e>
 800931e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009322:	f1c1 0c20 	rsb	ip, r1, #32
 8009326:	40cd      	lsrs	r5, r1
 8009328:	3204      	adds	r2, #4
 800932a:	4623      	mov	r3, r4
 800932c:	42b2      	cmp	r2, r6
 800932e:	4617      	mov	r7, r2
 8009330:	d30c      	bcc.n	800934c <rshift+0x5c>
 8009332:	601d      	str	r5, [r3, #0]
 8009334:	b105      	cbz	r5, 8009338 <rshift+0x48>
 8009336:	3304      	adds	r3, #4
 8009338:	1b1a      	subs	r2, r3, r4
 800933a:	42a3      	cmp	r3, r4
 800933c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009340:	bf08      	it	eq
 8009342:	2300      	moveq	r3, #0
 8009344:	6102      	str	r2, [r0, #16]
 8009346:	bf08      	it	eq
 8009348:	6143      	streq	r3, [r0, #20]
 800934a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800934c:	683f      	ldr	r7, [r7, #0]
 800934e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009352:	433d      	orrs	r5, r7
 8009354:	f843 5b04 	str.w	r5, [r3], #4
 8009358:	f852 5b04 	ldr.w	r5, [r2], #4
 800935c:	40cd      	lsrs	r5, r1
 800935e:	e7e5      	b.n	800932c <rshift+0x3c>
 8009360:	4623      	mov	r3, r4
 8009362:	e7e9      	b.n	8009338 <rshift+0x48>

08009364 <__hexdig_fun>:
 8009364:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009368:	2b09      	cmp	r3, #9
 800936a:	d802      	bhi.n	8009372 <__hexdig_fun+0xe>
 800936c:	3820      	subs	r0, #32
 800936e:	b2c0      	uxtb	r0, r0
 8009370:	4770      	bx	lr
 8009372:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009376:	2b05      	cmp	r3, #5
 8009378:	d801      	bhi.n	800937e <__hexdig_fun+0x1a>
 800937a:	3847      	subs	r0, #71	; 0x47
 800937c:	e7f7      	b.n	800936e <__hexdig_fun+0xa>
 800937e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009382:	2b05      	cmp	r3, #5
 8009384:	d801      	bhi.n	800938a <__hexdig_fun+0x26>
 8009386:	3827      	subs	r0, #39	; 0x27
 8009388:	e7f1      	b.n	800936e <__hexdig_fun+0xa>
 800938a:	2000      	movs	r0, #0
 800938c:	4770      	bx	lr

0800938e <__gethex>:
 800938e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009392:	b08b      	sub	sp, #44	; 0x2c
 8009394:	468a      	mov	sl, r1
 8009396:	9002      	str	r0, [sp, #8]
 8009398:	9816      	ldr	r0, [sp, #88]	; 0x58
 800939a:	9306      	str	r3, [sp, #24]
 800939c:	4690      	mov	r8, r2
 800939e:	f000 fadf 	bl	8009960 <__localeconv_l>
 80093a2:	6803      	ldr	r3, [r0, #0]
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f6 ff3c 	bl	8000224 <strlen>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	9001      	str	r0, [sp, #4]
 80093b0:	4403      	add	r3, r0
 80093b2:	f04f 0b00 	mov.w	fp, #0
 80093b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	f8da 3000 	ldr.w	r3, [sl]
 80093c0:	3302      	adds	r3, #2
 80093c2:	461f      	mov	r7, r3
 80093c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093c8:	2830      	cmp	r0, #48	; 0x30
 80093ca:	d06c      	beq.n	80094a6 <__gethex+0x118>
 80093cc:	f7ff ffca 	bl	8009364 <__hexdig_fun>
 80093d0:	4604      	mov	r4, r0
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d16a      	bne.n	80094ac <__gethex+0x11e>
 80093d6:	9a01      	ldr	r2, [sp, #4]
 80093d8:	9903      	ldr	r1, [sp, #12]
 80093da:	4638      	mov	r0, r7
 80093dc:	f001 fc36 	bl	800ac4c <strncmp>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d166      	bne.n	80094b2 <__gethex+0x124>
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	5cf8      	ldrb	r0, [r7, r3]
 80093e8:	18fe      	adds	r6, r7, r3
 80093ea:	f7ff ffbb 	bl	8009364 <__hexdig_fun>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d062      	beq.n	80094b8 <__gethex+0x12a>
 80093f2:	4633      	mov	r3, r6
 80093f4:	7818      	ldrb	r0, [r3, #0]
 80093f6:	2830      	cmp	r0, #48	; 0x30
 80093f8:	461f      	mov	r7, r3
 80093fa:	f103 0301 	add.w	r3, r3, #1
 80093fe:	d0f9      	beq.n	80093f4 <__gethex+0x66>
 8009400:	f7ff ffb0 	bl	8009364 <__hexdig_fun>
 8009404:	fab0 f580 	clz	r5, r0
 8009408:	096d      	lsrs	r5, r5, #5
 800940a:	4634      	mov	r4, r6
 800940c:	f04f 0b01 	mov.w	fp, #1
 8009410:	463a      	mov	r2, r7
 8009412:	4616      	mov	r6, r2
 8009414:	3201      	adds	r2, #1
 8009416:	7830      	ldrb	r0, [r6, #0]
 8009418:	f7ff ffa4 	bl	8009364 <__hexdig_fun>
 800941c:	2800      	cmp	r0, #0
 800941e:	d1f8      	bne.n	8009412 <__gethex+0x84>
 8009420:	9a01      	ldr	r2, [sp, #4]
 8009422:	9903      	ldr	r1, [sp, #12]
 8009424:	4630      	mov	r0, r6
 8009426:	f001 fc11 	bl	800ac4c <strncmp>
 800942a:	b950      	cbnz	r0, 8009442 <__gethex+0xb4>
 800942c:	b954      	cbnz	r4, 8009444 <__gethex+0xb6>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	18f4      	adds	r4, r6, r3
 8009432:	4622      	mov	r2, r4
 8009434:	4616      	mov	r6, r2
 8009436:	3201      	adds	r2, #1
 8009438:	7830      	ldrb	r0, [r6, #0]
 800943a:	f7ff ff93 	bl	8009364 <__hexdig_fun>
 800943e:	2800      	cmp	r0, #0
 8009440:	d1f8      	bne.n	8009434 <__gethex+0xa6>
 8009442:	b10c      	cbz	r4, 8009448 <__gethex+0xba>
 8009444:	1ba4      	subs	r4, r4, r6
 8009446:	00a4      	lsls	r4, r4, #2
 8009448:	7833      	ldrb	r3, [r6, #0]
 800944a:	2b50      	cmp	r3, #80	; 0x50
 800944c:	d001      	beq.n	8009452 <__gethex+0xc4>
 800944e:	2b70      	cmp	r3, #112	; 0x70
 8009450:	d140      	bne.n	80094d4 <__gethex+0x146>
 8009452:	7873      	ldrb	r3, [r6, #1]
 8009454:	2b2b      	cmp	r3, #43	; 0x2b
 8009456:	d031      	beq.n	80094bc <__gethex+0x12e>
 8009458:	2b2d      	cmp	r3, #45	; 0x2d
 800945a:	d033      	beq.n	80094c4 <__gethex+0x136>
 800945c:	1c71      	adds	r1, r6, #1
 800945e:	f04f 0900 	mov.w	r9, #0
 8009462:	7808      	ldrb	r0, [r1, #0]
 8009464:	f7ff ff7e 	bl	8009364 <__hexdig_fun>
 8009468:	1e43      	subs	r3, r0, #1
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b18      	cmp	r3, #24
 800946e:	d831      	bhi.n	80094d4 <__gethex+0x146>
 8009470:	f1a0 0210 	sub.w	r2, r0, #16
 8009474:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009478:	f7ff ff74 	bl	8009364 <__hexdig_fun>
 800947c:	1e43      	subs	r3, r0, #1
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b18      	cmp	r3, #24
 8009482:	d922      	bls.n	80094ca <__gethex+0x13c>
 8009484:	f1b9 0f00 	cmp.w	r9, #0
 8009488:	d000      	beq.n	800948c <__gethex+0xfe>
 800948a:	4252      	negs	r2, r2
 800948c:	4414      	add	r4, r2
 800948e:	f8ca 1000 	str.w	r1, [sl]
 8009492:	b30d      	cbz	r5, 80094d8 <__gethex+0x14a>
 8009494:	f1bb 0f00 	cmp.w	fp, #0
 8009498:	bf0c      	ite	eq
 800949a:	2706      	moveq	r7, #6
 800949c:	2700      	movne	r7, #0
 800949e:	4638      	mov	r0, r7
 80094a0:	b00b      	add	sp, #44	; 0x2c
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	f10b 0b01 	add.w	fp, fp, #1
 80094aa:	e78a      	b.n	80093c2 <__gethex+0x34>
 80094ac:	2500      	movs	r5, #0
 80094ae:	462c      	mov	r4, r5
 80094b0:	e7ae      	b.n	8009410 <__gethex+0x82>
 80094b2:	463e      	mov	r6, r7
 80094b4:	2501      	movs	r5, #1
 80094b6:	e7c7      	b.n	8009448 <__gethex+0xba>
 80094b8:	4604      	mov	r4, r0
 80094ba:	e7fb      	b.n	80094b4 <__gethex+0x126>
 80094bc:	f04f 0900 	mov.w	r9, #0
 80094c0:	1cb1      	adds	r1, r6, #2
 80094c2:	e7ce      	b.n	8009462 <__gethex+0xd4>
 80094c4:	f04f 0901 	mov.w	r9, #1
 80094c8:	e7fa      	b.n	80094c0 <__gethex+0x132>
 80094ca:	230a      	movs	r3, #10
 80094cc:	fb03 0202 	mla	r2, r3, r2, r0
 80094d0:	3a10      	subs	r2, #16
 80094d2:	e7cf      	b.n	8009474 <__gethex+0xe6>
 80094d4:	4631      	mov	r1, r6
 80094d6:	e7da      	b.n	800948e <__gethex+0x100>
 80094d8:	1bf3      	subs	r3, r6, r7
 80094da:	3b01      	subs	r3, #1
 80094dc:	4629      	mov	r1, r5
 80094de:	2b07      	cmp	r3, #7
 80094e0:	dc49      	bgt.n	8009576 <__gethex+0x1e8>
 80094e2:	9802      	ldr	r0, [sp, #8]
 80094e4:	f000 fa66 	bl	80099b4 <_Balloc>
 80094e8:	9b01      	ldr	r3, [sp, #4]
 80094ea:	f100 0914 	add.w	r9, r0, #20
 80094ee:	f04f 0b00 	mov.w	fp, #0
 80094f2:	f1c3 0301 	rsb	r3, r3, #1
 80094f6:	4605      	mov	r5, r0
 80094f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80094fc:	46da      	mov	sl, fp
 80094fe:	9308      	str	r3, [sp, #32]
 8009500:	42b7      	cmp	r7, r6
 8009502:	d33b      	bcc.n	800957c <__gethex+0x1ee>
 8009504:	9804      	ldr	r0, [sp, #16]
 8009506:	f840 ab04 	str.w	sl, [r0], #4
 800950a:	eba0 0009 	sub.w	r0, r0, r9
 800950e:	1080      	asrs	r0, r0, #2
 8009510:	6128      	str	r0, [r5, #16]
 8009512:	0147      	lsls	r7, r0, #5
 8009514:	4650      	mov	r0, sl
 8009516:	f000 fb11 	bl	8009b3c <__hi0bits>
 800951a:	f8d8 6000 	ldr.w	r6, [r8]
 800951e:	1a3f      	subs	r7, r7, r0
 8009520:	42b7      	cmp	r7, r6
 8009522:	dd64      	ble.n	80095ee <__gethex+0x260>
 8009524:	1bbf      	subs	r7, r7, r6
 8009526:	4639      	mov	r1, r7
 8009528:	4628      	mov	r0, r5
 800952a:	f000 fe21 	bl	800a170 <__any_on>
 800952e:	4682      	mov	sl, r0
 8009530:	b178      	cbz	r0, 8009552 <__gethex+0x1c4>
 8009532:	1e7b      	subs	r3, r7, #1
 8009534:	1159      	asrs	r1, r3, #5
 8009536:	f003 021f 	and.w	r2, r3, #31
 800953a:	f04f 0a01 	mov.w	sl, #1
 800953e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009542:	fa0a f202 	lsl.w	r2, sl, r2
 8009546:	420a      	tst	r2, r1
 8009548:	d003      	beq.n	8009552 <__gethex+0x1c4>
 800954a:	4553      	cmp	r3, sl
 800954c:	dc46      	bgt.n	80095dc <__gethex+0x24e>
 800954e:	f04f 0a02 	mov.w	sl, #2
 8009552:	4639      	mov	r1, r7
 8009554:	4628      	mov	r0, r5
 8009556:	f7ff fecb 	bl	80092f0 <rshift>
 800955a:	443c      	add	r4, r7
 800955c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009560:	42a3      	cmp	r3, r4
 8009562:	da52      	bge.n	800960a <__gethex+0x27c>
 8009564:	4629      	mov	r1, r5
 8009566:	9802      	ldr	r0, [sp, #8]
 8009568:	f000 fa58 	bl	8009a1c <_Bfree>
 800956c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800956e:	2300      	movs	r3, #0
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	27a3      	movs	r7, #163	; 0xa3
 8009574:	e793      	b.n	800949e <__gethex+0x110>
 8009576:	3101      	adds	r1, #1
 8009578:	105b      	asrs	r3, r3, #1
 800957a:	e7b0      	b.n	80094de <__gethex+0x150>
 800957c:	1e73      	subs	r3, r6, #1
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	9a07      	ldr	r2, [sp, #28]
 8009582:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009586:	4293      	cmp	r3, r2
 8009588:	d018      	beq.n	80095bc <__gethex+0x22e>
 800958a:	f1bb 0f20 	cmp.w	fp, #32
 800958e:	d107      	bne.n	80095a0 <__gethex+0x212>
 8009590:	9b04      	ldr	r3, [sp, #16]
 8009592:	f8c3 a000 	str.w	sl, [r3]
 8009596:	3304      	adds	r3, #4
 8009598:	f04f 0a00 	mov.w	sl, #0
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	46d3      	mov	fp, sl
 80095a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80095a4:	f7ff fede 	bl	8009364 <__hexdig_fun>
 80095a8:	f000 000f 	and.w	r0, r0, #15
 80095ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80095b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80095b4:	f10b 0b04 	add.w	fp, fp, #4
 80095b8:	9b05      	ldr	r3, [sp, #20]
 80095ba:	e00d      	b.n	80095d8 <__gethex+0x24a>
 80095bc:	9b05      	ldr	r3, [sp, #20]
 80095be:	9a08      	ldr	r2, [sp, #32]
 80095c0:	4413      	add	r3, r2
 80095c2:	42bb      	cmp	r3, r7
 80095c4:	d3e1      	bcc.n	800958a <__gethex+0x1fc>
 80095c6:	4618      	mov	r0, r3
 80095c8:	9a01      	ldr	r2, [sp, #4]
 80095ca:	9903      	ldr	r1, [sp, #12]
 80095cc:	9309      	str	r3, [sp, #36]	; 0x24
 80095ce:	f001 fb3d 	bl	800ac4c <strncmp>
 80095d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d1d8      	bne.n	800958a <__gethex+0x1fc>
 80095d8:	461e      	mov	r6, r3
 80095da:	e791      	b.n	8009500 <__gethex+0x172>
 80095dc:	1eb9      	subs	r1, r7, #2
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 fdc6 	bl	800a170 <__any_on>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d0b2      	beq.n	800954e <__gethex+0x1c0>
 80095e8:	f04f 0a03 	mov.w	sl, #3
 80095ec:	e7b1      	b.n	8009552 <__gethex+0x1c4>
 80095ee:	da09      	bge.n	8009604 <__gethex+0x276>
 80095f0:	1bf7      	subs	r7, r6, r7
 80095f2:	4629      	mov	r1, r5
 80095f4:	463a      	mov	r2, r7
 80095f6:	9802      	ldr	r0, [sp, #8]
 80095f8:	f000 fbdc 	bl	8009db4 <__lshift>
 80095fc:	1be4      	subs	r4, r4, r7
 80095fe:	4605      	mov	r5, r0
 8009600:	f100 0914 	add.w	r9, r0, #20
 8009604:	f04f 0a00 	mov.w	sl, #0
 8009608:	e7a8      	b.n	800955c <__gethex+0x1ce>
 800960a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800960e:	42a0      	cmp	r0, r4
 8009610:	dd6a      	ble.n	80096e8 <__gethex+0x35a>
 8009612:	1b04      	subs	r4, r0, r4
 8009614:	42a6      	cmp	r6, r4
 8009616:	dc2e      	bgt.n	8009676 <__gethex+0x2e8>
 8009618:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d022      	beq.n	8009666 <__gethex+0x2d8>
 8009620:	2b03      	cmp	r3, #3
 8009622:	d024      	beq.n	800966e <__gethex+0x2e0>
 8009624:	2b01      	cmp	r3, #1
 8009626:	d115      	bne.n	8009654 <__gethex+0x2c6>
 8009628:	42a6      	cmp	r6, r4
 800962a:	d113      	bne.n	8009654 <__gethex+0x2c6>
 800962c:	2e01      	cmp	r6, #1
 800962e:	dc0b      	bgt.n	8009648 <__gethex+0x2ba>
 8009630:	9a06      	ldr	r2, [sp, #24]
 8009632:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	2301      	movs	r3, #1
 800963a:	612b      	str	r3, [r5, #16]
 800963c:	f8c9 3000 	str.w	r3, [r9]
 8009640:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009642:	2762      	movs	r7, #98	; 0x62
 8009644:	601d      	str	r5, [r3, #0]
 8009646:	e72a      	b.n	800949e <__gethex+0x110>
 8009648:	1e71      	subs	r1, r6, #1
 800964a:	4628      	mov	r0, r5
 800964c:	f000 fd90 	bl	800a170 <__any_on>
 8009650:	2800      	cmp	r0, #0
 8009652:	d1ed      	bne.n	8009630 <__gethex+0x2a2>
 8009654:	4629      	mov	r1, r5
 8009656:	9802      	ldr	r0, [sp, #8]
 8009658:	f000 f9e0 	bl	8009a1c <_Bfree>
 800965c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800965e:	2300      	movs	r3, #0
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	2750      	movs	r7, #80	; 0x50
 8009664:	e71b      	b.n	800949e <__gethex+0x110>
 8009666:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0e1      	beq.n	8009630 <__gethex+0x2a2>
 800966c:	e7f2      	b.n	8009654 <__gethex+0x2c6>
 800966e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1dd      	bne.n	8009630 <__gethex+0x2a2>
 8009674:	e7ee      	b.n	8009654 <__gethex+0x2c6>
 8009676:	1e67      	subs	r7, r4, #1
 8009678:	f1ba 0f00 	cmp.w	sl, #0
 800967c:	d131      	bne.n	80096e2 <__gethex+0x354>
 800967e:	b127      	cbz	r7, 800968a <__gethex+0x2fc>
 8009680:	4639      	mov	r1, r7
 8009682:	4628      	mov	r0, r5
 8009684:	f000 fd74 	bl	800a170 <__any_on>
 8009688:	4682      	mov	sl, r0
 800968a:	117a      	asrs	r2, r7, #5
 800968c:	2301      	movs	r3, #1
 800968e:	f007 071f 	and.w	r7, r7, #31
 8009692:	fa03 f707 	lsl.w	r7, r3, r7
 8009696:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800969a:	4621      	mov	r1, r4
 800969c:	421f      	tst	r7, r3
 800969e:	4628      	mov	r0, r5
 80096a0:	bf18      	it	ne
 80096a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80096a6:	1b36      	subs	r6, r6, r4
 80096a8:	f7ff fe22 	bl	80092f0 <rshift>
 80096ac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80096b0:	2702      	movs	r7, #2
 80096b2:	f1ba 0f00 	cmp.w	sl, #0
 80096b6:	d048      	beq.n	800974a <__gethex+0x3bc>
 80096b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d015      	beq.n	80096ec <__gethex+0x35e>
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d017      	beq.n	80096f4 <__gethex+0x366>
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d109      	bne.n	80096dc <__gethex+0x34e>
 80096c8:	f01a 0f02 	tst.w	sl, #2
 80096cc:	d006      	beq.n	80096dc <__gethex+0x34e>
 80096ce:	f8d9 3000 	ldr.w	r3, [r9]
 80096d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80096d6:	f01a 0f01 	tst.w	sl, #1
 80096da:	d10e      	bne.n	80096fa <__gethex+0x36c>
 80096dc:	f047 0710 	orr.w	r7, r7, #16
 80096e0:	e033      	b.n	800974a <__gethex+0x3bc>
 80096e2:	f04f 0a01 	mov.w	sl, #1
 80096e6:	e7d0      	b.n	800968a <__gethex+0x2fc>
 80096e8:	2701      	movs	r7, #1
 80096ea:	e7e2      	b.n	80096b2 <__gethex+0x324>
 80096ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096ee:	f1c3 0301 	rsb	r3, r3, #1
 80096f2:	9315      	str	r3, [sp, #84]	; 0x54
 80096f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0f0      	beq.n	80096dc <__gethex+0x34e>
 80096fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80096fe:	f105 0314 	add.w	r3, r5, #20
 8009702:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009706:	eb03 010a 	add.w	r1, r3, sl
 800970a:	f04f 0c00 	mov.w	ip, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f853 2b04 	ldr.w	r2, [r3], #4
 8009714:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009718:	d01c      	beq.n	8009754 <__gethex+0x3c6>
 800971a:	3201      	adds	r2, #1
 800971c:	6002      	str	r2, [r0, #0]
 800971e:	2f02      	cmp	r7, #2
 8009720:	f105 0314 	add.w	r3, r5, #20
 8009724:	d138      	bne.n	8009798 <__gethex+0x40a>
 8009726:	f8d8 2000 	ldr.w	r2, [r8]
 800972a:	3a01      	subs	r2, #1
 800972c:	42b2      	cmp	r2, r6
 800972e:	d10a      	bne.n	8009746 <__gethex+0x3b8>
 8009730:	1171      	asrs	r1, r6, #5
 8009732:	2201      	movs	r2, #1
 8009734:	f006 061f 	and.w	r6, r6, #31
 8009738:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800973c:	fa02 f606 	lsl.w	r6, r2, r6
 8009740:	421e      	tst	r6, r3
 8009742:	bf18      	it	ne
 8009744:	4617      	movne	r7, r2
 8009746:	f047 0720 	orr.w	r7, r7, #32
 800974a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800974c:	601d      	str	r5, [r3, #0]
 800974e:	9b06      	ldr	r3, [sp, #24]
 8009750:	601c      	str	r4, [r3, #0]
 8009752:	e6a4      	b.n	800949e <__gethex+0x110>
 8009754:	4299      	cmp	r1, r3
 8009756:	f843 cc04 	str.w	ip, [r3, #-4]
 800975a:	d8d8      	bhi.n	800970e <__gethex+0x380>
 800975c:	68ab      	ldr	r3, [r5, #8]
 800975e:	4599      	cmp	r9, r3
 8009760:	db12      	blt.n	8009788 <__gethex+0x3fa>
 8009762:	6869      	ldr	r1, [r5, #4]
 8009764:	9802      	ldr	r0, [sp, #8]
 8009766:	3101      	adds	r1, #1
 8009768:	f000 f924 	bl	80099b4 <_Balloc>
 800976c:	692a      	ldr	r2, [r5, #16]
 800976e:	3202      	adds	r2, #2
 8009770:	f105 010c 	add.w	r1, r5, #12
 8009774:	4683      	mov	fp, r0
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	300c      	adds	r0, #12
 800977a:	f7fd fa21 	bl	8006bc0 <memcpy>
 800977e:	4629      	mov	r1, r5
 8009780:	9802      	ldr	r0, [sp, #8]
 8009782:	f000 f94b 	bl	8009a1c <_Bfree>
 8009786:	465d      	mov	r5, fp
 8009788:	692b      	ldr	r3, [r5, #16]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009790:	612a      	str	r2, [r5, #16]
 8009792:	2201      	movs	r2, #1
 8009794:	615a      	str	r2, [r3, #20]
 8009796:	e7c2      	b.n	800971e <__gethex+0x390>
 8009798:	692a      	ldr	r2, [r5, #16]
 800979a:	454a      	cmp	r2, r9
 800979c:	dd0b      	ble.n	80097b6 <__gethex+0x428>
 800979e:	2101      	movs	r1, #1
 80097a0:	4628      	mov	r0, r5
 80097a2:	f7ff fda5 	bl	80092f0 <rshift>
 80097a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097aa:	3401      	adds	r4, #1
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	f6ff aed9 	blt.w	8009564 <__gethex+0x1d6>
 80097b2:	2701      	movs	r7, #1
 80097b4:	e7c7      	b.n	8009746 <__gethex+0x3b8>
 80097b6:	f016 061f 	ands.w	r6, r6, #31
 80097ba:	d0fa      	beq.n	80097b2 <__gethex+0x424>
 80097bc:	449a      	add	sl, r3
 80097be:	f1c6 0620 	rsb	r6, r6, #32
 80097c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80097c6:	f000 f9b9 	bl	8009b3c <__hi0bits>
 80097ca:	42b0      	cmp	r0, r6
 80097cc:	dbe7      	blt.n	800979e <__gethex+0x410>
 80097ce:	e7f0      	b.n	80097b2 <__gethex+0x424>

080097d0 <L_shift>:
 80097d0:	f1c2 0208 	rsb	r2, r2, #8
 80097d4:	0092      	lsls	r2, r2, #2
 80097d6:	b570      	push	{r4, r5, r6, lr}
 80097d8:	f1c2 0620 	rsb	r6, r2, #32
 80097dc:	6843      	ldr	r3, [r0, #4]
 80097de:	6804      	ldr	r4, [r0, #0]
 80097e0:	fa03 f506 	lsl.w	r5, r3, r6
 80097e4:	432c      	orrs	r4, r5
 80097e6:	40d3      	lsrs	r3, r2
 80097e8:	6004      	str	r4, [r0, #0]
 80097ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80097ee:	4288      	cmp	r0, r1
 80097f0:	d3f4      	bcc.n	80097dc <L_shift+0xc>
 80097f2:	bd70      	pop	{r4, r5, r6, pc}

080097f4 <__match>:
 80097f4:	b530      	push	{r4, r5, lr}
 80097f6:	6803      	ldr	r3, [r0, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097fe:	b914      	cbnz	r4, 8009806 <__match+0x12>
 8009800:	6003      	str	r3, [r0, #0]
 8009802:	2001      	movs	r0, #1
 8009804:	bd30      	pop	{r4, r5, pc}
 8009806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800980a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800980e:	2d19      	cmp	r5, #25
 8009810:	bf98      	it	ls
 8009812:	3220      	addls	r2, #32
 8009814:	42a2      	cmp	r2, r4
 8009816:	d0f0      	beq.n	80097fa <__match+0x6>
 8009818:	2000      	movs	r0, #0
 800981a:	e7f3      	b.n	8009804 <__match+0x10>

0800981c <__hexnan>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	680b      	ldr	r3, [r1, #0]
 8009822:	6801      	ldr	r1, [r0, #0]
 8009824:	115f      	asrs	r7, r3, #5
 8009826:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800982a:	f013 031f 	ands.w	r3, r3, #31
 800982e:	b087      	sub	sp, #28
 8009830:	bf18      	it	ne
 8009832:	3704      	addne	r7, #4
 8009834:	2500      	movs	r5, #0
 8009836:	1f3e      	subs	r6, r7, #4
 8009838:	4682      	mov	sl, r0
 800983a:	4690      	mov	r8, r2
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009842:	46b1      	mov	r9, r6
 8009844:	4634      	mov	r4, r6
 8009846:	9502      	str	r5, [sp, #8]
 8009848:	46ab      	mov	fp, r5
 800984a:	784a      	ldrb	r2, [r1, #1]
 800984c:	1c4b      	adds	r3, r1, #1
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	b342      	cbz	r2, 80098a4 <__hexnan+0x88>
 8009852:	4610      	mov	r0, r2
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	9204      	str	r2, [sp, #16]
 8009858:	f7ff fd84 	bl	8009364 <__hexdig_fun>
 800985c:	2800      	cmp	r0, #0
 800985e:	d143      	bne.n	80098e8 <__hexnan+0xcc>
 8009860:	9a04      	ldr	r2, [sp, #16]
 8009862:	9905      	ldr	r1, [sp, #20]
 8009864:	2a20      	cmp	r2, #32
 8009866:	d818      	bhi.n	800989a <__hexnan+0x7e>
 8009868:	9b02      	ldr	r3, [sp, #8]
 800986a:	459b      	cmp	fp, r3
 800986c:	dd13      	ble.n	8009896 <__hexnan+0x7a>
 800986e:	454c      	cmp	r4, r9
 8009870:	d206      	bcs.n	8009880 <__hexnan+0x64>
 8009872:	2d07      	cmp	r5, #7
 8009874:	dc04      	bgt.n	8009880 <__hexnan+0x64>
 8009876:	462a      	mov	r2, r5
 8009878:	4649      	mov	r1, r9
 800987a:	4620      	mov	r0, r4
 800987c:	f7ff ffa8 	bl	80097d0 <L_shift>
 8009880:	4544      	cmp	r4, r8
 8009882:	d944      	bls.n	800990e <__hexnan+0xf2>
 8009884:	2300      	movs	r3, #0
 8009886:	f1a4 0904 	sub.w	r9, r4, #4
 800988a:	f844 3c04 	str.w	r3, [r4, #-4]
 800988e:	f8cd b008 	str.w	fp, [sp, #8]
 8009892:	464c      	mov	r4, r9
 8009894:	461d      	mov	r5, r3
 8009896:	9903      	ldr	r1, [sp, #12]
 8009898:	e7d7      	b.n	800984a <__hexnan+0x2e>
 800989a:	2a29      	cmp	r2, #41	; 0x29
 800989c:	d14a      	bne.n	8009934 <__hexnan+0x118>
 800989e:	3102      	adds	r1, #2
 80098a0:	f8ca 1000 	str.w	r1, [sl]
 80098a4:	f1bb 0f00 	cmp.w	fp, #0
 80098a8:	d044      	beq.n	8009934 <__hexnan+0x118>
 80098aa:	454c      	cmp	r4, r9
 80098ac:	d206      	bcs.n	80098bc <__hexnan+0xa0>
 80098ae:	2d07      	cmp	r5, #7
 80098b0:	dc04      	bgt.n	80098bc <__hexnan+0xa0>
 80098b2:	462a      	mov	r2, r5
 80098b4:	4649      	mov	r1, r9
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff ff8a 	bl	80097d0 <L_shift>
 80098bc:	4544      	cmp	r4, r8
 80098be:	d928      	bls.n	8009912 <__hexnan+0xf6>
 80098c0:	4643      	mov	r3, r8
 80098c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80098c6:	f843 2b04 	str.w	r2, [r3], #4
 80098ca:	42a6      	cmp	r6, r4
 80098cc:	d2f9      	bcs.n	80098c2 <__hexnan+0xa6>
 80098ce:	2200      	movs	r2, #0
 80098d0:	f843 2b04 	str.w	r2, [r3], #4
 80098d4:	429e      	cmp	r6, r3
 80098d6:	d2fb      	bcs.n	80098d0 <__hexnan+0xb4>
 80098d8:	6833      	ldr	r3, [r6, #0]
 80098da:	b91b      	cbnz	r3, 80098e4 <__hexnan+0xc8>
 80098dc:	4546      	cmp	r6, r8
 80098de:	d127      	bne.n	8009930 <__hexnan+0x114>
 80098e0:	2301      	movs	r3, #1
 80098e2:	6033      	str	r3, [r6, #0]
 80098e4:	2005      	movs	r0, #5
 80098e6:	e026      	b.n	8009936 <__hexnan+0x11a>
 80098e8:	3501      	adds	r5, #1
 80098ea:	2d08      	cmp	r5, #8
 80098ec:	f10b 0b01 	add.w	fp, fp, #1
 80098f0:	dd06      	ble.n	8009900 <__hexnan+0xe4>
 80098f2:	4544      	cmp	r4, r8
 80098f4:	d9cf      	bls.n	8009896 <__hexnan+0x7a>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80098fc:	2501      	movs	r5, #1
 80098fe:	3c04      	subs	r4, #4
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	f000 000f 	and.w	r0, r0, #15
 8009906:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800990a:	6020      	str	r0, [r4, #0]
 800990c:	e7c3      	b.n	8009896 <__hexnan+0x7a>
 800990e:	2508      	movs	r5, #8
 8009910:	e7c1      	b.n	8009896 <__hexnan+0x7a>
 8009912:	9b01      	ldr	r3, [sp, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0df      	beq.n	80098d8 <__hexnan+0xbc>
 8009918:	f04f 32ff 	mov.w	r2, #4294967295
 800991c:	f1c3 0320 	rsb	r3, r3, #32
 8009920:	fa22 f303 	lsr.w	r3, r2, r3
 8009924:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009928:	401a      	ands	r2, r3
 800992a:	f847 2c04 	str.w	r2, [r7, #-4]
 800992e:	e7d3      	b.n	80098d8 <__hexnan+0xbc>
 8009930:	3e04      	subs	r6, #4
 8009932:	e7d1      	b.n	80098d8 <__hexnan+0xbc>
 8009934:	2004      	movs	r0, #4
 8009936:	b007      	add	sp, #28
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800993c <__locale_ctype_ptr_l>:
 800993c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009940:	4770      	bx	lr
	...

08009944 <__locale_ctype_ptr>:
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <__locale_ctype_ptr+0x14>)
 8009946:	4a05      	ldr	r2, [pc, #20]	; (800995c <__locale_ctype_ptr+0x18>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	2b00      	cmp	r3, #0
 800994e:	bf08      	it	eq
 8009950:	4613      	moveq	r3, r2
 8009952:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009956:	4770      	bx	lr
 8009958:	2000000c 	.word	0x2000000c
 800995c:	20000070 	.word	0x20000070

08009960 <__localeconv_l>:
 8009960:	30f0      	adds	r0, #240	; 0xf0
 8009962:	4770      	bx	lr

08009964 <_localeconv_r>:
 8009964:	4b04      	ldr	r3, [pc, #16]	; (8009978 <_localeconv_r+0x14>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a18      	ldr	r0, [r3, #32]
 800996a:	4b04      	ldr	r3, [pc, #16]	; (800997c <_localeconv_r+0x18>)
 800996c:	2800      	cmp	r0, #0
 800996e:	bf08      	it	eq
 8009970:	4618      	moveq	r0, r3
 8009972:	30f0      	adds	r0, #240	; 0xf0
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	2000000c 	.word	0x2000000c
 800997c:	20000070 	.word	0x20000070

08009980 <malloc>:
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <malloc+0xc>)
 8009982:	4601      	mov	r1, r0
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	f000 bc71 	b.w	800a26c <_malloc_r>
 800998a:	bf00      	nop
 800998c:	2000000c 	.word	0x2000000c

08009990 <__ascii_mbtowc>:
 8009990:	b082      	sub	sp, #8
 8009992:	b901      	cbnz	r1, 8009996 <__ascii_mbtowc+0x6>
 8009994:	a901      	add	r1, sp, #4
 8009996:	b142      	cbz	r2, 80099aa <__ascii_mbtowc+0x1a>
 8009998:	b14b      	cbz	r3, 80099ae <__ascii_mbtowc+0x1e>
 800999a:	7813      	ldrb	r3, [r2, #0]
 800999c:	600b      	str	r3, [r1, #0]
 800999e:	7812      	ldrb	r2, [r2, #0]
 80099a0:	1c10      	adds	r0, r2, #0
 80099a2:	bf18      	it	ne
 80099a4:	2001      	movne	r0, #1
 80099a6:	b002      	add	sp, #8
 80099a8:	4770      	bx	lr
 80099aa:	4610      	mov	r0, r2
 80099ac:	e7fb      	b.n	80099a6 <__ascii_mbtowc+0x16>
 80099ae:	f06f 0001 	mvn.w	r0, #1
 80099b2:	e7f8      	b.n	80099a6 <__ascii_mbtowc+0x16>

080099b4 <_Balloc>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099b8:	4604      	mov	r4, r0
 80099ba:	460e      	mov	r6, r1
 80099bc:	b93d      	cbnz	r5, 80099ce <_Balloc+0x1a>
 80099be:	2010      	movs	r0, #16
 80099c0:	f7ff ffde 	bl	8009980 <malloc>
 80099c4:	6260      	str	r0, [r4, #36]	; 0x24
 80099c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099ca:	6005      	str	r5, [r0, #0]
 80099cc:	60c5      	str	r5, [r0, #12]
 80099ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80099d0:	68eb      	ldr	r3, [r5, #12]
 80099d2:	b183      	cbz	r3, 80099f6 <_Balloc+0x42>
 80099d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80099dc:	b9b8      	cbnz	r0, 8009a0e <_Balloc+0x5a>
 80099de:	2101      	movs	r1, #1
 80099e0:	fa01 f506 	lsl.w	r5, r1, r6
 80099e4:	1d6a      	adds	r2, r5, #5
 80099e6:	0092      	lsls	r2, r2, #2
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fbe2 	bl	800a1b2 <_calloc_r>
 80099ee:	b160      	cbz	r0, 8009a0a <_Balloc+0x56>
 80099f0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80099f4:	e00e      	b.n	8009a14 <_Balloc+0x60>
 80099f6:	2221      	movs	r2, #33	; 0x21
 80099f8:	2104      	movs	r1, #4
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fbd9 	bl	800a1b2 <_calloc_r>
 8009a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a02:	60e8      	str	r0, [r5, #12]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e4      	bne.n	80099d4 <_Balloc+0x20>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	bd70      	pop	{r4, r5, r6, pc}
 8009a0e:	6802      	ldr	r2, [r0, #0]
 8009a10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a14:	2300      	movs	r3, #0
 8009a16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a1a:	e7f7      	b.n	8009a0c <_Balloc+0x58>

08009a1c <_Bfree>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a20:	4606      	mov	r6, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	b93c      	cbnz	r4, 8009a36 <_Bfree+0x1a>
 8009a26:	2010      	movs	r0, #16
 8009a28:	f7ff ffaa 	bl	8009980 <malloc>
 8009a2c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a32:	6004      	str	r4, [r0, #0]
 8009a34:	60c4      	str	r4, [r0, #12]
 8009a36:	b13d      	cbz	r5, 8009a48 <_Bfree+0x2c>
 8009a38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a3a:	686a      	ldr	r2, [r5, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a42:	6029      	str	r1, [r5, #0]
 8009a44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a48:	bd70      	pop	{r4, r5, r6, pc}

08009a4a <__multadd>:
 8009a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4e:	690d      	ldr	r5, [r1, #16]
 8009a50:	461f      	mov	r7, r3
 8009a52:	4606      	mov	r6, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	f101 0c14 	add.w	ip, r1, #20
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f8dc 0000 	ldr.w	r0, [ip]
 8009a60:	b281      	uxth	r1, r0
 8009a62:	fb02 7101 	mla	r1, r2, r1, r7
 8009a66:	0c0f      	lsrs	r7, r1, #16
 8009a68:	0c00      	lsrs	r0, r0, #16
 8009a6a:	fb02 7000 	mla	r0, r2, r0, r7
 8009a6e:	b289      	uxth	r1, r1
 8009a70:	3301      	adds	r3, #1
 8009a72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009a76:	429d      	cmp	r5, r3
 8009a78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009a7c:	f84c 1b04 	str.w	r1, [ip], #4
 8009a80:	dcec      	bgt.n	8009a5c <__multadd+0x12>
 8009a82:	b1d7      	cbz	r7, 8009aba <__multadd+0x70>
 8009a84:	68a3      	ldr	r3, [r4, #8]
 8009a86:	42ab      	cmp	r3, r5
 8009a88:	dc12      	bgt.n	8009ab0 <__multadd+0x66>
 8009a8a:	6861      	ldr	r1, [r4, #4]
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	3101      	adds	r1, #1
 8009a90:	f7ff ff90 	bl	80099b4 <_Balloc>
 8009a94:	6922      	ldr	r2, [r4, #16]
 8009a96:	3202      	adds	r2, #2
 8009a98:	f104 010c 	add.w	r1, r4, #12
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	0092      	lsls	r2, r2, #2
 8009aa0:	300c      	adds	r0, #12
 8009aa2:	f7fd f88d 	bl	8006bc0 <memcpy>
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff ffb7 	bl	8009a1c <_Bfree>
 8009aae:	4644      	mov	r4, r8
 8009ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	615f      	str	r7, [r3, #20]
 8009ab8:	6125      	str	r5, [r4, #16]
 8009aba:	4620      	mov	r0, r4
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ac0 <__s2b>:
 8009ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	4615      	mov	r5, r2
 8009ac8:	461f      	mov	r7, r3
 8009aca:	2209      	movs	r2, #9
 8009acc:	3308      	adds	r3, #8
 8009ace:	4606      	mov	r6, r0
 8009ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	db20      	blt.n	8009b1e <__s2b+0x5e>
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff ff69 	bl	80099b4 <_Balloc>
 8009ae2:	9b08      	ldr	r3, [sp, #32]
 8009ae4:	6143      	str	r3, [r0, #20]
 8009ae6:	2d09      	cmp	r5, #9
 8009ae8:	f04f 0301 	mov.w	r3, #1
 8009aec:	6103      	str	r3, [r0, #16]
 8009aee:	dd19      	ble.n	8009b24 <__s2b+0x64>
 8009af0:	f104 0809 	add.w	r8, r4, #9
 8009af4:	46c1      	mov	r9, r8
 8009af6:	442c      	add	r4, r5
 8009af8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009afc:	4601      	mov	r1, r0
 8009afe:	3b30      	subs	r3, #48	; 0x30
 8009b00:	220a      	movs	r2, #10
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7ff ffa1 	bl	8009a4a <__multadd>
 8009b08:	45a1      	cmp	r9, r4
 8009b0a:	d1f5      	bne.n	8009af8 <__s2b+0x38>
 8009b0c:	eb08 0405 	add.w	r4, r8, r5
 8009b10:	3c08      	subs	r4, #8
 8009b12:	1b2d      	subs	r5, r5, r4
 8009b14:	1963      	adds	r3, r4, r5
 8009b16:	42bb      	cmp	r3, r7
 8009b18:	db07      	blt.n	8009b2a <__s2b+0x6a>
 8009b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1e:	0052      	lsls	r2, r2, #1
 8009b20:	3101      	adds	r1, #1
 8009b22:	e7d9      	b.n	8009ad8 <__s2b+0x18>
 8009b24:	340a      	adds	r4, #10
 8009b26:	2509      	movs	r5, #9
 8009b28:	e7f3      	b.n	8009b12 <__s2b+0x52>
 8009b2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b2e:	4601      	mov	r1, r0
 8009b30:	3b30      	subs	r3, #48	; 0x30
 8009b32:	220a      	movs	r2, #10
 8009b34:	4630      	mov	r0, r6
 8009b36:	f7ff ff88 	bl	8009a4a <__multadd>
 8009b3a:	e7eb      	b.n	8009b14 <__s2b+0x54>

08009b3c <__hi0bits>:
 8009b3c:	0c02      	lsrs	r2, r0, #16
 8009b3e:	0412      	lsls	r2, r2, #16
 8009b40:	4603      	mov	r3, r0
 8009b42:	b9b2      	cbnz	r2, 8009b72 <__hi0bits+0x36>
 8009b44:	0403      	lsls	r3, r0, #16
 8009b46:	2010      	movs	r0, #16
 8009b48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b4c:	bf04      	itt	eq
 8009b4e:	021b      	lsleq	r3, r3, #8
 8009b50:	3008      	addeq	r0, #8
 8009b52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b56:	bf04      	itt	eq
 8009b58:	011b      	lsleq	r3, r3, #4
 8009b5a:	3004      	addeq	r0, #4
 8009b5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b60:	bf04      	itt	eq
 8009b62:	009b      	lsleq	r3, r3, #2
 8009b64:	3002      	addeq	r0, #2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	db06      	blt.n	8009b78 <__hi0bits+0x3c>
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	d503      	bpl.n	8009b76 <__hi0bits+0x3a>
 8009b6e:	3001      	adds	r0, #1
 8009b70:	4770      	bx	lr
 8009b72:	2000      	movs	r0, #0
 8009b74:	e7e8      	b.n	8009b48 <__hi0bits+0xc>
 8009b76:	2020      	movs	r0, #32
 8009b78:	4770      	bx	lr

08009b7a <__lo0bits>:
 8009b7a:	6803      	ldr	r3, [r0, #0]
 8009b7c:	f013 0207 	ands.w	r2, r3, #7
 8009b80:	4601      	mov	r1, r0
 8009b82:	d00b      	beq.n	8009b9c <__lo0bits+0x22>
 8009b84:	07da      	lsls	r2, r3, #31
 8009b86:	d423      	bmi.n	8009bd0 <__lo0bits+0x56>
 8009b88:	0798      	lsls	r0, r3, #30
 8009b8a:	bf49      	itett	mi
 8009b8c:	085b      	lsrmi	r3, r3, #1
 8009b8e:	089b      	lsrpl	r3, r3, #2
 8009b90:	2001      	movmi	r0, #1
 8009b92:	600b      	strmi	r3, [r1, #0]
 8009b94:	bf5c      	itt	pl
 8009b96:	600b      	strpl	r3, [r1, #0]
 8009b98:	2002      	movpl	r0, #2
 8009b9a:	4770      	bx	lr
 8009b9c:	b298      	uxth	r0, r3
 8009b9e:	b9a8      	cbnz	r0, 8009bcc <__lo0bits+0x52>
 8009ba0:	0c1b      	lsrs	r3, r3, #16
 8009ba2:	2010      	movs	r0, #16
 8009ba4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ba8:	bf04      	itt	eq
 8009baa:	0a1b      	lsreq	r3, r3, #8
 8009bac:	3008      	addeq	r0, #8
 8009bae:	071a      	lsls	r2, r3, #28
 8009bb0:	bf04      	itt	eq
 8009bb2:	091b      	lsreq	r3, r3, #4
 8009bb4:	3004      	addeq	r0, #4
 8009bb6:	079a      	lsls	r2, r3, #30
 8009bb8:	bf04      	itt	eq
 8009bba:	089b      	lsreq	r3, r3, #2
 8009bbc:	3002      	addeq	r0, #2
 8009bbe:	07da      	lsls	r2, r3, #31
 8009bc0:	d402      	bmi.n	8009bc8 <__lo0bits+0x4e>
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	d006      	beq.n	8009bd4 <__lo0bits+0x5a>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	600b      	str	r3, [r1, #0]
 8009bca:	4770      	bx	lr
 8009bcc:	4610      	mov	r0, r2
 8009bce:	e7e9      	b.n	8009ba4 <__lo0bits+0x2a>
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	4770      	bx	lr
 8009bd4:	2020      	movs	r0, #32
 8009bd6:	4770      	bx	lr

08009bd8 <__i2b>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	460c      	mov	r4, r1
 8009bdc:	2101      	movs	r1, #1
 8009bde:	f7ff fee9 	bl	80099b4 <_Balloc>
 8009be2:	2201      	movs	r2, #1
 8009be4:	6144      	str	r4, [r0, #20]
 8009be6:	6102      	str	r2, [r0, #16]
 8009be8:	bd10      	pop	{r4, pc}

08009bea <__multiply>:
 8009bea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bee:	4614      	mov	r4, r2
 8009bf0:	690a      	ldr	r2, [r1, #16]
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	bfb8      	it	lt
 8009bf8:	460b      	movlt	r3, r1
 8009bfa:	4688      	mov	r8, r1
 8009bfc:	bfbc      	itt	lt
 8009bfe:	46a0      	movlt	r8, r4
 8009c00:	461c      	movlt	r4, r3
 8009c02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c12:	eb07 0609 	add.w	r6, r7, r9
 8009c16:	42b3      	cmp	r3, r6
 8009c18:	bfb8      	it	lt
 8009c1a:	3101      	addlt	r1, #1
 8009c1c:	f7ff feca 	bl	80099b4 <_Balloc>
 8009c20:	f100 0514 	add.w	r5, r0, #20
 8009c24:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c28:	462b      	mov	r3, r5
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4573      	cmp	r3, lr
 8009c2e:	d316      	bcc.n	8009c5e <__multiply+0x74>
 8009c30:	f104 0214 	add.w	r2, r4, #20
 8009c34:	f108 0114 	add.w	r1, r8, #20
 8009c38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	9201      	str	r2, [sp, #4]
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d80c      	bhi.n	8009c64 <__multiply+0x7a>
 8009c4a:	2e00      	cmp	r6, #0
 8009c4c:	dd03      	ble.n	8009c56 <__multiply+0x6c>
 8009c4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d05d      	beq.n	8009d12 <__multiply+0x128>
 8009c56:	6106      	str	r6, [r0, #16]
 8009c58:	b003      	add	sp, #12
 8009c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5e:	f843 2b04 	str.w	r2, [r3], #4
 8009c62:	e7e3      	b.n	8009c2c <__multiply+0x42>
 8009c64:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c68:	f1bb 0f00 	cmp.w	fp, #0
 8009c6c:	d023      	beq.n	8009cb6 <__multiply+0xcc>
 8009c6e:	4689      	mov	r9, r1
 8009c70:	46ac      	mov	ip, r5
 8009c72:	f04f 0800 	mov.w	r8, #0
 8009c76:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c7a:	f8dc a000 	ldr.w	sl, [ip]
 8009c7e:	b2a3      	uxth	r3, r4
 8009c80:	fa1f fa8a 	uxth.w	sl, sl
 8009c84:	fb0b a303 	mla	r3, fp, r3, sl
 8009c88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c8c:	f8dc 4000 	ldr.w	r4, [ip]
 8009c90:	4443      	add	r3, r8
 8009c92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c96:	fb0b 840a 	mla	r4, fp, sl, r8
 8009c9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c9e:	46e2      	mov	sl, ip
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ca6:	454f      	cmp	r7, r9
 8009ca8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009cac:	f84a 3b04 	str.w	r3, [sl], #4
 8009cb0:	d82b      	bhi.n	8009d0a <__multiply+0x120>
 8009cb2:	f8cc 8004 	str.w	r8, [ip, #4]
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009cbc:	3204      	adds	r2, #4
 8009cbe:	f1ba 0f00 	cmp.w	sl, #0
 8009cc2:	d020      	beq.n	8009d06 <__multiply+0x11c>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	4689      	mov	r9, r1
 8009cc8:	46a8      	mov	r8, r5
 8009cca:	f04f 0b00 	mov.w	fp, #0
 8009cce:	f8b9 c000 	ldrh.w	ip, [r9]
 8009cd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009cd6:	fb0a 440c 	mla	r4, sl, ip, r4
 8009cda:	445c      	add	r4, fp
 8009cdc:	46c4      	mov	ip, r8
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ce4:	f84c 3b04 	str.w	r3, [ip], #4
 8009ce8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009cf0:	0c1b      	lsrs	r3, r3, #16
 8009cf2:	fb0a b303 	mla	r3, sl, r3, fp
 8009cf6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cfa:	454f      	cmp	r7, r9
 8009cfc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009d00:	d805      	bhi.n	8009d0e <__multiply+0x124>
 8009d02:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d06:	3504      	adds	r5, #4
 8009d08:	e79b      	b.n	8009c42 <__multiply+0x58>
 8009d0a:	46d4      	mov	ip, sl
 8009d0c:	e7b3      	b.n	8009c76 <__multiply+0x8c>
 8009d0e:	46e0      	mov	r8, ip
 8009d10:	e7dd      	b.n	8009cce <__multiply+0xe4>
 8009d12:	3e01      	subs	r6, #1
 8009d14:	e799      	b.n	8009c4a <__multiply+0x60>
	...

08009d18 <__pow5mult>:
 8009d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	f012 0203 	ands.w	r2, r2, #3
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	d007      	beq.n	8009d38 <__pow5mult+0x20>
 8009d28:	3a01      	subs	r2, #1
 8009d2a:	4c21      	ldr	r4, [pc, #132]	; (8009db0 <__pow5mult+0x98>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d32:	f7ff fe8a 	bl	8009a4a <__multadd>
 8009d36:	4607      	mov	r7, r0
 8009d38:	10ad      	asrs	r5, r5, #2
 8009d3a:	d035      	beq.n	8009da8 <__pow5mult+0x90>
 8009d3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d3e:	b93c      	cbnz	r4, 8009d50 <__pow5mult+0x38>
 8009d40:	2010      	movs	r0, #16
 8009d42:	f7ff fe1d 	bl	8009980 <malloc>
 8009d46:	6270      	str	r0, [r6, #36]	; 0x24
 8009d48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d4c:	6004      	str	r4, [r0, #0]
 8009d4e:	60c4      	str	r4, [r0, #12]
 8009d50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d58:	b94c      	cbnz	r4, 8009d6e <__pow5mult+0x56>
 8009d5a:	f240 2171 	movw	r1, #625	; 0x271
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7ff ff3a 	bl	8009bd8 <__i2b>
 8009d64:	2300      	movs	r3, #0
 8009d66:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	6003      	str	r3, [r0, #0]
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	07eb      	lsls	r3, r5, #31
 8009d74:	d50a      	bpl.n	8009d8c <__pow5mult+0x74>
 8009d76:	4639      	mov	r1, r7
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ff35 	bl	8009bea <__multiply>
 8009d80:	4639      	mov	r1, r7
 8009d82:	4681      	mov	r9, r0
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff fe49 	bl	8009a1c <_Bfree>
 8009d8a:	464f      	mov	r7, r9
 8009d8c:	106d      	asrs	r5, r5, #1
 8009d8e:	d00b      	beq.n	8009da8 <__pow5mult+0x90>
 8009d90:	6820      	ldr	r0, [r4, #0]
 8009d92:	b938      	cbnz	r0, 8009da4 <__pow5mult+0x8c>
 8009d94:	4622      	mov	r2, r4
 8009d96:	4621      	mov	r1, r4
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff ff26 	bl	8009bea <__multiply>
 8009d9e:	6020      	str	r0, [r4, #0]
 8009da0:	f8c0 8000 	str.w	r8, [r0]
 8009da4:	4604      	mov	r4, r0
 8009da6:	e7e4      	b.n	8009d72 <__pow5mult+0x5a>
 8009da8:	4638      	mov	r0, r7
 8009daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dae:	bf00      	nop
 8009db0:	0800b0b0 	.word	0x0800b0b0

08009db4 <__lshift>:
 8009db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db8:	460c      	mov	r4, r1
 8009dba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	6849      	ldr	r1, [r1, #4]
 8009dc2:	eb0a 0903 	add.w	r9, sl, r3
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	4607      	mov	r7, r0
 8009dca:	4616      	mov	r6, r2
 8009dcc:	f109 0501 	add.w	r5, r9, #1
 8009dd0:	42ab      	cmp	r3, r5
 8009dd2:	db32      	blt.n	8009e3a <__lshift+0x86>
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f7ff fded 	bl	80099b4 <_Balloc>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4680      	mov	r8, r0
 8009dde:	f100 0114 	add.w	r1, r0, #20
 8009de2:	461a      	mov	r2, r3
 8009de4:	4553      	cmp	r3, sl
 8009de6:	db2b      	blt.n	8009e40 <__lshift+0x8c>
 8009de8:	6920      	ldr	r0, [r4, #16]
 8009dea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dee:	f104 0314 	add.w	r3, r4, #20
 8009df2:	f016 021f 	ands.w	r2, r6, #31
 8009df6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dfa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dfe:	d025      	beq.n	8009e4c <__lshift+0x98>
 8009e00:	f1c2 0e20 	rsb	lr, r2, #32
 8009e04:	2000      	movs	r0, #0
 8009e06:	681e      	ldr	r6, [r3, #0]
 8009e08:	468a      	mov	sl, r1
 8009e0a:	4096      	lsls	r6, r2
 8009e0c:	4330      	orrs	r0, r6
 8009e0e:	f84a 0b04 	str.w	r0, [sl], #4
 8009e12:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e16:	459c      	cmp	ip, r3
 8009e18:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e1c:	d814      	bhi.n	8009e48 <__lshift+0x94>
 8009e1e:	6048      	str	r0, [r1, #4]
 8009e20:	b108      	cbz	r0, 8009e26 <__lshift+0x72>
 8009e22:	f109 0502 	add.w	r5, r9, #2
 8009e26:	3d01      	subs	r5, #1
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e2e:	4621      	mov	r1, r4
 8009e30:	f7ff fdf4 	bl	8009a1c <_Bfree>
 8009e34:	4640      	mov	r0, r8
 8009e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3a:	3101      	adds	r1, #1
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	e7c7      	b.n	8009dd0 <__lshift+0x1c>
 8009e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e44:	3301      	adds	r3, #1
 8009e46:	e7cd      	b.n	8009de4 <__lshift+0x30>
 8009e48:	4651      	mov	r1, sl
 8009e4a:	e7dc      	b.n	8009e06 <__lshift+0x52>
 8009e4c:	3904      	subs	r1, #4
 8009e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e52:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e56:	459c      	cmp	ip, r3
 8009e58:	d8f9      	bhi.n	8009e4e <__lshift+0x9a>
 8009e5a:	e7e4      	b.n	8009e26 <__lshift+0x72>

08009e5c <__mcmp>:
 8009e5c:	6903      	ldr	r3, [r0, #16]
 8009e5e:	690a      	ldr	r2, [r1, #16]
 8009e60:	1a9b      	subs	r3, r3, r2
 8009e62:	b530      	push	{r4, r5, lr}
 8009e64:	d10c      	bne.n	8009e80 <__mcmp+0x24>
 8009e66:	0092      	lsls	r2, r2, #2
 8009e68:	3014      	adds	r0, #20
 8009e6a:	3114      	adds	r1, #20
 8009e6c:	1884      	adds	r4, r0, r2
 8009e6e:	4411      	add	r1, r2
 8009e70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e78:	4295      	cmp	r5, r2
 8009e7a:	d003      	beq.n	8009e84 <__mcmp+0x28>
 8009e7c:	d305      	bcc.n	8009e8a <__mcmp+0x2e>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4618      	mov	r0, r3
 8009e82:	bd30      	pop	{r4, r5, pc}
 8009e84:	42a0      	cmp	r0, r4
 8009e86:	d3f3      	bcc.n	8009e70 <__mcmp+0x14>
 8009e88:	e7fa      	b.n	8009e80 <__mcmp+0x24>
 8009e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8e:	e7f7      	b.n	8009e80 <__mcmp+0x24>

08009e90 <__mdiff>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	460d      	mov	r5, r1
 8009e96:	4607      	mov	r7, r0
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	f7ff ffdd 	bl	8009e5c <__mcmp>
 8009ea2:	1e06      	subs	r6, r0, #0
 8009ea4:	d108      	bne.n	8009eb8 <__mdiff+0x28>
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff fd83 	bl	80099b4 <_Balloc>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb8:	bfa4      	itt	ge
 8009eba:	4623      	movge	r3, r4
 8009ebc:	462c      	movge	r4, r5
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	6861      	ldr	r1, [r4, #4]
 8009ec2:	bfa6      	itte	ge
 8009ec4:	461d      	movge	r5, r3
 8009ec6:	2600      	movge	r6, #0
 8009ec8:	2601      	movlt	r6, #1
 8009eca:	f7ff fd73 	bl	80099b4 <_Balloc>
 8009ece:	692b      	ldr	r3, [r5, #16]
 8009ed0:	60c6      	str	r6, [r0, #12]
 8009ed2:	6926      	ldr	r6, [r4, #16]
 8009ed4:	f105 0914 	add.w	r9, r5, #20
 8009ed8:	f104 0214 	add.w	r2, r4, #20
 8009edc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009ee0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ee4:	f100 0514 	add.w	r5, r0, #20
 8009ee8:	f04f 0e00 	mov.w	lr, #0
 8009eec:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ef0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ef4:	fa1e f18a 	uxtah	r1, lr, sl
 8009ef8:	b2a3      	uxth	r3, r4
 8009efa:	1ac9      	subs	r1, r1, r3
 8009efc:	0c23      	lsrs	r3, r4, #16
 8009efe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009f02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f06:	b289      	uxth	r1, r1
 8009f08:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f0c:	45c8      	cmp	r8, r9
 8009f0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f12:	4694      	mov	ip, r2
 8009f14:	f845 3b04 	str.w	r3, [r5], #4
 8009f18:	d8e8      	bhi.n	8009eec <__mdiff+0x5c>
 8009f1a:	45bc      	cmp	ip, r7
 8009f1c:	d304      	bcc.n	8009f28 <__mdiff+0x98>
 8009f1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009f22:	b183      	cbz	r3, 8009f46 <__mdiff+0xb6>
 8009f24:	6106      	str	r6, [r0, #16]
 8009f26:	e7c5      	b.n	8009eb4 <__mdiff+0x24>
 8009f28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009f2c:	fa1e f381 	uxtah	r3, lr, r1
 8009f30:	141a      	asrs	r2, r3, #16
 8009f32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f3c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009f40:	f845 3b04 	str.w	r3, [r5], #4
 8009f44:	e7e9      	b.n	8009f1a <__mdiff+0x8a>
 8009f46:	3e01      	subs	r6, #1
 8009f48:	e7e9      	b.n	8009f1e <__mdiff+0x8e>
	...

08009f4c <__ulp>:
 8009f4c:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <__ulp+0x4c>)
 8009f4e:	ee10 2a90 	vmov	r2, s1
 8009f52:	401a      	ands	r2, r3
 8009f54:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dd04      	ble.n	8009f66 <__ulp+0x1a>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	4619      	mov	r1, r3
 8009f60:	ec41 0b10 	vmov	d0, r0, r1
 8009f64:	4770      	bx	lr
 8009f66:	425b      	negs	r3, r3
 8009f68:	151b      	asrs	r3, r3, #20
 8009f6a:	2b13      	cmp	r3, #19
 8009f6c:	f04f 0000 	mov.w	r0, #0
 8009f70:	f04f 0100 	mov.w	r1, #0
 8009f74:	dc04      	bgt.n	8009f80 <__ulp+0x34>
 8009f76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009f7a:	fa42 f103 	asr.w	r1, r2, r3
 8009f7e:	e7ef      	b.n	8009f60 <__ulp+0x14>
 8009f80:	3b14      	subs	r3, #20
 8009f82:	2b1e      	cmp	r3, #30
 8009f84:	f04f 0201 	mov.w	r2, #1
 8009f88:	bfda      	itte	le
 8009f8a:	f1c3 031f 	rsble	r3, r3, #31
 8009f8e:	fa02 f303 	lslle.w	r3, r2, r3
 8009f92:	4613      	movgt	r3, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	e7e3      	b.n	8009f60 <__ulp+0x14>
 8009f98:	7ff00000 	.word	0x7ff00000

08009f9c <__b2d>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	6905      	ldr	r5, [r0, #16]
 8009fa0:	f100 0714 	add.w	r7, r0, #20
 8009fa4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009fa8:	1f2e      	subs	r6, r5, #4
 8009faa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f7ff fdc4 	bl	8009b3c <__hi0bits>
 8009fb4:	f1c0 0320 	rsb	r3, r0, #32
 8009fb8:	280a      	cmp	r0, #10
 8009fba:	600b      	str	r3, [r1, #0]
 8009fbc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a034 <__b2d+0x98>
 8009fc0:	dc14      	bgt.n	8009fec <__b2d+0x50>
 8009fc2:	f1c0 0e0b 	rsb	lr, r0, #11
 8009fc6:	fa24 f10e 	lsr.w	r1, r4, lr
 8009fca:	42b7      	cmp	r7, r6
 8009fcc:	ea41 030c 	orr.w	r3, r1, ip
 8009fd0:	bf34      	ite	cc
 8009fd2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009fd6:	2100      	movcs	r1, #0
 8009fd8:	3015      	adds	r0, #21
 8009fda:	fa04 f000 	lsl.w	r0, r4, r0
 8009fde:	fa21 f10e 	lsr.w	r1, r1, lr
 8009fe2:	ea40 0201 	orr.w	r2, r0, r1
 8009fe6:	ec43 2b10 	vmov	d0, r2, r3
 8009fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fec:	42b7      	cmp	r7, r6
 8009fee:	bf3a      	itte	cc
 8009ff0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ff4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ff8:	2100      	movcs	r1, #0
 8009ffa:	380b      	subs	r0, #11
 8009ffc:	d015      	beq.n	800a02a <__b2d+0x8e>
 8009ffe:	4084      	lsls	r4, r0
 800a000:	f1c0 0520 	rsb	r5, r0, #32
 800a004:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a008:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a00c:	42be      	cmp	r6, r7
 800a00e:	fa21 fc05 	lsr.w	ip, r1, r5
 800a012:	ea44 030c 	orr.w	r3, r4, ip
 800a016:	bf8c      	ite	hi
 800a018:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a01c:	2400      	movls	r4, #0
 800a01e:	fa01 f000 	lsl.w	r0, r1, r0
 800a022:	40ec      	lsrs	r4, r5
 800a024:	ea40 0204 	orr.w	r2, r0, r4
 800a028:	e7dd      	b.n	8009fe6 <__b2d+0x4a>
 800a02a:	ea44 030c 	orr.w	r3, r4, ip
 800a02e:	460a      	mov	r2, r1
 800a030:	e7d9      	b.n	8009fe6 <__b2d+0x4a>
 800a032:	bf00      	nop
 800a034:	3ff00000 	.word	0x3ff00000

0800a038 <__d2b>:
 800a038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	460e      	mov	r6, r1
 800a03e:	2101      	movs	r1, #1
 800a040:	ec59 8b10 	vmov	r8, r9, d0
 800a044:	4615      	mov	r5, r2
 800a046:	f7ff fcb5 	bl	80099b4 <_Balloc>
 800a04a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a04e:	4607      	mov	r7, r0
 800a050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a054:	bb34      	cbnz	r4, 800a0a4 <__d2b+0x6c>
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	f1b8 0300 	subs.w	r3, r8, #0
 800a05c:	d027      	beq.n	800a0ae <__d2b+0x76>
 800a05e:	a802      	add	r0, sp, #8
 800a060:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a064:	f7ff fd89 	bl	8009b7a <__lo0bits>
 800a068:	9900      	ldr	r1, [sp, #0]
 800a06a:	b1f0      	cbz	r0, 800a0aa <__d2b+0x72>
 800a06c:	9a01      	ldr	r2, [sp, #4]
 800a06e:	f1c0 0320 	rsb	r3, r0, #32
 800a072:	fa02 f303 	lsl.w	r3, r2, r3
 800a076:	430b      	orrs	r3, r1
 800a078:	40c2      	lsrs	r2, r0
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	9201      	str	r2, [sp, #4]
 800a07e:	9b01      	ldr	r3, [sp, #4]
 800a080:	61bb      	str	r3, [r7, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	bf14      	ite	ne
 800a086:	2102      	movne	r1, #2
 800a088:	2101      	moveq	r1, #1
 800a08a:	6139      	str	r1, [r7, #16]
 800a08c:	b1c4      	cbz	r4, 800a0c0 <__d2b+0x88>
 800a08e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a092:	4404      	add	r4, r0
 800a094:	6034      	str	r4, [r6, #0]
 800a096:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a09a:	6028      	str	r0, [r5, #0]
 800a09c:	4638      	mov	r0, r7
 800a09e:	b003      	add	sp, #12
 800a0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a8:	e7d5      	b.n	800a056 <__d2b+0x1e>
 800a0aa:	6179      	str	r1, [r7, #20]
 800a0ac:	e7e7      	b.n	800a07e <__d2b+0x46>
 800a0ae:	a801      	add	r0, sp, #4
 800a0b0:	f7ff fd63 	bl	8009b7a <__lo0bits>
 800a0b4:	9b01      	ldr	r3, [sp, #4]
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	6139      	str	r1, [r7, #16]
 800a0bc:	3020      	adds	r0, #32
 800a0be:	e7e5      	b.n	800a08c <__d2b+0x54>
 800a0c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a0c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0c8:	6030      	str	r0, [r6, #0]
 800a0ca:	6918      	ldr	r0, [r3, #16]
 800a0cc:	f7ff fd36 	bl	8009b3c <__hi0bits>
 800a0d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a0d4:	e7e1      	b.n	800a09a <__d2b+0x62>

0800a0d6 <__ratio>:
 800a0d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	4688      	mov	r8, r1
 800a0dc:	4669      	mov	r1, sp
 800a0de:	4681      	mov	r9, r0
 800a0e0:	f7ff ff5c 	bl	8009f9c <__b2d>
 800a0e4:	a901      	add	r1, sp, #4
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	ec57 6b10 	vmov	r6, r7, d0
 800a0ec:	f7ff ff56 	bl	8009f9c <__b2d>
 800a0f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a0f8:	eba3 0c02 	sub.w	ip, r3, r2
 800a0fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a106:	ec5b ab10 	vmov	sl, fp, d0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfce      	itee	gt
 800a10e:	463a      	movgt	r2, r7
 800a110:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a114:	465a      	movle	r2, fp
 800a116:	4659      	mov	r1, fp
 800a118:	463d      	mov	r5, r7
 800a11a:	bfd4      	ite	le
 800a11c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a120:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a124:	4630      	mov	r0, r6
 800a126:	ee10 2a10 	vmov	r2, s0
 800a12a:	460b      	mov	r3, r1
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7f6 fbbd 	bl	80008ac <__aeabi_ddiv>
 800a132:	ec41 0b10 	vmov	d0, r0, r1
 800a136:	b003      	add	sp, #12
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a13c <__copybits>:
 800a13c:	3901      	subs	r1, #1
 800a13e:	b510      	push	{r4, lr}
 800a140:	1149      	asrs	r1, r1, #5
 800a142:	6914      	ldr	r4, [r2, #16]
 800a144:	3101      	adds	r1, #1
 800a146:	f102 0314 	add.w	r3, r2, #20
 800a14a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a14e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a152:	42a3      	cmp	r3, r4
 800a154:	4602      	mov	r2, r0
 800a156:	d303      	bcc.n	800a160 <__copybits+0x24>
 800a158:	2300      	movs	r3, #0
 800a15a:	428a      	cmp	r2, r1
 800a15c:	d305      	bcc.n	800a16a <__copybits+0x2e>
 800a15e:	bd10      	pop	{r4, pc}
 800a160:	f853 2b04 	ldr.w	r2, [r3], #4
 800a164:	f840 2b04 	str.w	r2, [r0], #4
 800a168:	e7f3      	b.n	800a152 <__copybits+0x16>
 800a16a:	f842 3b04 	str.w	r3, [r2], #4
 800a16e:	e7f4      	b.n	800a15a <__copybits+0x1e>

0800a170 <__any_on>:
 800a170:	f100 0214 	add.w	r2, r0, #20
 800a174:	6900      	ldr	r0, [r0, #16]
 800a176:	114b      	asrs	r3, r1, #5
 800a178:	4298      	cmp	r0, r3
 800a17a:	b510      	push	{r4, lr}
 800a17c:	db11      	blt.n	800a1a2 <__any_on+0x32>
 800a17e:	dd0a      	ble.n	800a196 <__any_on+0x26>
 800a180:	f011 011f 	ands.w	r1, r1, #31
 800a184:	d007      	beq.n	800a196 <__any_on+0x26>
 800a186:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a18a:	fa24 f001 	lsr.w	r0, r4, r1
 800a18e:	fa00 f101 	lsl.w	r1, r0, r1
 800a192:	428c      	cmp	r4, r1
 800a194:	d10b      	bne.n	800a1ae <__any_on+0x3e>
 800a196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d803      	bhi.n	800a1a6 <__any_on+0x36>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	e7f7      	b.n	800a196 <__any_on+0x26>
 800a1a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1aa:	2900      	cmp	r1, #0
 800a1ac:	d0f5      	beq.n	800a19a <__any_on+0x2a>
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	e7f6      	b.n	800a1a0 <__any_on+0x30>

0800a1b2 <_calloc_r>:
 800a1b2:	b538      	push	{r3, r4, r5, lr}
 800a1b4:	fb02 f401 	mul.w	r4, r2, r1
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f000 f857 	bl	800a26c <_malloc_r>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b118      	cbz	r0, 800a1ca <_calloc_r+0x18>
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	f7fc fd06 	bl	8006bd6 <memset>
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a1d0 <_free_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	d045      	beq.n	800a264 <_free_r+0x94>
 800a1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1dc:	1f0c      	subs	r4, r1, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	bfb8      	it	lt
 800a1e2:	18e4      	addlt	r4, r4, r3
 800a1e4:	f000 fe30 	bl	800ae48 <__malloc_lock>
 800a1e8:	4a1f      	ldr	r2, [pc, #124]	; (800a268 <_free_r+0x98>)
 800a1ea:	6813      	ldr	r3, [r2, #0]
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	b933      	cbnz	r3, 800a1fe <_free_r+0x2e>
 800a1f0:	6063      	str	r3, [r4, #4]
 800a1f2:	6014      	str	r4, [r2, #0]
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fa:	f000 be26 	b.w	800ae4a <__malloc_unlock>
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	d90c      	bls.n	800a21c <_free_r+0x4c>
 800a202:	6821      	ldr	r1, [r4, #0]
 800a204:	1862      	adds	r2, r4, r1
 800a206:	4293      	cmp	r3, r2
 800a208:	bf04      	itt	eq
 800a20a:	681a      	ldreq	r2, [r3, #0]
 800a20c:	685b      	ldreq	r3, [r3, #4]
 800a20e:	6063      	str	r3, [r4, #4]
 800a210:	bf04      	itt	eq
 800a212:	1852      	addeq	r2, r2, r1
 800a214:	6022      	streq	r2, [r4, #0]
 800a216:	6004      	str	r4, [r0, #0]
 800a218:	e7ec      	b.n	800a1f4 <_free_r+0x24>
 800a21a:	4613      	mov	r3, r2
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	b10a      	cbz	r2, 800a224 <_free_r+0x54>
 800a220:	42a2      	cmp	r2, r4
 800a222:	d9fa      	bls.n	800a21a <_free_r+0x4a>
 800a224:	6819      	ldr	r1, [r3, #0]
 800a226:	1858      	adds	r0, r3, r1
 800a228:	42a0      	cmp	r0, r4
 800a22a:	d10b      	bne.n	800a244 <_free_r+0x74>
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	4401      	add	r1, r0
 800a230:	1858      	adds	r0, r3, r1
 800a232:	4282      	cmp	r2, r0
 800a234:	6019      	str	r1, [r3, #0]
 800a236:	d1dd      	bne.n	800a1f4 <_free_r+0x24>
 800a238:	6810      	ldr	r0, [r2, #0]
 800a23a:	6852      	ldr	r2, [r2, #4]
 800a23c:	605a      	str	r2, [r3, #4]
 800a23e:	4401      	add	r1, r0
 800a240:	6019      	str	r1, [r3, #0]
 800a242:	e7d7      	b.n	800a1f4 <_free_r+0x24>
 800a244:	d902      	bls.n	800a24c <_free_r+0x7c>
 800a246:	230c      	movs	r3, #12
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	e7d3      	b.n	800a1f4 <_free_r+0x24>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	1821      	adds	r1, r4, r0
 800a250:	428a      	cmp	r2, r1
 800a252:	bf04      	itt	eq
 800a254:	6811      	ldreq	r1, [r2, #0]
 800a256:	6852      	ldreq	r2, [r2, #4]
 800a258:	6062      	str	r2, [r4, #4]
 800a25a:	bf04      	itt	eq
 800a25c:	1809      	addeq	r1, r1, r0
 800a25e:	6021      	streq	r1, [r4, #0]
 800a260:	605c      	str	r4, [r3, #4]
 800a262:	e7c7      	b.n	800a1f4 <_free_r+0x24>
 800a264:	bd38      	pop	{r3, r4, r5, pc}
 800a266:	bf00      	nop
 800a268:	20000200 	.word	0x20000200

0800a26c <_malloc_r>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	1ccd      	adds	r5, r1, #3
 800a270:	f025 0503 	bic.w	r5, r5, #3
 800a274:	3508      	adds	r5, #8
 800a276:	2d0c      	cmp	r5, #12
 800a278:	bf38      	it	cc
 800a27a:	250c      	movcc	r5, #12
 800a27c:	2d00      	cmp	r5, #0
 800a27e:	4606      	mov	r6, r0
 800a280:	db01      	blt.n	800a286 <_malloc_r+0x1a>
 800a282:	42a9      	cmp	r1, r5
 800a284:	d903      	bls.n	800a28e <_malloc_r+0x22>
 800a286:	230c      	movs	r3, #12
 800a288:	6033      	str	r3, [r6, #0]
 800a28a:	2000      	movs	r0, #0
 800a28c:	bd70      	pop	{r4, r5, r6, pc}
 800a28e:	f000 fddb 	bl	800ae48 <__malloc_lock>
 800a292:	4a21      	ldr	r2, [pc, #132]	; (800a318 <_malloc_r+0xac>)
 800a294:	6814      	ldr	r4, [r2, #0]
 800a296:	4621      	mov	r1, r4
 800a298:	b991      	cbnz	r1, 800a2c0 <_malloc_r+0x54>
 800a29a:	4c20      	ldr	r4, [pc, #128]	; (800a31c <_malloc_r+0xb0>)
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	b91b      	cbnz	r3, 800a2a8 <_malloc_r+0x3c>
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f000 fc91 	bl	800abc8 <_sbrk_r>
 800a2a6:	6020      	str	r0, [r4, #0]
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f000 fc8c 	bl	800abc8 <_sbrk_r>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d124      	bne.n	800a2fe <_malloc_r+0x92>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	6033      	str	r3, [r6, #0]
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 fdc6 	bl	800ae4a <__malloc_unlock>
 800a2be:	e7e4      	b.n	800a28a <_malloc_r+0x1e>
 800a2c0:	680b      	ldr	r3, [r1, #0]
 800a2c2:	1b5b      	subs	r3, r3, r5
 800a2c4:	d418      	bmi.n	800a2f8 <_malloc_r+0x8c>
 800a2c6:	2b0b      	cmp	r3, #11
 800a2c8:	d90f      	bls.n	800a2ea <_malloc_r+0x7e>
 800a2ca:	600b      	str	r3, [r1, #0]
 800a2cc:	50cd      	str	r5, [r1, r3]
 800a2ce:	18cc      	adds	r4, r1, r3
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 fdba 	bl	800ae4a <__malloc_unlock>
 800a2d6:	f104 000b 	add.w	r0, r4, #11
 800a2da:	1d23      	adds	r3, r4, #4
 800a2dc:	f020 0007 	bic.w	r0, r0, #7
 800a2e0:	1ac3      	subs	r3, r0, r3
 800a2e2:	d0d3      	beq.n	800a28c <_malloc_r+0x20>
 800a2e4:	425a      	negs	r2, r3
 800a2e6:	50e2      	str	r2, [r4, r3]
 800a2e8:	e7d0      	b.n	800a28c <_malloc_r+0x20>
 800a2ea:	428c      	cmp	r4, r1
 800a2ec:	684b      	ldr	r3, [r1, #4]
 800a2ee:	bf16      	itet	ne
 800a2f0:	6063      	strne	r3, [r4, #4]
 800a2f2:	6013      	streq	r3, [r2, #0]
 800a2f4:	460c      	movne	r4, r1
 800a2f6:	e7eb      	b.n	800a2d0 <_malloc_r+0x64>
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	6849      	ldr	r1, [r1, #4]
 800a2fc:	e7cc      	b.n	800a298 <_malloc_r+0x2c>
 800a2fe:	1cc4      	adds	r4, r0, #3
 800a300:	f024 0403 	bic.w	r4, r4, #3
 800a304:	42a0      	cmp	r0, r4
 800a306:	d005      	beq.n	800a314 <_malloc_r+0xa8>
 800a308:	1a21      	subs	r1, r4, r0
 800a30a:	4630      	mov	r0, r6
 800a30c:	f000 fc5c 	bl	800abc8 <_sbrk_r>
 800a310:	3001      	adds	r0, #1
 800a312:	d0cf      	beq.n	800a2b4 <_malloc_r+0x48>
 800a314:	6025      	str	r5, [r4, #0]
 800a316:	e7db      	b.n	800a2d0 <_malloc_r+0x64>
 800a318:	20000200 	.word	0x20000200
 800a31c:	20000204 	.word	0x20000204

0800a320 <__ssputs_r>:
 800a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a324:	688e      	ldr	r6, [r1, #8]
 800a326:	429e      	cmp	r6, r3
 800a328:	4682      	mov	sl, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	4690      	mov	r8, r2
 800a32e:	4699      	mov	r9, r3
 800a330:	d837      	bhi.n	800a3a2 <__ssputs_r+0x82>
 800a332:	898a      	ldrh	r2, [r1, #12]
 800a334:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a338:	d031      	beq.n	800a39e <__ssputs_r+0x7e>
 800a33a:	6825      	ldr	r5, [r4, #0]
 800a33c:	6909      	ldr	r1, [r1, #16]
 800a33e:	1a6f      	subs	r7, r5, r1
 800a340:	6965      	ldr	r5, [r4, #20]
 800a342:	2302      	movs	r3, #2
 800a344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a348:	fb95 f5f3 	sdiv	r5, r5, r3
 800a34c:	f109 0301 	add.w	r3, r9, #1
 800a350:	443b      	add	r3, r7
 800a352:	429d      	cmp	r5, r3
 800a354:	bf38      	it	cc
 800a356:	461d      	movcc	r5, r3
 800a358:	0553      	lsls	r3, r2, #21
 800a35a:	d530      	bpl.n	800a3be <__ssputs_r+0x9e>
 800a35c:	4629      	mov	r1, r5
 800a35e:	f7ff ff85 	bl	800a26c <_malloc_r>
 800a362:	4606      	mov	r6, r0
 800a364:	b950      	cbnz	r0, 800a37c <__ssputs_r+0x5c>
 800a366:	230c      	movs	r3, #12
 800a368:	f8ca 3000 	str.w	r3, [sl]
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37c:	463a      	mov	r2, r7
 800a37e:	6921      	ldr	r1, [r4, #16]
 800a380:	f7fc fc1e 	bl	8006bc0 <memcpy>
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	6126      	str	r6, [r4, #16]
 800a392:	6165      	str	r5, [r4, #20]
 800a394:	443e      	add	r6, r7
 800a396:	1bed      	subs	r5, r5, r7
 800a398:	6026      	str	r6, [r4, #0]
 800a39a:	60a5      	str	r5, [r4, #8]
 800a39c:	464e      	mov	r6, r9
 800a39e:	454e      	cmp	r6, r9
 800a3a0:	d900      	bls.n	800a3a4 <__ssputs_r+0x84>
 800a3a2:	464e      	mov	r6, r9
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	4641      	mov	r1, r8
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	f000 fd34 	bl	800ae16 <memmove>
 800a3ae:	68a3      	ldr	r3, [r4, #8]
 800a3b0:	1b9b      	subs	r3, r3, r6
 800a3b2:	60a3      	str	r3, [r4, #8]
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	441e      	add	r6, r3
 800a3b8:	6026      	str	r6, [r4, #0]
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	e7dc      	b.n	800a378 <__ssputs_r+0x58>
 800a3be:	462a      	mov	r2, r5
 800a3c0:	f000 fd44 	bl	800ae4c <_realloc_r>
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d1e2      	bne.n	800a390 <__ssputs_r+0x70>
 800a3ca:	6921      	ldr	r1, [r4, #16]
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	f7ff feff 	bl	800a1d0 <_free_r>
 800a3d2:	e7c8      	b.n	800a366 <__ssputs_r+0x46>

0800a3d4 <_svfiprintf_r>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	461d      	mov	r5, r3
 800a3da:	898b      	ldrh	r3, [r1, #12]
 800a3dc:	061f      	lsls	r7, r3, #24
 800a3de:	b09d      	sub	sp, #116	; 0x74
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	d50f      	bpl.n	800a408 <_svfiprintf_r+0x34>
 800a3e8:	690b      	ldr	r3, [r1, #16]
 800a3ea:	b96b      	cbnz	r3, 800a408 <_svfiprintf_r+0x34>
 800a3ec:	2140      	movs	r1, #64	; 0x40
 800a3ee:	f7ff ff3d 	bl	800a26c <_malloc_r>
 800a3f2:	6020      	str	r0, [r4, #0]
 800a3f4:	6120      	str	r0, [r4, #16]
 800a3f6:	b928      	cbnz	r0, 800a404 <_svfiprintf_r+0x30>
 800a3f8:	230c      	movs	r3, #12
 800a3fa:	f8c8 3000 	str.w	r3, [r8]
 800a3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a402:	e0c8      	b.n	800a596 <_svfiprintf_r+0x1c2>
 800a404:	2340      	movs	r3, #64	; 0x40
 800a406:	6163      	str	r3, [r4, #20]
 800a408:	2300      	movs	r3, #0
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	2320      	movs	r3, #32
 800a40e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a412:	2330      	movs	r3, #48	; 0x30
 800a414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a418:	9503      	str	r5, [sp, #12]
 800a41a:	f04f 0b01 	mov.w	fp, #1
 800a41e:	4637      	mov	r7, r6
 800a420:	463d      	mov	r5, r7
 800a422:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a426:	b10b      	cbz	r3, 800a42c <_svfiprintf_r+0x58>
 800a428:	2b25      	cmp	r3, #37	; 0x25
 800a42a:	d13e      	bne.n	800a4aa <_svfiprintf_r+0xd6>
 800a42c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a430:	d00b      	beq.n	800a44a <_svfiprintf_r+0x76>
 800a432:	4653      	mov	r3, sl
 800a434:	4632      	mov	r2, r6
 800a436:	4621      	mov	r1, r4
 800a438:	4640      	mov	r0, r8
 800a43a:	f7ff ff71 	bl	800a320 <__ssputs_r>
 800a43e:	3001      	adds	r0, #1
 800a440:	f000 80a4 	beq.w	800a58c <_svfiprintf_r+0x1b8>
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	4453      	add	r3, sl
 800a448:	9309      	str	r3, [sp, #36]	; 0x24
 800a44a:	783b      	ldrb	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 809d 	beq.w	800a58c <_svfiprintf_r+0x1b8>
 800a452:	2300      	movs	r3, #0
 800a454:	f04f 32ff 	mov.w	r2, #4294967295
 800a458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	9307      	str	r3, [sp, #28]
 800a460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a464:	931a      	str	r3, [sp, #104]	; 0x68
 800a466:	462f      	mov	r7, r5
 800a468:	2205      	movs	r2, #5
 800a46a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a46e:	4850      	ldr	r0, [pc, #320]	; (800a5b0 <_svfiprintf_r+0x1dc>)
 800a470:	f7f5 fee6 	bl	8000240 <memchr>
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	b9d0      	cbnz	r0, 800a4ae <_svfiprintf_r+0xda>
 800a478:	06d9      	lsls	r1, r3, #27
 800a47a:	bf44      	itt	mi
 800a47c:	2220      	movmi	r2, #32
 800a47e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a482:	071a      	lsls	r2, r3, #28
 800a484:	bf44      	itt	mi
 800a486:	222b      	movmi	r2, #43	; 0x2b
 800a488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a48c:	782a      	ldrb	r2, [r5, #0]
 800a48e:	2a2a      	cmp	r2, #42	; 0x2a
 800a490:	d015      	beq.n	800a4be <_svfiprintf_r+0xea>
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	462f      	mov	r7, r5
 800a496:	2000      	movs	r0, #0
 800a498:	250a      	movs	r5, #10
 800a49a:	4639      	mov	r1, r7
 800a49c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a0:	3b30      	subs	r3, #48	; 0x30
 800a4a2:	2b09      	cmp	r3, #9
 800a4a4:	d94d      	bls.n	800a542 <_svfiprintf_r+0x16e>
 800a4a6:	b1b8      	cbz	r0, 800a4d8 <_svfiprintf_r+0x104>
 800a4a8:	e00f      	b.n	800a4ca <_svfiprintf_r+0xf6>
 800a4aa:	462f      	mov	r7, r5
 800a4ac:	e7b8      	b.n	800a420 <_svfiprintf_r+0x4c>
 800a4ae:	4a40      	ldr	r2, [pc, #256]	; (800a5b0 <_svfiprintf_r+0x1dc>)
 800a4b0:	1a80      	subs	r0, r0, r2
 800a4b2:	fa0b f000 	lsl.w	r0, fp, r0
 800a4b6:	4318      	orrs	r0, r3
 800a4b8:	9004      	str	r0, [sp, #16]
 800a4ba:	463d      	mov	r5, r7
 800a4bc:	e7d3      	b.n	800a466 <_svfiprintf_r+0x92>
 800a4be:	9a03      	ldr	r2, [sp, #12]
 800a4c0:	1d11      	adds	r1, r2, #4
 800a4c2:	6812      	ldr	r2, [r2, #0]
 800a4c4:	9103      	str	r1, [sp, #12]
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	db01      	blt.n	800a4ce <_svfiprintf_r+0xfa>
 800a4ca:	9207      	str	r2, [sp, #28]
 800a4cc:	e004      	b.n	800a4d8 <_svfiprintf_r+0x104>
 800a4ce:	4252      	negs	r2, r2
 800a4d0:	f043 0302 	orr.w	r3, r3, #2
 800a4d4:	9207      	str	r2, [sp, #28]
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	783b      	ldrb	r3, [r7, #0]
 800a4da:	2b2e      	cmp	r3, #46	; 0x2e
 800a4dc:	d10c      	bne.n	800a4f8 <_svfiprintf_r+0x124>
 800a4de:	787b      	ldrb	r3, [r7, #1]
 800a4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e2:	d133      	bne.n	800a54c <_svfiprintf_r+0x178>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	9203      	str	r2, [sp, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bfb8      	it	lt
 800a4f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f4:	3702      	adds	r7, #2
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	4d2e      	ldr	r5, [pc, #184]	; (800a5b4 <_svfiprintf_r+0x1e0>)
 800a4fa:	7839      	ldrb	r1, [r7, #0]
 800a4fc:	2203      	movs	r2, #3
 800a4fe:	4628      	mov	r0, r5
 800a500:	f7f5 fe9e 	bl	8000240 <memchr>
 800a504:	b138      	cbz	r0, 800a516 <_svfiprintf_r+0x142>
 800a506:	2340      	movs	r3, #64	; 0x40
 800a508:	1b40      	subs	r0, r0, r5
 800a50a:	fa03 f000 	lsl.w	r0, r3, r0
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	4303      	orrs	r3, r0
 800a512:	3701      	adds	r7, #1
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	7839      	ldrb	r1, [r7, #0]
 800a518:	4827      	ldr	r0, [pc, #156]	; (800a5b8 <_svfiprintf_r+0x1e4>)
 800a51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a51e:	2206      	movs	r2, #6
 800a520:	1c7e      	adds	r6, r7, #1
 800a522:	f7f5 fe8d 	bl	8000240 <memchr>
 800a526:	2800      	cmp	r0, #0
 800a528:	d038      	beq.n	800a59c <_svfiprintf_r+0x1c8>
 800a52a:	4b24      	ldr	r3, [pc, #144]	; (800a5bc <_svfiprintf_r+0x1e8>)
 800a52c:	bb13      	cbnz	r3, 800a574 <_svfiprintf_r+0x1a0>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	3307      	adds	r3, #7
 800a532:	f023 0307 	bic.w	r3, r3, #7
 800a536:	3308      	adds	r3, #8
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	444b      	add	r3, r9
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	e76d      	b.n	800a41e <_svfiprintf_r+0x4a>
 800a542:	fb05 3202 	mla	r2, r5, r2, r3
 800a546:	2001      	movs	r0, #1
 800a548:	460f      	mov	r7, r1
 800a54a:	e7a6      	b.n	800a49a <_svfiprintf_r+0xc6>
 800a54c:	2300      	movs	r3, #0
 800a54e:	3701      	adds	r7, #1
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	4619      	mov	r1, r3
 800a554:	250a      	movs	r5, #10
 800a556:	4638      	mov	r0, r7
 800a558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55c:	3a30      	subs	r2, #48	; 0x30
 800a55e:	2a09      	cmp	r2, #9
 800a560:	d903      	bls.n	800a56a <_svfiprintf_r+0x196>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0c8      	beq.n	800a4f8 <_svfiprintf_r+0x124>
 800a566:	9105      	str	r1, [sp, #20]
 800a568:	e7c6      	b.n	800a4f8 <_svfiprintf_r+0x124>
 800a56a:	fb05 2101 	mla	r1, r5, r1, r2
 800a56e:	2301      	movs	r3, #1
 800a570:	4607      	mov	r7, r0
 800a572:	e7f0      	b.n	800a556 <_svfiprintf_r+0x182>
 800a574:	ab03      	add	r3, sp, #12
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	4622      	mov	r2, r4
 800a57a:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <_svfiprintf_r+0x1ec>)
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	4640      	mov	r0, r8
 800a580:	f7fc fbc6 	bl	8006d10 <_printf_float>
 800a584:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a588:	4681      	mov	r9, r0
 800a58a:	d1d6      	bne.n	800a53a <_svfiprintf_r+0x166>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	065b      	lsls	r3, r3, #25
 800a590:	f53f af35 	bmi.w	800a3fe <_svfiprintf_r+0x2a>
 800a594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a596:	b01d      	add	sp, #116	; 0x74
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	ab03      	add	r3, sp, #12
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	4b07      	ldr	r3, [pc, #28]	; (800a5c0 <_svfiprintf_r+0x1ec>)
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	f7fc fe68 	bl	800727c <_printf_i>
 800a5ac:	e7ea      	b.n	800a584 <_svfiprintf_r+0x1b0>
 800a5ae:	bf00      	nop
 800a5b0:	0800b0bc 	.word	0x0800b0bc
 800a5b4:	0800b0c2 	.word	0x0800b0c2
 800a5b8:	0800b0c6 	.word	0x0800b0c6
 800a5bc:	08006d11 	.word	0x08006d11
 800a5c0:	0800a321 	.word	0x0800a321

0800a5c4 <_sungetc_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	1c4b      	adds	r3, r1, #1
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	d103      	bne.n	800a5d4 <_sungetc_r+0x10>
 800a5cc:	f04f 35ff 	mov.w	r5, #4294967295
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	8993      	ldrh	r3, [r2, #12]
 800a5d6:	f023 0320 	bic.w	r3, r3, #32
 800a5da:	8193      	strh	r3, [r2, #12]
 800a5dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5de:	6852      	ldr	r2, [r2, #4]
 800a5e0:	b2cd      	uxtb	r5, r1
 800a5e2:	b18b      	cbz	r3, 800a608 <_sungetc_r+0x44>
 800a5e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	dd08      	ble.n	800a5fc <_sungetc_r+0x38>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	1e5a      	subs	r2, r3, #1
 800a5ee:	6022      	str	r2, [r4, #0]
 800a5f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a5f4:	6863      	ldr	r3, [r4, #4]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	6063      	str	r3, [r4, #4]
 800a5fa:	e7e9      	b.n	800a5d0 <_sungetc_r+0xc>
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	f000 fbc3 	bl	800ad88 <__submore>
 800a602:	2800      	cmp	r0, #0
 800a604:	d0f1      	beq.n	800a5ea <_sungetc_r+0x26>
 800a606:	e7e1      	b.n	800a5cc <_sungetc_r+0x8>
 800a608:	6921      	ldr	r1, [r4, #16]
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	b151      	cbz	r1, 800a624 <_sungetc_r+0x60>
 800a60e:	4299      	cmp	r1, r3
 800a610:	d208      	bcs.n	800a624 <_sungetc_r+0x60>
 800a612:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a616:	42a9      	cmp	r1, r5
 800a618:	d104      	bne.n	800a624 <_sungetc_r+0x60>
 800a61a:	3b01      	subs	r3, #1
 800a61c:	3201      	adds	r2, #1
 800a61e:	6023      	str	r3, [r4, #0]
 800a620:	6062      	str	r2, [r4, #4]
 800a622:	e7d5      	b.n	800a5d0 <_sungetc_r+0xc>
 800a624:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a62c:	6363      	str	r3, [r4, #52]	; 0x34
 800a62e:	2303      	movs	r3, #3
 800a630:	63a3      	str	r3, [r4, #56]	; 0x38
 800a632:	4623      	mov	r3, r4
 800a634:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	2301      	movs	r3, #1
 800a63c:	e7dc      	b.n	800a5f8 <_sungetc_r+0x34>

0800a63e <__ssrefill_r>:
 800a63e:	b510      	push	{r4, lr}
 800a640:	460c      	mov	r4, r1
 800a642:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a644:	b169      	cbz	r1, 800a662 <__ssrefill_r+0x24>
 800a646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a64a:	4299      	cmp	r1, r3
 800a64c:	d001      	beq.n	800a652 <__ssrefill_r+0x14>
 800a64e:	f7ff fdbf 	bl	800a1d0 <_free_r>
 800a652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a654:	6063      	str	r3, [r4, #4]
 800a656:	2000      	movs	r0, #0
 800a658:	6360      	str	r0, [r4, #52]	; 0x34
 800a65a:	b113      	cbz	r3, 800a662 <__ssrefill_r+0x24>
 800a65c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	bd10      	pop	{r4, pc}
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	2300      	movs	r3, #0
 800a668:	6063      	str	r3, [r4, #4]
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	f043 0320 	orr.w	r3, r3, #32
 800a670:	81a3      	strh	r3, [r4, #12]
 800a672:	f04f 30ff 	mov.w	r0, #4294967295
 800a676:	e7f3      	b.n	800a660 <__ssrefill_r+0x22>

0800a678 <__ssvfiscanf_r>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a680:	460c      	mov	r4, r1
 800a682:	2100      	movs	r1, #0
 800a684:	9144      	str	r1, [sp, #272]	; 0x110
 800a686:	9145      	str	r1, [sp, #276]	; 0x114
 800a688:	499f      	ldr	r1, [pc, #636]	; (800a908 <__ssvfiscanf_r+0x290>)
 800a68a:	91a0      	str	r1, [sp, #640]	; 0x280
 800a68c:	f10d 0804 	add.w	r8, sp, #4
 800a690:	499e      	ldr	r1, [pc, #632]	; (800a90c <__ssvfiscanf_r+0x294>)
 800a692:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800a910 <__ssvfiscanf_r+0x298>
 800a696:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a69a:	4606      	mov	r6, r0
 800a69c:	4692      	mov	sl, r2
 800a69e:	91a1      	str	r1, [sp, #644]	; 0x284
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	270a      	movs	r7, #10
 800a6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 812a 	beq.w	800a902 <__ssvfiscanf_r+0x28a>
 800a6ae:	4655      	mov	r5, sl
 800a6b0:	f7ff f948 	bl	8009944 <__locale_ctype_ptr>
 800a6b4:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a6b8:	4458      	add	r0, fp
 800a6ba:	7843      	ldrb	r3, [r0, #1]
 800a6bc:	f013 0308 	ands.w	r3, r3, #8
 800a6c0:	d01c      	beq.n	800a6fc <__ssvfiscanf_r+0x84>
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dd12      	ble.n	800a6ee <__ssvfiscanf_r+0x76>
 800a6c8:	f7ff f93c 	bl	8009944 <__locale_ctype_ptr>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	781a      	ldrb	r2, [r3, #0]
 800a6d0:	4410      	add	r0, r2
 800a6d2:	7842      	ldrb	r2, [r0, #1]
 800a6d4:	0712      	lsls	r2, r2, #28
 800a6d6:	d401      	bmi.n	800a6dc <__ssvfiscanf_r+0x64>
 800a6d8:	46aa      	mov	sl, r5
 800a6da:	e7e3      	b.n	800a6a4 <__ssvfiscanf_r+0x2c>
 800a6dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a6de:	3201      	adds	r2, #1
 800a6e0:	9245      	str	r2, [sp, #276]	; 0x114
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	3a01      	subs	r2, #1
 800a6e8:	6062      	str	r2, [r4, #4]
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	e7e9      	b.n	800a6c2 <__ssvfiscanf_r+0x4a>
 800a6ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	4798      	blx	r3
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d0e6      	beq.n	800a6c8 <__ssvfiscanf_r+0x50>
 800a6fa:	e7ed      	b.n	800a6d8 <__ssvfiscanf_r+0x60>
 800a6fc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a700:	f040 8082 	bne.w	800a808 <__ssvfiscanf_r+0x190>
 800a704:	9343      	str	r3, [sp, #268]	; 0x10c
 800a706:	9341      	str	r3, [sp, #260]	; 0x104
 800a708:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a70c:	2b2a      	cmp	r3, #42	; 0x2a
 800a70e:	d103      	bne.n	800a718 <__ssvfiscanf_r+0xa0>
 800a710:	2310      	movs	r3, #16
 800a712:	9341      	str	r3, [sp, #260]	; 0x104
 800a714:	f10a 0502 	add.w	r5, sl, #2
 800a718:	46aa      	mov	sl, r5
 800a71a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a71e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a722:	2a09      	cmp	r2, #9
 800a724:	d922      	bls.n	800a76c <__ssvfiscanf_r+0xf4>
 800a726:	2203      	movs	r2, #3
 800a728:	4879      	ldr	r0, [pc, #484]	; (800a910 <__ssvfiscanf_r+0x298>)
 800a72a:	f7f5 fd89 	bl	8000240 <memchr>
 800a72e:	b138      	cbz	r0, 800a740 <__ssvfiscanf_r+0xc8>
 800a730:	eba0 0309 	sub.w	r3, r0, r9
 800a734:	2001      	movs	r0, #1
 800a736:	4098      	lsls	r0, r3
 800a738:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a73a:	4318      	orrs	r0, r3
 800a73c:	9041      	str	r0, [sp, #260]	; 0x104
 800a73e:	46aa      	mov	sl, r5
 800a740:	f89a 3000 	ldrb.w	r3, [sl]
 800a744:	2b67      	cmp	r3, #103	; 0x67
 800a746:	f10a 0501 	add.w	r5, sl, #1
 800a74a:	d82b      	bhi.n	800a7a4 <__ssvfiscanf_r+0x12c>
 800a74c:	2b65      	cmp	r3, #101	; 0x65
 800a74e:	f080 809f 	bcs.w	800a890 <__ssvfiscanf_r+0x218>
 800a752:	2b47      	cmp	r3, #71	; 0x47
 800a754:	d810      	bhi.n	800a778 <__ssvfiscanf_r+0x100>
 800a756:	2b45      	cmp	r3, #69	; 0x45
 800a758:	f080 809a 	bcs.w	800a890 <__ssvfiscanf_r+0x218>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d06c      	beq.n	800a83a <__ssvfiscanf_r+0x1c2>
 800a760:	2b25      	cmp	r3, #37	; 0x25
 800a762:	d051      	beq.n	800a808 <__ssvfiscanf_r+0x190>
 800a764:	2303      	movs	r3, #3
 800a766:	9347      	str	r3, [sp, #284]	; 0x11c
 800a768:	9742      	str	r7, [sp, #264]	; 0x108
 800a76a:	e027      	b.n	800a7bc <__ssvfiscanf_r+0x144>
 800a76c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a76e:	fb07 1303 	mla	r3, r7, r3, r1
 800a772:	3b30      	subs	r3, #48	; 0x30
 800a774:	9343      	str	r3, [sp, #268]	; 0x10c
 800a776:	e7cf      	b.n	800a718 <__ssvfiscanf_r+0xa0>
 800a778:	2b5b      	cmp	r3, #91	; 0x5b
 800a77a:	d06a      	beq.n	800a852 <__ssvfiscanf_r+0x1da>
 800a77c:	d80c      	bhi.n	800a798 <__ssvfiscanf_r+0x120>
 800a77e:	2b58      	cmp	r3, #88	; 0x58
 800a780:	d1f0      	bne.n	800a764 <__ssvfiscanf_r+0xec>
 800a782:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a788:	9241      	str	r2, [sp, #260]	; 0x104
 800a78a:	2210      	movs	r2, #16
 800a78c:	9242      	str	r2, [sp, #264]	; 0x108
 800a78e:	2b6e      	cmp	r3, #110	; 0x6e
 800a790:	bf8c      	ite	hi
 800a792:	2304      	movhi	r3, #4
 800a794:	2303      	movls	r3, #3
 800a796:	e010      	b.n	800a7ba <__ssvfiscanf_r+0x142>
 800a798:	2b63      	cmp	r3, #99	; 0x63
 800a79a:	d065      	beq.n	800a868 <__ssvfiscanf_r+0x1f0>
 800a79c:	2b64      	cmp	r3, #100	; 0x64
 800a79e:	d1e1      	bne.n	800a764 <__ssvfiscanf_r+0xec>
 800a7a0:	9742      	str	r7, [sp, #264]	; 0x108
 800a7a2:	e7f4      	b.n	800a78e <__ssvfiscanf_r+0x116>
 800a7a4:	2b70      	cmp	r3, #112	; 0x70
 800a7a6:	d04b      	beq.n	800a840 <__ssvfiscanf_r+0x1c8>
 800a7a8:	d826      	bhi.n	800a7f8 <__ssvfiscanf_r+0x180>
 800a7aa:	2b6e      	cmp	r3, #110	; 0x6e
 800a7ac:	d062      	beq.n	800a874 <__ssvfiscanf_r+0x1fc>
 800a7ae:	d84c      	bhi.n	800a84a <__ssvfiscanf_r+0x1d2>
 800a7b0:	2b69      	cmp	r3, #105	; 0x69
 800a7b2:	d1d7      	bne.n	800a764 <__ssvfiscanf_r+0xec>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9342      	str	r3, [sp, #264]	; 0x108
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	9347      	str	r3, [sp, #284]	; 0x11c
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dd68      	ble.n	800a894 <__ssvfiscanf_r+0x21c>
 800a7c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7c4:	0659      	lsls	r1, r3, #25
 800a7c6:	d407      	bmi.n	800a7d8 <__ssvfiscanf_r+0x160>
 800a7c8:	f7ff f8bc 	bl	8009944 <__locale_ctype_ptr>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	781a      	ldrb	r2, [r3, #0]
 800a7d0:	4410      	add	r0, r2
 800a7d2:	7842      	ldrb	r2, [r0, #1]
 800a7d4:	0712      	lsls	r2, r2, #28
 800a7d6:	d464      	bmi.n	800a8a2 <__ssvfiscanf_r+0x22a>
 800a7d8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	dc73      	bgt.n	800a8c6 <__ssvfiscanf_r+0x24e>
 800a7de:	466b      	mov	r3, sp
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	a941      	add	r1, sp, #260	; 0x104
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f000 f897 	bl	800a918 <_scanf_chars>
 800a7ea:	2801      	cmp	r0, #1
 800a7ec:	f000 8089 	beq.w	800a902 <__ssvfiscanf_r+0x28a>
 800a7f0:	2802      	cmp	r0, #2
 800a7f2:	f47f af71 	bne.w	800a6d8 <__ssvfiscanf_r+0x60>
 800a7f6:	e01d      	b.n	800a834 <__ssvfiscanf_r+0x1bc>
 800a7f8:	2b75      	cmp	r3, #117	; 0x75
 800a7fa:	d0d1      	beq.n	800a7a0 <__ssvfiscanf_r+0x128>
 800a7fc:	2b78      	cmp	r3, #120	; 0x78
 800a7fe:	d0c0      	beq.n	800a782 <__ssvfiscanf_r+0x10a>
 800a800:	2b73      	cmp	r3, #115	; 0x73
 800a802:	d1af      	bne.n	800a764 <__ssvfiscanf_r+0xec>
 800a804:	2302      	movs	r3, #2
 800a806:	e7d8      	b.n	800a7ba <__ssvfiscanf_r+0x142>
 800a808:	6863      	ldr	r3, [r4, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dd0c      	ble.n	800a828 <__ssvfiscanf_r+0x1b0>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	781a      	ldrb	r2, [r3, #0]
 800a812:	455a      	cmp	r2, fp
 800a814:	d175      	bne.n	800a902 <__ssvfiscanf_r+0x28a>
 800a816:	3301      	adds	r3, #1
 800a818:	6862      	ldr	r2, [r4, #4]
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a81e:	3a01      	subs	r2, #1
 800a820:	3301      	adds	r3, #1
 800a822:	6062      	str	r2, [r4, #4]
 800a824:	9345      	str	r3, [sp, #276]	; 0x114
 800a826:	e757      	b.n	800a6d8 <__ssvfiscanf_r+0x60>
 800a828:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a82a:	4621      	mov	r1, r4
 800a82c:	4630      	mov	r0, r6
 800a82e:	4798      	blx	r3
 800a830:	2800      	cmp	r0, #0
 800a832:	d0ec      	beq.n	800a80e <__ssvfiscanf_r+0x196>
 800a834:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a836:	2800      	cmp	r0, #0
 800a838:	d159      	bne.n	800a8ee <__ssvfiscanf_r+0x276>
 800a83a:	f04f 30ff 	mov.w	r0, #4294967295
 800a83e:	e05c      	b.n	800a8fa <__ssvfiscanf_r+0x282>
 800a840:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a842:	f042 0220 	orr.w	r2, r2, #32
 800a846:	9241      	str	r2, [sp, #260]	; 0x104
 800a848:	e79b      	b.n	800a782 <__ssvfiscanf_r+0x10a>
 800a84a:	2308      	movs	r3, #8
 800a84c:	9342      	str	r3, [sp, #264]	; 0x108
 800a84e:	2304      	movs	r3, #4
 800a850:	e7b3      	b.n	800a7ba <__ssvfiscanf_r+0x142>
 800a852:	4629      	mov	r1, r5
 800a854:	4640      	mov	r0, r8
 800a856:	f000 f9c7 	bl	800abe8 <__sccl>
 800a85a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a860:	9341      	str	r3, [sp, #260]	; 0x104
 800a862:	4605      	mov	r5, r0
 800a864:	2301      	movs	r3, #1
 800a866:	e7a8      	b.n	800a7ba <__ssvfiscanf_r+0x142>
 800a868:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86e:	9341      	str	r3, [sp, #260]	; 0x104
 800a870:	2300      	movs	r3, #0
 800a872:	e7a2      	b.n	800a7ba <__ssvfiscanf_r+0x142>
 800a874:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a876:	06c3      	lsls	r3, r0, #27
 800a878:	f53f af2e 	bmi.w	800a6d8 <__ssvfiscanf_r+0x60>
 800a87c:	9b00      	ldr	r3, [sp, #0]
 800a87e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a880:	1d19      	adds	r1, r3, #4
 800a882:	9100      	str	r1, [sp, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	07c0      	lsls	r0, r0, #31
 800a888:	bf4c      	ite	mi
 800a88a:	801a      	strhmi	r2, [r3, #0]
 800a88c:	601a      	strpl	r2, [r3, #0]
 800a88e:	e723      	b.n	800a6d8 <__ssvfiscanf_r+0x60>
 800a890:	2305      	movs	r3, #5
 800a892:	e792      	b.n	800a7ba <__ssvfiscanf_r+0x142>
 800a894:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a896:	4621      	mov	r1, r4
 800a898:	4630      	mov	r0, r6
 800a89a:	4798      	blx	r3
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d090      	beq.n	800a7c2 <__ssvfiscanf_r+0x14a>
 800a8a0:	e7c8      	b.n	800a834 <__ssvfiscanf_r+0x1bc>
 800a8a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8a4:	3201      	adds	r2, #1
 800a8a6:	9245      	str	r2, [sp, #276]	; 0x114
 800a8a8:	6862      	ldr	r2, [r4, #4]
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	2a00      	cmp	r2, #0
 800a8ae:	6062      	str	r2, [r4, #4]
 800a8b0:	dd02      	ble.n	800a8b8 <__ssvfiscanf_r+0x240>
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	e787      	b.n	800a7c8 <__ssvfiscanf_r+0x150>
 800a8b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4630      	mov	r0, r6
 800a8be:	4798      	blx	r3
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d081      	beq.n	800a7c8 <__ssvfiscanf_r+0x150>
 800a8c4:	e7b6      	b.n	800a834 <__ssvfiscanf_r+0x1bc>
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	dc06      	bgt.n	800a8d8 <__ssvfiscanf_r+0x260>
 800a8ca:	466b      	mov	r3, sp
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	a941      	add	r1, sp, #260	; 0x104
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f000 f885 	bl	800a9e0 <_scanf_i>
 800a8d6:	e788      	b.n	800a7ea <__ssvfiscanf_r+0x172>
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <__ssvfiscanf_r+0x29c>)
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f43f aefc 	beq.w	800a6d8 <__ssvfiscanf_r+0x60>
 800a8e0:	466b      	mov	r3, sp
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	a941      	add	r1, sp, #260	; 0x104
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f7fc fdda 	bl	80074a0 <_scanf_float>
 800a8ec:	e77d      	b.n	800a7ea <__ssvfiscanf_r+0x172>
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a8f4:	bf18      	it	ne
 800a8f6:	f04f 30ff 	movne.w	r0, #4294967295
 800a8fa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a904:	e7f9      	b.n	800a8fa <__ssvfiscanf_r+0x282>
 800a906:	bf00      	nop
 800a908:	0800a5c5 	.word	0x0800a5c5
 800a90c:	0800a63f 	.word	0x0800a63f
 800a910:	0800b0c2 	.word	0x0800b0c2
 800a914:	080074a1 	.word	0x080074a1

0800a918 <_scanf_chars>:
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	4615      	mov	r5, r2
 800a91e:	688a      	ldr	r2, [r1, #8]
 800a920:	4680      	mov	r8, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b932      	cbnz	r2, 800a934 <_scanf_chars+0x1c>
 800a926:	698a      	ldr	r2, [r1, #24]
 800a928:	2a00      	cmp	r2, #0
 800a92a:	bf14      	ite	ne
 800a92c:	f04f 32ff 	movne.w	r2, #4294967295
 800a930:	2201      	moveq	r2, #1
 800a932:	608a      	str	r2, [r1, #8]
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	06d1      	lsls	r1, r2, #27
 800a938:	bf5f      	itttt	pl
 800a93a:	681a      	ldrpl	r2, [r3, #0]
 800a93c:	1d11      	addpl	r1, r2, #4
 800a93e:	6019      	strpl	r1, [r3, #0]
 800a940:	6817      	ldrpl	r7, [r2, #0]
 800a942:	2600      	movs	r6, #0
 800a944:	69a3      	ldr	r3, [r4, #24]
 800a946:	b1db      	cbz	r3, 800a980 <_scanf_chars+0x68>
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d107      	bne.n	800a95c <_scanf_chars+0x44>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	6962      	ldr	r2, [r4, #20]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	5cd3      	ldrb	r3, [r2, r3]
 800a954:	b9a3      	cbnz	r3, 800a980 <_scanf_chars+0x68>
 800a956:	2e00      	cmp	r6, #0
 800a958:	d132      	bne.n	800a9c0 <_scanf_chars+0xa8>
 800a95a:	e006      	b.n	800a96a <_scanf_chars+0x52>
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d007      	beq.n	800a970 <_scanf_chars+0x58>
 800a960:	2e00      	cmp	r6, #0
 800a962:	d12d      	bne.n	800a9c0 <_scanf_chars+0xa8>
 800a964:	69a3      	ldr	r3, [r4, #24]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d12a      	bne.n	800a9c0 <_scanf_chars+0xa8>
 800a96a:	2001      	movs	r0, #1
 800a96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a970:	f7fe ffe8 	bl	8009944 <__locale_ctype_ptr>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	4418      	add	r0, r3
 800a97a:	7843      	ldrb	r3, [r0, #1]
 800a97c:	071b      	lsls	r3, r3, #28
 800a97e:	d4ef      	bmi.n	800a960 <_scanf_chars+0x48>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	06da      	lsls	r2, r3, #27
 800a984:	bf5e      	ittt	pl
 800a986:	682b      	ldrpl	r3, [r5, #0]
 800a988:	781b      	ldrbpl	r3, [r3, #0]
 800a98a:	703b      	strbpl	r3, [r7, #0]
 800a98c:	682a      	ldr	r2, [r5, #0]
 800a98e:	686b      	ldr	r3, [r5, #4]
 800a990:	f102 0201 	add.w	r2, r2, #1
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	68a2      	ldr	r2, [r4, #8]
 800a998:	f103 33ff 	add.w	r3, r3, #4294967295
 800a99c:	f102 32ff 	add.w	r2, r2, #4294967295
 800a9a0:	606b      	str	r3, [r5, #4]
 800a9a2:	f106 0601 	add.w	r6, r6, #1
 800a9a6:	bf58      	it	pl
 800a9a8:	3701      	addpl	r7, #1
 800a9aa:	60a2      	str	r2, [r4, #8]
 800a9ac:	b142      	cbz	r2, 800a9c0 <_scanf_chars+0xa8>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	dcc8      	bgt.n	800a944 <_scanf_chars+0x2c>
 800a9b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	4798      	blx	r3
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d0c1      	beq.n	800a944 <_scanf_chars+0x2c>
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	f013 0310 	ands.w	r3, r3, #16
 800a9c6:	d105      	bne.n	800a9d4 <_scanf_chars+0xbc>
 800a9c8:	68e2      	ldr	r2, [r4, #12]
 800a9ca:	3201      	adds	r2, #1
 800a9cc:	60e2      	str	r2, [r4, #12]
 800a9ce:	69a2      	ldr	r2, [r4, #24]
 800a9d0:	b102      	cbz	r2, 800a9d4 <_scanf_chars+0xbc>
 800a9d2:	703b      	strb	r3, [r7, #0]
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	441e      	add	r6, r3
 800a9d8:	6126      	str	r6, [r4, #16]
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e7c6      	b.n	800a96c <_scanf_chars+0x54>
	...

0800a9e0 <_scanf_i>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	469a      	mov	sl, r3
 800a9e6:	4b74      	ldr	r3, [pc, #464]	; (800abb8 <_scanf_i+0x1d8>)
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	4683      	mov	fp, r0
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	ab03      	add	r3, sp, #12
 800a9f6:	68a7      	ldr	r7, [r4, #8]
 800a9f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9fc:	4b6f      	ldr	r3, [pc, #444]	; (800abbc <_scanf_i+0x1dc>)
 800a9fe:	69a1      	ldr	r1, [r4, #24]
 800aa00:	4a6f      	ldr	r2, [pc, #444]	; (800abc0 <_scanf_i+0x1e0>)
 800aa02:	2903      	cmp	r1, #3
 800aa04:	bf08      	it	eq
 800aa06:	461a      	moveq	r2, r3
 800aa08:	1e7b      	subs	r3, r7, #1
 800aa0a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800aa0e:	bf84      	itt	hi
 800aa10:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa14:	60a3      	strhi	r3, [r4, #8]
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	9200      	str	r2, [sp, #0]
 800aa1a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aa1e:	bf88      	it	hi
 800aa20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa24:	f104 091c 	add.w	r9, r4, #28
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bf8c      	ite	hi
 800aa2c:	197f      	addhi	r7, r7, r5
 800aa2e:	2700      	movls	r7, #0
 800aa30:	464b      	mov	r3, r9
 800aa32:	f04f 0800 	mov.w	r8, #0
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	6831      	ldr	r1, [r6, #0]
 800aa3a:	ab03      	add	r3, sp, #12
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aa42:	7809      	ldrb	r1, [r1, #0]
 800aa44:	f7f5 fbfc 	bl	8000240 <memchr>
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	b330      	cbz	r0, 800aa9a <_scanf_i+0xba>
 800aa4c:	f1b8 0f01 	cmp.w	r8, #1
 800aa50:	d15a      	bne.n	800ab08 <_scanf_i+0x128>
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	b92a      	cbnz	r2, 800aa62 <_scanf_i+0x82>
 800aa56:	6822      	ldr	r2, [r4, #0]
 800aa58:	2108      	movs	r1, #8
 800aa5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa5e:	6061      	str	r1, [r4, #4]
 800aa60:	6022      	str	r2, [r4, #0]
 800aa62:	6822      	ldr	r2, [r4, #0]
 800aa64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aa68:	6022      	str	r2, [r4, #0]
 800aa6a:	68a2      	ldr	r2, [r4, #8]
 800aa6c:	1e51      	subs	r1, r2, #1
 800aa6e:	60a1      	str	r1, [r4, #8]
 800aa70:	b19a      	cbz	r2, 800aa9a <_scanf_i+0xba>
 800aa72:	6832      	ldr	r2, [r6, #0]
 800aa74:	1c51      	adds	r1, r2, #1
 800aa76:	6031      	str	r1, [r6, #0]
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	1c5d      	adds	r5, r3, #1
 800aa7e:	6873      	ldr	r3, [r6, #4]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	6073      	str	r3, [r6, #4]
 800aa86:	dc07      	bgt.n	800aa98 <_scanf_i+0xb8>
 800aa88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4658      	mov	r0, fp
 800aa90:	4798      	blx	r3
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f040 8086 	bne.w	800aba4 <_scanf_i+0x1c4>
 800aa98:	462b      	mov	r3, r5
 800aa9a:	f108 0801 	add.w	r8, r8, #1
 800aa9e:	f1b8 0f03 	cmp.w	r8, #3
 800aaa2:	d1c8      	bne.n	800aa36 <_scanf_i+0x56>
 800aaa4:	6862      	ldr	r2, [r4, #4]
 800aaa6:	b90a      	cbnz	r2, 800aaac <_scanf_i+0xcc>
 800aaa8:	220a      	movs	r2, #10
 800aaaa:	6062      	str	r2, [r4, #4]
 800aaac:	6862      	ldr	r2, [r4, #4]
 800aaae:	4945      	ldr	r1, [pc, #276]	; (800abc4 <_scanf_i+0x1e4>)
 800aab0:	6960      	ldr	r0, [r4, #20]
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	1a89      	subs	r1, r1, r2
 800aab6:	f000 f897 	bl	800abe8 <__sccl>
 800aaba:	9b01      	ldr	r3, [sp, #4]
 800aabc:	f04f 0800 	mov.w	r8, #0
 800aac0:	461d      	mov	r5, r3
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	6822      	ldr	r2, [r4, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d03a      	beq.n	800ab40 <_scanf_i+0x160>
 800aaca:	6831      	ldr	r1, [r6, #0]
 800aacc:	6960      	ldr	r0, [r4, #20]
 800aace:	f891 c000 	ldrb.w	ip, [r1]
 800aad2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d032      	beq.n	800ab40 <_scanf_i+0x160>
 800aada:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800aade:	d121      	bne.n	800ab24 <_scanf_i+0x144>
 800aae0:	0510      	lsls	r0, r2, #20
 800aae2:	d51f      	bpl.n	800ab24 <_scanf_i+0x144>
 800aae4:	f108 0801 	add.w	r8, r8, #1
 800aae8:	b117      	cbz	r7, 800aaf0 <_scanf_i+0x110>
 800aaea:	3301      	adds	r3, #1
 800aaec:	3f01      	subs	r7, #1
 800aaee:	60a3      	str	r3, [r4, #8]
 800aaf0:	6873      	ldr	r3, [r6, #4]
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	6073      	str	r3, [r6, #4]
 800aaf8:	dd1b      	ble.n	800ab32 <_scanf_i+0x152>
 800aafa:	6833      	ldr	r3, [r6, #0]
 800aafc:	3301      	adds	r3, #1
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	68a3      	ldr	r3, [r4, #8]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	e7dc      	b.n	800aac2 <_scanf_i+0xe2>
 800ab08:	f1b8 0f02 	cmp.w	r8, #2
 800ab0c:	d1ad      	bne.n	800aa6a <_scanf_i+0x8a>
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ab14:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ab18:	d1bf      	bne.n	800aa9a <_scanf_i+0xba>
 800ab1a:	2110      	movs	r1, #16
 800ab1c:	6061      	str	r1, [r4, #4]
 800ab1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab22:	e7a1      	b.n	800aa68 <_scanf_i+0x88>
 800ab24:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ab28:	6022      	str	r2, [r4, #0]
 800ab2a:	780b      	ldrb	r3, [r1, #0]
 800ab2c:	702b      	strb	r3, [r5, #0]
 800ab2e:	3501      	adds	r5, #1
 800ab30:	e7de      	b.n	800aaf0 <_scanf_i+0x110>
 800ab32:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab36:	4631      	mov	r1, r6
 800ab38:	4658      	mov	r0, fp
 800ab3a:	4798      	blx	r3
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d0df      	beq.n	800ab00 <_scanf_i+0x120>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	05d9      	lsls	r1, r3, #23
 800ab44:	d50c      	bpl.n	800ab60 <_scanf_i+0x180>
 800ab46:	454d      	cmp	r5, r9
 800ab48:	d908      	bls.n	800ab5c <_scanf_i+0x17c>
 800ab4a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab52:	4632      	mov	r2, r6
 800ab54:	4658      	mov	r0, fp
 800ab56:	4798      	blx	r3
 800ab58:	1e6f      	subs	r7, r5, #1
 800ab5a:	463d      	mov	r5, r7
 800ab5c:	454d      	cmp	r5, r9
 800ab5e:	d029      	beq.n	800abb4 <_scanf_i+0x1d4>
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	f012 0210 	ands.w	r2, r2, #16
 800ab66:	d113      	bne.n	800ab90 <_scanf_i+0x1b0>
 800ab68:	702a      	strb	r2, [r5, #0]
 800ab6a:	6863      	ldr	r3, [r4, #4]
 800ab6c:	9e00      	ldr	r6, [sp, #0]
 800ab6e:	4649      	mov	r1, r9
 800ab70:	4658      	mov	r0, fp
 800ab72:	47b0      	blx	r6
 800ab74:	f8da 3000 	ldr.w	r3, [sl]
 800ab78:	6821      	ldr	r1, [r4, #0]
 800ab7a:	1d1a      	adds	r2, r3, #4
 800ab7c:	f8ca 2000 	str.w	r2, [sl]
 800ab80:	f011 0f20 	tst.w	r1, #32
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	d010      	beq.n	800abaa <_scanf_i+0x1ca>
 800ab88:	6018      	str	r0, [r3, #0]
 800ab8a:	68e3      	ldr	r3, [r4, #12]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	60e3      	str	r3, [r4, #12]
 800ab90:	eba5 0509 	sub.w	r5, r5, r9
 800ab94:	44a8      	add	r8, r5
 800ab96:	6925      	ldr	r5, [r4, #16]
 800ab98:	4445      	add	r5, r8
 800ab9a:	6125      	str	r5, [r4, #16]
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	b007      	add	sp, #28
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba4:	f04f 0800 	mov.w	r8, #0
 800aba8:	e7ca      	b.n	800ab40 <_scanf_i+0x160>
 800abaa:	07ca      	lsls	r2, r1, #31
 800abac:	bf4c      	ite	mi
 800abae:	8018      	strhmi	r0, [r3, #0]
 800abb0:	6018      	strpl	r0, [r3, #0]
 800abb2:	e7ea      	b.n	800ab8a <_scanf_i+0x1aa>
 800abb4:	2001      	movs	r0, #1
 800abb6:	e7f2      	b.n	800ab9e <_scanf_i+0x1be>
 800abb8:	0800aef0 	.word	0x0800aef0
 800abbc:	08008641 	.word	0x08008641
 800abc0:	0800ad65 	.word	0x0800ad65
 800abc4:	0800b0dd 	.word	0x0800b0dd

0800abc8 <_sbrk_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4c06      	ldr	r4, [pc, #24]	; (800abe4 <_sbrk_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4605      	mov	r5, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	f7fb fe0c 	bl	80067f0 <_sbrk>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_sbrk_r+0x1a>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_sbrk_r+0x1a>
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	20005ec0 	.word	0x20005ec0

0800abe8 <__sccl>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	780b      	ldrb	r3, [r1, #0]
 800abec:	2b5e      	cmp	r3, #94	; 0x5e
 800abee:	bf13      	iteet	ne
 800abf0:	1c4a      	addne	r2, r1, #1
 800abf2:	1c8a      	addeq	r2, r1, #2
 800abf4:	784b      	ldrbeq	r3, [r1, #1]
 800abf6:	2100      	movne	r1, #0
 800abf8:	bf08      	it	eq
 800abfa:	2101      	moveq	r1, #1
 800abfc:	1e44      	subs	r4, r0, #1
 800abfe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800ac02:	f804 1f01 	strb.w	r1, [r4, #1]!
 800ac06:	42ac      	cmp	r4, r5
 800ac08:	d1fb      	bne.n	800ac02 <__sccl+0x1a>
 800ac0a:	b913      	cbnz	r3, 800ac12 <__sccl+0x2a>
 800ac0c:	3a01      	subs	r2, #1
 800ac0e:	4610      	mov	r0, r2
 800ac10:	bd70      	pop	{r4, r5, r6, pc}
 800ac12:	f081 0401 	eor.w	r4, r1, #1
 800ac16:	54c4      	strb	r4, [r0, r3]
 800ac18:	1c51      	adds	r1, r2, #1
 800ac1a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800ac1e:	2d2d      	cmp	r5, #45	; 0x2d
 800ac20:	f101 36ff 	add.w	r6, r1, #4294967295
 800ac24:	460a      	mov	r2, r1
 800ac26:	d006      	beq.n	800ac36 <__sccl+0x4e>
 800ac28:	2d5d      	cmp	r5, #93	; 0x5d
 800ac2a:	d0f0      	beq.n	800ac0e <__sccl+0x26>
 800ac2c:	b90d      	cbnz	r5, 800ac32 <__sccl+0x4a>
 800ac2e:	4632      	mov	r2, r6
 800ac30:	e7ed      	b.n	800ac0e <__sccl+0x26>
 800ac32:	462b      	mov	r3, r5
 800ac34:	e7ef      	b.n	800ac16 <__sccl+0x2e>
 800ac36:	780e      	ldrb	r6, [r1, #0]
 800ac38:	2e5d      	cmp	r6, #93	; 0x5d
 800ac3a:	d0fa      	beq.n	800ac32 <__sccl+0x4a>
 800ac3c:	42b3      	cmp	r3, r6
 800ac3e:	dcf8      	bgt.n	800ac32 <__sccl+0x4a>
 800ac40:	3301      	adds	r3, #1
 800ac42:	429e      	cmp	r6, r3
 800ac44:	54c4      	strb	r4, [r0, r3]
 800ac46:	dcfb      	bgt.n	800ac40 <__sccl+0x58>
 800ac48:	3102      	adds	r1, #2
 800ac4a:	e7e6      	b.n	800ac1a <__sccl+0x32>

0800ac4c <strncmp>:
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	b16a      	cbz	r2, 800ac6c <strncmp+0x20>
 800ac50:	3901      	subs	r1, #1
 800ac52:	1884      	adds	r4, r0, r2
 800ac54:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ac58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d103      	bne.n	800ac68 <strncmp+0x1c>
 800ac60:	42a0      	cmp	r0, r4
 800ac62:	d001      	beq.n	800ac68 <strncmp+0x1c>
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1f5      	bne.n	800ac54 <strncmp+0x8>
 800ac68:	1a98      	subs	r0, r3, r2
 800ac6a:	bd10      	pop	{r4, pc}
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	e7fc      	b.n	800ac6a <strncmp+0x1e>

0800ac70 <_strtoul_l.isra.0>:
 800ac70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	4692      	mov	sl, r2
 800ac7a:	461e      	mov	r6, r3
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	463d      	mov	r5, r7
 800ac80:	9808      	ldr	r0, [sp, #32]
 800ac82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac86:	f7fe fe59 	bl	800993c <__locale_ctype_ptr_l>
 800ac8a:	4420      	add	r0, r4
 800ac8c:	7843      	ldrb	r3, [r0, #1]
 800ac8e:	f013 0308 	ands.w	r3, r3, #8
 800ac92:	d130      	bne.n	800acf6 <_strtoul_l.isra.0+0x86>
 800ac94:	2c2d      	cmp	r4, #45	; 0x2d
 800ac96:	d130      	bne.n	800acfa <_strtoul_l.isra.0+0x8a>
 800ac98:	787c      	ldrb	r4, [r7, #1]
 800ac9a:	1cbd      	adds	r5, r7, #2
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d05c      	beq.n	800ad5c <_strtoul_l.isra.0+0xec>
 800aca2:	2e10      	cmp	r6, #16
 800aca4:	d109      	bne.n	800acba <_strtoul_l.isra.0+0x4a>
 800aca6:	2c30      	cmp	r4, #48	; 0x30
 800aca8:	d107      	bne.n	800acba <_strtoul_l.isra.0+0x4a>
 800acaa:	782b      	ldrb	r3, [r5, #0]
 800acac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800acb0:	2b58      	cmp	r3, #88	; 0x58
 800acb2:	d14e      	bne.n	800ad52 <_strtoul_l.isra.0+0xe2>
 800acb4:	786c      	ldrb	r4, [r5, #1]
 800acb6:	2610      	movs	r6, #16
 800acb8:	3502      	adds	r5, #2
 800acba:	f04f 32ff 	mov.w	r2, #4294967295
 800acbe:	2300      	movs	r3, #0
 800acc0:	fbb2 f2f6 	udiv	r2, r2, r6
 800acc4:	fb06 fc02 	mul.w	ip, r6, r2
 800acc8:	ea6f 0c0c 	mvn.w	ip, ip
 800accc:	4618      	mov	r0, r3
 800acce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800acd2:	2f09      	cmp	r7, #9
 800acd4:	d817      	bhi.n	800ad06 <_strtoul_l.isra.0+0x96>
 800acd6:	463c      	mov	r4, r7
 800acd8:	42a6      	cmp	r6, r4
 800acda:	dd23      	ble.n	800ad24 <_strtoul_l.isra.0+0xb4>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	db1e      	blt.n	800ad1e <_strtoul_l.isra.0+0xae>
 800ace0:	4282      	cmp	r2, r0
 800ace2:	d31c      	bcc.n	800ad1e <_strtoul_l.isra.0+0xae>
 800ace4:	d101      	bne.n	800acea <_strtoul_l.isra.0+0x7a>
 800ace6:	45a4      	cmp	ip, r4
 800ace8:	db19      	blt.n	800ad1e <_strtoul_l.isra.0+0xae>
 800acea:	fb00 4006 	mla	r0, r0, r6, r4
 800acee:	2301      	movs	r3, #1
 800acf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acf4:	e7eb      	b.n	800acce <_strtoul_l.isra.0+0x5e>
 800acf6:	462f      	mov	r7, r5
 800acf8:	e7c1      	b.n	800ac7e <_strtoul_l.isra.0+0xe>
 800acfa:	2c2b      	cmp	r4, #43	; 0x2b
 800acfc:	bf04      	itt	eq
 800acfe:	1cbd      	addeq	r5, r7, #2
 800ad00:	787c      	ldrbeq	r4, [r7, #1]
 800ad02:	4619      	mov	r1, r3
 800ad04:	e7cb      	b.n	800ac9e <_strtoul_l.isra.0+0x2e>
 800ad06:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ad0a:	2f19      	cmp	r7, #25
 800ad0c:	d801      	bhi.n	800ad12 <_strtoul_l.isra.0+0xa2>
 800ad0e:	3c37      	subs	r4, #55	; 0x37
 800ad10:	e7e2      	b.n	800acd8 <_strtoul_l.isra.0+0x68>
 800ad12:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ad16:	2f19      	cmp	r7, #25
 800ad18:	d804      	bhi.n	800ad24 <_strtoul_l.isra.0+0xb4>
 800ad1a:	3c57      	subs	r4, #87	; 0x57
 800ad1c:	e7dc      	b.n	800acd8 <_strtoul_l.isra.0+0x68>
 800ad1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad22:	e7e5      	b.n	800acf0 <_strtoul_l.isra.0+0x80>
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	da09      	bge.n	800ad3c <_strtoul_l.isra.0+0xcc>
 800ad28:	2322      	movs	r3, #34	; 0x22
 800ad2a:	f8c8 3000 	str.w	r3, [r8]
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	f1ba 0f00 	cmp.w	sl, #0
 800ad36:	d107      	bne.n	800ad48 <_strtoul_l.isra.0+0xd8>
 800ad38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3c:	b101      	cbz	r1, 800ad40 <_strtoul_l.isra.0+0xd0>
 800ad3e:	4240      	negs	r0, r0
 800ad40:	f1ba 0f00 	cmp.w	sl, #0
 800ad44:	d0f8      	beq.n	800ad38 <_strtoul_l.isra.0+0xc8>
 800ad46:	b10b      	cbz	r3, 800ad4c <_strtoul_l.isra.0+0xdc>
 800ad48:	f105 39ff 	add.w	r9, r5, #4294967295
 800ad4c:	f8ca 9000 	str.w	r9, [sl]
 800ad50:	e7f2      	b.n	800ad38 <_strtoul_l.isra.0+0xc8>
 800ad52:	2430      	movs	r4, #48	; 0x30
 800ad54:	2e00      	cmp	r6, #0
 800ad56:	d1b0      	bne.n	800acba <_strtoul_l.isra.0+0x4a>
 800ad58:	2608      	movs	r6, #8
 800ad5a:	e7ae      	b.n	800acba <_strtoul_l.isra.0+0x4a>
 800ad5c:	2c30      	cmp	r4, #48	; 0x30
 800ad5e:	d0a4      	beq.n	800acaa <_strtoul_l.isra.0+0x3a>
 800ad60:	260a      	movs	r6, #10
 800ad62:	e7aa      	b.n	800acba <_strtoul_l.isra.0+0x4a>

0800ad64 <_strtoul_r>:
 800ad64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad66:	4c06      	ldr	r4, [pc, #24]	; (800ad80 <_strtoul_r+0x1c>)
 800ad68:	4d06      	ldr	r5, [pc, #24]	; (800ad84 <_strtoul_r+0x20>)
 800ad6a:	6824      	ldr	r4, [r4, #0]
 800ad6c:	6a24      	ldr	r4, [r4, #32]
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	bf08      	it	eq
 800ad72:	462c      	moveq	r4, r5
 800ad74:	9400      	str	r4, [sp, #0]
 800ad76:	f7ff ff7b 	bl	800ac70 <_strtoul_l.isra.0>
 800ad7a:	b003      	add	sp, #12
 800ad7c:	bd30      	pop	{r4, r5, pc}
 800ad7e:	bf00      	nop
 800ad80:	2000000c 	.word	0x2000000c
 800ad84:	20000070 	.word	0x20000070

0800ad88 <__submore>:
 800ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad94:	4299      	cmp	r1, r3
 800ad96:	d11d      	bne.n	800add4 <__submore+0x4c>
 800ad98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad9c:	f7ff fa66 	bl	800a26c <_malloc_r>
 800ada0:	b918      	cbnz	r0, 800adaa <__submore+0x22>
 800ada2:	f04f 30ff 	mov.w	r0, #4294967295
 800ada6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adae:	63a3      	str	r3, [r4, #56]	; 0x38
 800adb0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800adb4:	6360      	str	r0, [r4, #52]	; 0x34
 800adb6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800adba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800adbe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800adc2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800adc6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800adca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800adce:	6020      	str	r0, [r4, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e7e8      	b.n	800ada6 <__submore+0x1e>
 800add4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800add6:	0077      	lsls	r7, r6, #1
 800add8:	463a      	mov	r2, r7
 800adda:	f000 f837 	bl	800ae4c <_realloc_r>
 800adde:	4605      	mov	r5, r0
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d0de      	beq.n	800ada2 <__submore+0x1a>
 800ade4:	eb00 0806 	add.w	r8, r0, r6
 800ade8:	4601      	mov	r1, r0
 800adea:	4632      	mov	r2, r6
 800adec:	4640      	mov	r0, r8
 800adee:	f7fb fee7 	bl	8006bc0 <memcpy>
 800adf2:	f8c4 8000 	str.w	r8, [r4]
 800adf6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800adfa:	e7e9      	b.n	800add0 <__submore+0x48>

0800adfc <__ascii_wctomb>:
 800adfc:	b149      	cbz	r1, 800ae12 <__ascii_wctomb+0x16>
 800adfe:	2aff      	cmp	r2, #255	; 0xff
 800ae00:	bf85      	ittet	hi
 800ae02:	238a      	movhi	r3, #138	; 0x8a
 800ae04:	6003      	strhi	r3, [r0, #0]
 800ae06:	700a      	strbls	r2, [r1, #0]
 800ae08:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae0c:	bf98      	it	ls
 800ae0e:	2001      	movls	r0, #1
 800ae10:	4770      	bx	lr
 800ae12:	4608      	mov	r0, r1
 800ae14:	4770      	bx	lr

0800ae16 <memmove>:
 800ae16:	4288      	cmp	r0, r1
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	eb01 0302 	add.w	r3, r1, r2
 800ae1e:	d807      	bhi.n	800ae30 <memmove+0x1a>
 800ae20:	1e42      	subs	r2, r0, #1
 800ae22:	4299      	cmp	r1, r3
 800ae24:	d00a      	beq.n	800ae3c <memmove+0x26>
 800ae26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ae2e:	e7f8      	b.n	800ae22 <memmove+0xc>
 800ae30:	4283      	cmp	r3, r0
 800ae32:	d9f5      	bls.n	800ae20 <memmove+0xa>
 800ae34:	1881      	adds	r1, r0, r2
 800ae36:	1ad2      	subs	r2, r2, r3
 800ae38:	42d3      	cmn	r3, r2
 800ae3a:	d100      	bne.n	800ae3e <memmove+0x28>
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ae46:	e7f7      	b.n	800ae38 <memmove+0x22>

0800ae48 <__malloc_lock>:
 800ae48:	4770      	bx	lr

0800ae4a <__malloc_unlock>:
 800ae4a:	4770      	bx	lr

0800ae4c <_realloc_r>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	4607      	mov	r7, r0
 800ae50:	4614      	mov	r4, r2
 800ae52:	460e      	mov	r6, r1
 800ae54:	b921      	cbnz	r1, 800ae60 <_realloc_r+0x14>
 800ae56:	4611      	mov	r1, r2
 800ae58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae5c:	f7ff ba06 	b.w	800a26c <_malloc_r>
 800ae60:	b922      	cbnz	r2, 800ae6c <_realloc_r+0x20>
 800ae62:	f7ff f9b5 	bl	800a1d0 <_free_r>
 800ae66:	4625      	mov	r5, r4
 800ae68:	4628      	mov	r0, r5
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	f000 f814 	bl	800ae98 <_malloc_usable_size_r>
 800ae70:	42a0      	cmp	r0, r4
 800ae72:	d20f      	bcs.n	800ae94 <_realloc_r+0x48>
 800ae74:	4621      	mov	r1, r4
 800ae76:	4638      	mov	r0, r7
 800ae78:	f7ff f9f8 	bl	800a26c <_malloc_r>
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0f2      	beq.n	800ae68 <_realloc_r+0x1c>
 800ae82:	4631      	mov	r1, r6
 800ae84:	4622      	mov	r2, r4
 800ae86:	f7fb fe9b 	bl	8006bc0 <memcpy>
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	f7ff f99f 	bl	800a1d0 <_free_r>
 800ae92:	e7e9      	b.n	800ae68 <_realloc_r+0x1c>
 800ae94:	4635      	mov	r5, r6
 800ae96:	e7e7      	b.n	800ae68 <_realloc_r+0x1c>

0800ae98 <_malloc_usable_size_r>:
 800ae98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae9c:	1f18      	subs	r0, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	bfbc      	itt	lt
 800aea2:	580b      	ldrlt	r3, [r1, r0]
 800aea4:	18c0      	addlt	r0, r0, r3
 800aea6:	4770      	bx	lr

0800aea8 <_init>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	bf00      	nop
 800aeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeae:	bc08      	pop	{r3}
 800aeb0:	469e      	mov	lr, r3
 800aeb2:	4770      	bx	lr

0800aeb4 <_fini>:
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	bf00      	nop
 800aeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeba:	bc08      	pop	{r3}
 800aebc:	469e      	mov	lr, r3
 800aebe:	4770      	bx	lr
